<?xml version="1.0" encoding="UTF-8"?>
<project name="sharepoint-connector" default="sharepoint-connector" basedir=".">

  <!-- ========================= PROPERTIES ============================= -->
  <property file="version.properties"/>
  <property file="${user.home}/google-enterprise-connector-sharepoint.properties"/>

  <property name="product" value="Google Search Appliance Connector for SharePoint" />
  <property name="projects.dir" value=".." />

  <property name="COMPILE_DEBUG_FLAG" value="true" />
  <property name="COMPILE_DEBUG_LEVEL" value="source,lines,vars" />
  <property name="COMPILE_TARGET" value="1.6" />
  <property name="COMPILE_BOOTCLASSPATH" value="${build.bootclasspath}" />

  <property name="build" value="build" />
  <property name="javadoc" value="javadoc" />
  <property name="dist" value="dist" />
  <property name="src" value="source/java" />
  <property name="src_generated" value="source/java/com/google/enterprise/connector/sharepoint/generated" />
  <property name="classes" value="${build}/classes" />
  <property name="config" value="config" />
  <property name="config.tmp.dir" value="${build}/${config}" />
  <property name="testconfig.tmp.dir" value="${build}/testconfig" />
  <property environment="env" />
  <property name="wsdl" value="wsdl" />
  <property name="tests.src" value="source/javatests" />
  <property name="tests.data" value="${tests.src}/data" />
  <property name="tests.data" value="${tests.src}/data" />
  <property name="tests.build" value="build/tests" />
  <property name="tests.classes" value="${tests.build}/classes" />
  <property name="tests.todir" value="tests_outdir" />
  <property name="jar.dir" value="${dist}/jarfile" />
  <property name="jarfile" value="${jar.dir}/connector-sharepoint.jar" />
  <property name="connector-manager.dir" value="${CONNECTOR_MANAGER_DIR}" />
  <property name="spi.jarfile" value="${connector-manager.dir}/${jar.dir}/connector-spi.jar" />
  <property name="lib.jar.dir" value="lib" />
  <property name="adgroups.jar" value="../adgroups/dist/jarfile/connector-adgroups.jar" />
  <property name="spi.jar.dir" value="${connector-manager.dir}/${jar.dir}" />
  <property name="tests.jarfile" value="${connector-manager.dir}/${jar.dir}/connector-tests.jar" />
  <property name="downloads.dir" value="downloads" />
  <property name="cm-third-party.jar" value="${connector-manager.dir}/third-party/" />
  <property name="sql.properties" value="source/java/com/google/enterprise/connector/sharepoint/sql/" />

  <condition property="client.factory" value="com.google.enterprise.connector.sharepoint.wsclient.soap.SPClientFactory">
    <not>
      <isset property="client.factory" />
    </not>
  </condition>

  <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="${lib.jar.dir}/dev/ant-contrib-1.0b3.jar"/>

  <!--Cobertura properties -->
  <property file="${config}/build_code_coverage.properties" />
  <path id="cobertura.classpath">
    <fileset dir="${connector-manager.dir}/third-party/cobertura">
      <include name="**/*.jar" />
    </fileset>
  </path>

  <path id="axis.classpath">
    <fileset dir="lib">
      <include name="*.jar" />
      <include name="dev/*.jar" />
    </fileset>
  </path>

  <!-- =========================== TASKS =============================== -->
  <include file="${connector-manager.dir}/../svnbuild.xml" as="svn"/>

  <target name="sharepoint-connector" depends="clean,init, compile, jar,
    download-sharepoint-connector, download-solution-package">
  </target>

  <target name="init" >
    <mkdir dir="${build}" />
    <mkdir dir="${dist}" />
    <mkdir dir="${classes}" />
    <mkdir dir="${wsdl}" />
    <mkdir dir="${tests.build}" />
    <mkdir dir="${tests.classes}" />
    <mkdir dir="${tests.todir}" />
    <mkdir dir="${jar.dir}" />
    <mkdir dir="${src_generated}" />
    <mkdir dir="${downloads.dir}" />
    <mkdir dir="${javadoc}" />
  </target>

  <macrodef name="wsdl2java"
            description="Generates WSDL stubs with simple dependency checking.">
    <attribute name="url" />
    <attribute name="package" />
    <attribute name="generates" default="must-not-exist" />
    <sequential>
      <if>
    <!-- TODO: Use dependset to include all stubs in the check. -->
        <not><uptodate srcfile="@{url}" targetfile="@{generates}"/></not>
        <then>
          <java classname="org.apache.axis.wsdl.WSDL2Java" fork="True">
            <arg line="@{url} -p @{package} -o ${src}"/>
            <classpath refid="axis.classpath"/>
          </java>
        </then>
      </if>
    </sequential>
  </macrodef>

  <target name="stubs" depends="init">
    <property name="generated.package" 
              value="com.google.enterprise.connector.sharepoint.generated"/>

    <wsdl2java url="${wsdl}/SiteData.wsdl"
               package="${generated.package}.sitedata"
               generates="${src_generated}/sitedata/SiteData.java"/>
    <wsdl2java url="${wsdl}/GSBulkAuthorization.wsdl"
               package="${generated.package}.gsbulkauthorization"
               generates="${src_generated}/gsbulkauthorization/BulkAuthorization.java"/>
    <wsdl2java url="${wsdl}/Lists.wsdl"
               package="${generated.package}.lists"
               generates="${src_generated}/lists/Lists.java"/>
    <wsdl2java url="${wsdl}/Webs.wsdl"
               package="${generated.package}.webs"
               generates="${src_generated}/webs/Webs.java"/>
    <wsdl2java url="${wsdl}/GSSiteDiscovery.wsdl"
               package="${generated.package}.gssitediscovery"
               generates="${src_generated}/gssitediscovery/SiteDiscovery.java"/>
    <wsdl2java url="${wsdl}/UserProfileService.wsdl"
               package="${generated.package}.userprofileservice"
               generates="${src_generated}/userprofileservice/UserProfileService.java"/>
    <wsdl2java url="${wsdl}/sp2003/UserProfileService.wsdl"
               package="${generated.package}.sp2003.userprofileservice"
               generates="${src_generated}/sp2003/userprofileservice/UserProfileService.java"/>
    <wsdl2java url="${wsdl}/Alerts.wsdl"
               package="${generated.package}.alerts"
               generates="${src_generated}/alerts/Alerts.java"/>
    <wsdl2java url="${wsdl}/GssAcl.wsdl"
               package="${generated.package}.gssacl"
               generates="${src_generated}/gssacl/GssAcl.java"/>
    <wsdl2java url="${wsdl}/SP2010UserProfileService.wsdl"
               package="${generated.package}.sp2010.userprofileservice"
               generates="${src_generated}/sp2010/userprofileservice/UserProfileService.java"/>
    <wsdl2java url="${wsdl}/UserProfileChangeService.wsdl"
               package="${generated.package}.userprofilechangeservice"
               generates="${src_generated}/userprofilechangeservice/UserProfileChangeService.java"/>
  </target>

  <target name="compile_stubs" depends="init, stubs">
    <javac srcdir="${src}" destdir="${classes}" 
           includeantruntime="false"
           debug="${COMPILE_DEBUG_FLAG}" debuglevel="${COMPILE_DEBUG_LEVEL}" 
           target="${COMPILE_TARGET}" source="${COMPILE_TARGET}">
      <!-- Do not bother using -Xlint on the stubs. -->
      <bootclasspath path="${COMPILE_BOOTCLASSPATH}"/>
      <classpath>
        <fileset dir="${lib.jar.dir}">
          <include name="*.jar" />
        </fileset>
      </classpath>
      <include name="**/generated/**" />
    </javac>
  </target>

  <target name="compile" depends="compile_stubs">
    <!-- compile java source files -->
    <copy todir="${classes.dir}/com/google/enterprise/connector/sharepoint/sql">
      <fileset dir="${sql.properties}"/>
    </copy>
    <javac srcdir="${src}" destdir="${classes}" 
           includeantruntime="false"
           debug="${COMPILE_DEBUG_FLAG}" debuglevel="${COMPILE_DEBUG_LEVEL}" 
           target="${COMPILE_TARGET}" source="${COMPILE_TARGET}">
      <!-- Axis JAR Class-Path references are not available. -->
      <compilerarg line="-Xlint -Xlint:-serial -Xlint:-path"/>
      <bootclasspath path="${COMPILE_BOOTCLASSPATH}"/>
      <classpath>
        <pathelement location="${spi.jarfile}" />
        <pathelement location="${config}" />
        <fileset dir="${cm-third-party.jar}">
          <include name="prod/*.jar" />
        </fileset>
        <pathelement location="${adgroups.jar}" />
        <fileset dir="${lib.jar.dir}">
          <include name="*.jar" />
        </fileset>
      </classpath>
      <exclude name="**/generated/**" />
    </javac>
  </target>

  <target name="compile_tests" depends="init, compile">
    <!-- compile java source files for tests -->
    <javac srcdir="${tests.src}" destdir="${tests.classes}" 
           includeantruntime="false"
           debug="${COMPILE_DEBUG_FLAG}" debuglevel="${COMPILE_DEBUG_LEVEL}" 
           target="${COMPILE_TARGET}" source="${COMPILE_TARGET}">
      <!-- Axis JAR Class-Path references are not available. -->
      <compilerarg line="-Xlint -Xlint:-serial -Xlint:-path"/>
      <bootclasspath path="${COMPILE_BOOTCLASSPATH}"/>
      <classpath>
        <pathelement location="${spi.jar.dir}/connector.jar" />
        <pathelement location="${tests.jarfile}" />
        <pathelement location="${spi.jarfile}" />
        <pathelement location="${config}" />
        <pathelement location="${classes}" />
        <pathelement location="${adgroups.jar}" />
        <fileset dir="${cm-third-party.jar}">
          <include name="prod/*.jar" />
          <include name="tests/*.jar" />
        </fileset>
        <fileset dir="${lib.jar.dir}">
          <include name="*.jar" />
        </fileset>
      </classpath>
    </javac>

  </target>

  <target name="run_tests" depends="compile_tests,instrument">
    <!-- Generate the Axis client-config.wsdd with the 'FileTransport'
        needed by the tests. -->
    <mkdir dir="${testconfig.tmp.dir}" />
    <copy file="source/java/org/apache/axis/client/client-config.wsdd"
        tofile="${testconfig.tmp.dir}/client-config.wsdd" overwrite="true">
      <filterchain>
        <filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
          <param type="token" name="test.transport"
              value="&lt;transport name='FileTransport' pivot='java:com.google.enterprise.connector.sharepoint.wsclient.handlers.FileSender' /&gt;" />
        </filterreader>
      </filterchain>
    </copy>

    <property name="test.suite" value="*" />
    <junit printsummary="yes" haltonfailure="no"
           failureproperty="${ant.project.name}.failure">
      <!-- The instrumented classes reference classes used by the Cobertura runtime, so
            Cobertura and its dependencies must be on your classpath. -->
      <classpath location="${instrumented.dir}" />
      <classpath location="${classes.dir}" />
      <classpath refid="cobertura.classpath" />
      <classpath>
        <pathelement location="${spi.jar.dir}/connector.jar" />
        <pathelement location="${spi.jar.dir}/connector-spi.jar" />
        <pathelement location="${tests.jarfile}" />
        <pathelement location="${testconfig.tmp.dir}" />
        <pathelement location="${jarfile}" />
        <pathelement location="${adgroups.jar}" />
        <fileset dir="${cm-third-party.jar}">
          <include name="prod/*.jar" />
          <include name="tests/*.jar" />
        </fileset>
        <pathelement location="${config}" />
        <fileset dir="${lib.jar.dir}">
          <include name="*.jar" />
        </fileset>
        <pathelement location="${tests.classes}" />
        <pathelement location="${tests.src}" />
        <pathelement location="${tests.data}" />
        <pathelement location="${tests.data}" />
        <pathelement path="${java.class.path}" />
      </classpath>
      <formatter type="xml" />
      <batchtest fork="yes" todir="${reports.xml.dir}">
        <fileset dir="${tests.src}">
          <include name="**/${test.suite}Test.java" />
        </fileset>
      </batchtest>
    </junit>
    <junitreport todir="${reports.xml.dir}">
      <fileset dir="${reports.xml.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="frames" todir="${reports.html.dir}" />
    </junitreport>
    <fail if="${ant.project.name}.failure" message="Test failure"/>
  </target>

  <target name="init-package" depends="svn.svn-branch-version">
    <property name="downloads.prefix"
              value="connector-sharepoint-${svn.branch}" />
    <property name="repackage.prefix" value="connector-sharepoint-${version}"/>
	<property name="gss.name" value="connector-services-sharepoint" /> 
    <property name="gss.prefix"
              value="${gss.name}-${svn.branch}" />    
    <property name="repackage.gss.prefix"
              value="${gss.name}-${version}" />    
  </target>

  <target name="jar" depends="compile,init-package"
          description="sharepoint-connector">
    <copy todir="${config.tmp.dir}" overwrite="true">
      <fileset dir="${config}">
        <include name="**/connectorType.xml" />
        <include name="**/connectorDefaults.xml" />
      </fileset>
      <filterchain>
        <filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
          <param type="token" name="client.factory" value="${client.factory}" />
        </filterreader>
      </filterchain>
    </copy>

    <copy file="source/java/org/apache/axis/client/client-config.wsdd"
          tofile="${build}/client-config.wsdd" overwrite="true">
      <filterchain>
        <filterreader classname="org.apache.tools.ant.filters.ReplaceTokens">
          <param type="token" name="test.transport" value="" />
        </filterreader>
      </filterchain>
    </copy>

    <tstamp />
    <jar jarfile="${jarfile}">
      <fileset dir="${classes}" />
      <fileset dir="${config}">
        <exclude name="**/logging.properties" />
        <exclude name="**/connectorType.xml" />
        <exclude name="**/connectorDefaults.xml" />
      </fileset>
      <fileset dir="${config.tmp.dir}">
        <include name="**/connectorType.xml" />
        <include name="**/connectorDefaults.xml" />
      </fileset>

      <fileset dir="${build}">
        <include name="client-config.wsdd" />
      </fileset>
      <!--creation of manifest file-->
      <manifest>
        <attribute name="Implementation-Title" value="${product}" />
        <attribute name="Implementation-Version"
                   value="${version} (build ${svn.branch.version} ${TODAY})"/>
        <attribute name="Implementation-Vendor" value="Google Inc."/>
        <attribute name="Specification-Title" value="Connector Manager SPI"/>
        <attribute name="Specification-Version" value="${version.spi}"/>
        <attribute name="Specification-Vendor" value="Google Inc."/>
        <attribute name="Main-Class" value="com.google.enterprise.connector.sharepoint.SharePointMain" />
      </manifest>
    </jar>
  </target>

  <target name="download-sharepoint-connector" 
          depends="jar,javadoc,download-solution-package">
    <zip destfile="${downloads.dir}/${downloads.prefix}-src.zip">
      <zipfileset dir="." prefix="${downloads.prefix}">
        <include name="javadoc/**" />
        <include name="config/**" />
        <include name="License/**" />
        <include name="source/**" />
        <include name="source_net/**" />
        <include name="wsdl/**" />
        <include name="build.xml" />
        <include name="Build_ReadMe.txt" />
        <include name="COPYING" />
        <include name="README" />
        <include name="RELEASE_NOTES" />
      </zipfileset>
    </zip>
    <checksum algorithm="SHA-1"
              file="${downloads.dir}/${downloads.prefix}-src.zip" />

    <zip destfile="${downloads.dir}/${downloads.prefix}.zip">
      <zipfileset dir="." prefix="${downloads.prefix}">
        <include name="README" />
        <include name="RELEASE_NOTES" />
        <!-- Do not include dev subdirectories for these next two. -->
        <include name="License/*.*" />
        <include name="lib/*.*" />
      </zipfileset>
      <zipfileset dir="." prefix="${downloads.prefix}/License">
        <include name="COPYING" />
      </zipfileset>
      <zipfileset dir="config/config/" prefix="${downloads.prefix}/config">
        <include name="logging.properties" />
        <include name="ClaimsLogin.aspx" />
      </zipfileset>
      <zipfileset file="${jarfile}" prefix="${downloads.prefix}" />
      <zipfileset file="${adgroups.jar}" prefix="${downloads.prefix}/lib" />
    </zip>
    <checksum algorithm="SHA-1"
              file="${downloads.dir}/${downloads.prefix}.zip" />

    <zip destfile="${downloads.dir}/${gss.prefix}-src.zip">
      <zipfileset dir="" prefix="${gss.prefix}-src">
        <include name="source/net/**" />        
      </zipfileset>
    </zip>
    <checksum algorithm="SHA-1"
              file="${downloads.dir}/${gss.prefix}-src.zip" />    
  </target>
  
  <target name="download-solution-package" depends="oscheck"
       if="isWindows">
    <exec executable="makecab">
        <arg value="/f"/>
        <arg value="build.ddf"/>   
    </exec>    
    <zip destfile="${downloads.dir}/${gss.prefix}.zip">
      <zipfileset file="${build}/${gss.name}.wsp" prefix="${gss.prefix}" />
    </zip>
    <checksum algorithm="SHA-1"
              file="${downloads.dir}/${gss.prefix}.zip" />
  </target>
  
  <target name="oscheck">
    <condition property="isWindows">
      <os family="windows" />
    </condition>        
  </target>
  

  <target name="repackage" depends="init-package"
          description="Repackage release candidate files for release.">
    <repackage-downloads downloads.dir="${downloads.dir}"
                         downloads.prefix="${downloads.prefix}"
                         repackage.prefix="${repackage.prefix}" />
                         
    <repackage-downloads downloads.dir="${downloads.dir}"
                         downloads.prefix="${gss.prefix}"
                         repackage.prefix="${repackage.gss.prefix}" />
  </target>

  <target name="clean" depends="clean_code_coverage" description="Deletes files produced by compile and test.">
    <delete dir="${build}" />
    <delete dir="${dist}" />
    <delete dir="${downloads.dir}" />
    <delete dir="${tests.todir}" />
    <delete dir="${javadoc}" />
    <delete dir="${src_generated}"/>
  </target>

  <target name="javadoc" depends="compile" description="Create component Javadoc documentation">
    <javadoc sourcepath   ="${src}"
               destdir      ="${javadoc}"
               packagenames ="com.google.enterprise.connector.sharepoint.*,com.google.enterprise.connector.sharepoint.client.*,com.google.enterprise.connector.sharepoint.client.wsclient.*,com.google.enterprise.connector.sharepoint.client.wsclient.sp2003.*,com.google.enterprise.connector.sharepoint.state.*"
               author       ="true"
               private    ="true"
               version      ="true"
               doctitle     ="&lt;h2&gt;${product}&lt;/h2&gt;"
               windowtitle  ="${product} (Version ${version})"
               bottom       ="Copyright 2009 Google Inc.">
      <classpath>
        <pathelement location="${spi.jar.dir}/connector.jar" />
        <pathelement location="${spi.jar.dir}/connector-spi.jar" />
        <pathelement location="${tests.jarfile}" />
        <pathelement location="${spi.jar.dir}/connector-util.jar" />
        <pathelement location="${jarfile}" />
        <pathelement location="${config}" />
        <pathelement location="${adgroups.jar}" />
        <fileset dir="${cm-third-party.jar}">
          <include name="prod/*.jar" />
          <include name="tests/junit.jar" />
        </fileset>
        <fileset dir="${lib.jar.dir}">
          <include name="*.jar" />
        </fileset>
        <pathelement location="${tests.classes}" />
        <pathelement location="${tests.src}" />
        <pathelement path="${java.class.path}" />
      </classpath>
    </javadoc>
  </target>

  <target name="everything" description="Do it all!" depends="clean,sharepoint-connector,run_tests" />

  <!-- Cobertura Tasks -->

  <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

  <target name="init_code_coverage">
    <mkdir dir="${classes.dir}" />
    <mkdir dir="${instrumented.dir}" />
    <mkdir dir="${reports.xml.dir}" />
    <mkdir dir="${reports.html.dir}" />
    <mkdir dir="${coverage.xml.dir}" />
    <mkdir dir="${coverage.summaryxml.dir}" />
    <mkdir dir="${coverage.html.dir}" />
  </target>


  <target name="compile_code_coverage" 
          depends="init_code_coverage,compile_stubs,compile,compile_tests" />

  <target name="instrument" depends="compile_code_coverage">
    <cobertura-instrument todir="${instrumented.dir}">
      <!--  The following line causes instrument to ignore any  source line
            containing a reference to log4j, for the purposes of coverage reporting. -->
      <ignore regex="org.apache.log4j.*" />
      <fileset dir="${classes.dir}">
        <!-- Instrument all the application classes, but don't instrument the test classes. -->
        <!-- Instrument all the classes except the generated web services classes -->
        <include name="com/google/enterprise/connector/sharepoint/*.class" />
        <include name="com/google/enterprise/connector/sharepoint/cache/*.class" />
        <include name="com/google/enterprise/connector/sharepoint/client/*.class" />
        <include name="com/google/enterprise/connector/sharepoint/dao/*.class" />
        <include name="com/google/enterprise/connector/sharepoint/ldap/*.class" />
        <include name="com/google/enterprise/connector/sharepoint/spiimpl/*.class" />
        <include name="com/google/enterprise/connector/sharepoint/state/*.class" />
        <include name="com/google/enterprise/connector/sharepoint/wsclient/**/*.class" />
        <exclude name="com/google/enterprise/connector/sharepoint/generated/*.class" />
        <exclude name="**/*Test.class" />
      </fileset>
      <fileset dir="${classes.dir}/org/apache/commons/httpclient/contrib/ssl">
        <include name="**/*.class"/>
      </fileset>
    </cobertura-instrument>
  </target>

  <target name="coverage-report">
    <!-- Generate an XML file containing the coverage data using the "srcdir" attribute. -->
    <cobertura-report srcdir="${src.dir}" destdir="${coverage.xml.dir}" format="xml" />
  </target>

  <target name="alternate-coverage-report">
    <!-- Generate a series of HTML files containing the coverage data in a user-readable form using nested source filesets. -->
    <cobertura-report destdir="${coverage.html.dir}">
      <fileset dir="${src.dir}">
        <include name="**/*.java"/>
      </fileset>
    </cobertura-report>
  </target>


  <target name="clean_code_coverage" description="Remove all files created by the build/test process.">
    <delete dir="${classes.dir}" />
    <delete dir="${instrumented.dir}" />
    <delete dir="${reports.dir}" />
    <delete file="cobertura.log" />
    <delete file="cobertura.ser" />
  </target>
  <target name="run_code_coverage" depends="run_tests,coverage-report,alternate-coverage-report" description="Compile, instrument ourself, run the tests and generate JUnit and coverage reports."/>
</project>
