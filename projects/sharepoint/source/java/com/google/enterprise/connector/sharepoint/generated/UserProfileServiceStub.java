/**
 * UserProfileServiceStub.java
 * 
 * This file was auto-generated from WSDL by the Apache Axis2 version: 1.1 Nov
 * 13, 2006 (07:31:44 LKT)
 */
package com.google.enterprise.connector.sharepoint.generated;



/*
 * UserProfileServiceStub java implementation
 */


public class UserProfileServiceStub extends org.apache.axis2.client.Stub {
  protected org.apache.axis2.description.AxisOperation[] _operations;

  // hashmaps to keep the fault mapping
  private java.util.HashMap faultExeptionNameMap = new java.util.HashMap();
  private java.util.HashMap faultExeptionClassNameMap = new java.util.HashMap();
  private java.util.HashMap faultMessageMap = new java.util.HashMap();


  private void populateAxisService() throws org.apache.axis2.AxisFault {

    // creating the Service with a unique name
    _service = new org.apache.axis2.description.AxisService(
      "UserProfileService" + this.hashCode());



    // creating the operations
    org.apache.axis2.description.AxisOperation __operation;



    _operations = new org.apache.axis2.description.AxisOperation[33];

    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation
      .setName(new javax.xml.namespace.QName("", "GetUserProfileCount"));
    _service.addOperation(__operation);



    _operations[0] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("", "UpdatePinnedLink"));
    _service.addOperation(__operation);



    _operations[1] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("", "GetUserLinks"));
    _service.addOperation(__operation);



    _operations[2] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("",
      "CreateUserProfileByAccountName"));
    _service.addOperation(__operation);



    _operations[3] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("", "AddMembership"));
    _service.addOperation(__operation);



    _operations[4] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("", "GetUserColleagues"));
    _service.addOperation(__operation);



    _operations[5] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("",
      "GetPropertyChoiceList"));
    _service.addOperation(__operation);



    _operations[6] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("", "AddLink"));
    _service.addOperation(__operation);



    _operations[7] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("",
      "GetCommonMemberships"));
    _service.addOperation(__operation);



    _operations[8] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("", "RemoveColleague"));
    _service.addOperation(__operation);



    _operations[9] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation
      .setName(new javax.xml.namespace.QName("", "GetUserMemberships"));
    _service.addOperation(__operation);



    _operations[10] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("", "RemovePinnedLink"));
    _service.addOperation(__operation);



    _operations[11] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("", "GetInCommon"));
    _service.addOperation(__operation);



    _operations[12] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("", "RemoveMembership"));
    _service.addOperation(__operation);



    _operations[13] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("",
      "RemoveAllPinnedLinks"));
    _service.addOperation(__operation);



    _operations[14] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation
      .setName(new javax.xml.namespace.QName("", "GetCommonColleagues"));
    _service.addOperation(__operation);



    _operations[15] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("",
      "RemoveAllMemberships"));
    _service.addOperation(__operation);



    _operations[16] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("",
      "UpdateMembershipPrivacy"));
    _service.addOperation(__operation);



    _operations[17] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("",
      "GetUserProfileByGuid"));
    _service.addOperation(__operation);



    _operations[18] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("",
      "UpdateColleaguePrivacy"));
    _service.addOperation(__operation);



    _operations[19] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("",
      "ModifyUserPropertyByAccountName"));
    _service.addOperation(__operation);



    _operations[20] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("", "RemoveAllLinks"));
    _service.addOperation(__operation);



    _operations[21] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("",
      "GetUserProfileSchema"));
    _service.addOperation(__operation);



    _operations[22] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("", "CreateMemberGroup"));
    _service.addOperation(__operation);



    _operations[23] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation
      .setName(new javax.xml.namespace.QName("", "GetUserPinnedLinks"));
    _service.addOperation(__operation);



    _operations[24] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("", "RemoveLink"));
    _service.addOperation(__operation);



    _operations[25] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("", "AddPinnedLink"));
    _service.addOperation(__operation);



    _operations[26] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("", "UpdateLink"));
    _service.addOperation(__operation);



    _operations[27] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation
      .setName(new javax.xml.namespace.QName("", "RemoveAllColleagues"));
    _service.addOperation(__operation);



    _operations[28] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("", "GetCommonManager"));
    _service.addOperation(__operation);



    _operations[29] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("",
      "GetUserProfileByName"));
    _service.addOperation(__operation);



    _operations[30] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("",
      "GetUserProfileByIndex"));
    _service.addOperation(__operation);



    _operations[31] = __operation;


    __operation = new org.apache.axis2.description.OutInAxisOperation();


    __operation.setName(new javax.xml.namespace.QName("", "AddColleague"));
    _service.addOperation(__operation);



    _operations[32] = __operation;


  }

  // populates the faults
  private void populateFaults() {



  }

  /**
   * Constructor that takes in a configContext
   */
  public UserProfileServiceStub(
      org.apache.axis2.context.ConfigurationContext configurationContext,
      java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
    // To populate AxisService
    populateAxisService();
    populateFaults();

    _serviceClient = new org.apache.axis2.client.ServiceClient(
      configurationContext, _service);


    configurationContext = _serviceClient.getServiceContext()
      .getConfigurationContext();

    _serviceClient.getOptions().setTo(
      new org.apache.axis2.addressing.EndpointReference(targetEndpoint));


  }

  /**
   * Default Constructor
   */
  public UserProfileServiceStub() throws org.apache.axis2.AxisFault {

    this("http://contentvm1/_vti_bin/UserProfileService.asmx");

  }

  /**
   * Constructor taking the target endpoint
   */
  public UserProfileServiceStub(java.lang.String targetEndpoint)
      throws org.apache.axis2.AxisFault {
    this(null, targetEndpoint);
  }



  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#GetUserProfileCount
   * @param param0
   * 
   */
  public UserProfileServiceStub.GetUserProfileCountResponse GetUserProfileCount(

  UserProfileServiceStub.GetUserProfileCount param0)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[0].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/GetUserProfileCount");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(
        getFactory(_operationClient.getOptions().getSoapVersionURI()),
        param0,
        optimizeContent(new javax.xml.namespace.QName("", "GetUserProfileCount")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(
        _returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.GetUserProfileCountResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.GetUserProfileCountResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#UpdatePinnedLink
   * @param param2
   * 
   */
  public UserProfileServiceStub.UpdatePinnedLinkResponse UpdatePinnedLink(

  UserProfileServiceStub.UpdatePinnedLink param2)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[1].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/UpdatePinnedLink");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param2,
        optimizeContent(new javax.xml.namespace.QName("", "UpdatePinnedLink")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.UpdatePinnedLinkResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.UpdatePinnedLinkResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#GetUserLinks
   * @param param4
   * 
   */
  public UserProfileServiceStub.GetUserLinksResponse GetUserLinks(

  UserProfileServiceStub.GetUserLinks param4)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[2].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/GetUserLinks");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param4,
        optimizeContent(new javax.xml.namespace.QName("", "GetUserLinks")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.GetUserLinksResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.GetUserLinksResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#CreateUserProfileByAccountName
   * @param param6
   * 
   */
  public UserProfileServiceStub.CreateUserProfileByAccountNameResponse CreateUserProfileByAccountName(

  UserProfileServiceStub.CreateUserProfileByAccountName param6)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[3].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/CreateUserProfileByAccountName");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param6,
        optimizeContent(new javax.xml.namespace.QName("",
          "CreateUserProfileByAccountName")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(
        _returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.CreateUserProfileByAccountNameResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.CreateUserProfileByAccountNameResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#AddMembership
   * @param param8
   * 
   */
  public UserProfileServiceStub.AddMembershipResponse AddMembership(

  UserProfileServiceStub.AddMembership param8)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[4].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/AddMembership");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param8,
        optimizeContent(new javax.xml.namespace.QName("", "AddMembership")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.AddMembershipResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.AddMembershipResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#GetUserColleagues
   * @param param10
   * 
   */
  public UserProfileServiceStub.GetUserColleaguesResponse GetUserColleagues(

  UserProfileServiceStub.GetUserColleagues param10)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[5].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/GetUserColleagues");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param10,
        optimizeContent(new javax.xml.namespace.QName("", "GetUserColleagues")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.GetUserColleaguesResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.GetUserColleaguesResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#GetPropertyChoiceList
   * @param param12
   * 
   */
  public UserProfileServiceStub.GetPropertyChoiceListResponse GetPropertyChoiceList(

  UserProfileServiceStub.GetPropertyChoiceList param12)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[6].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/GetPropertyChoiceList");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param12,
        optimizeContent(new javax.xml.namespace.QName("",
          "GetPropertyChoiceList")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(
        _returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.GetPropertyChoiceListResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.GetPropertyChoiceListResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#AddLink
   * @param param14
   * 
   */
  public UserProfileServiceStub.AddLinkResponse AddLink(

  UserProfileServiceStub.AddLink param14)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[7].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/AddLink");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param14,
        optimizeContent(new javax.xml.namespace.QName("", "AddLink")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.AddLinkResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.AddLinkResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#GetCommonMemberships
   * @param param16
   * 
   */
  public UserProfileServiceStub.GetCommonMembershipsResponse GetCommonMemberships(

  UserProfileServiceStub.GetCommonMemberships param16)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[8].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/GetCommonMemberships");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param16,
        optimizeContent(new javax.xml.namespace.QName("",
          "GetCommonMemberships")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(
        _returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.GetCommonMembershipsResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.GetCommonMembershipsResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#RemoveColleague
   * @param param18
   * 
   */
  public UserProfileServiceStub.RemoveColleagueResponse RemoveColleague(

  UserProfileServiceStub.RemoveColleague param18)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[9].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/RemoveColleague");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param18,
        optimizeContent(new javax.xml.namespace.QName("", "RemoveColleague")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.RemoveColleagueResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.RemoveColleagueResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#GetUserMemberships
   * @param param20
   * 
   */
  public UserProfileServiceStub.GetUserMembershipsResponse GetUserMemberships(

  UserProfileServiceStub.GetUserMemberships param20)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[10].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/GetUserMemberships");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(
        getFactory(_operationClient.getOptions().getSoapVersionURI()),
        param20,
        optimizeContent(new javax.xml.namespace.QName("", "GetUserMemberships")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.GetUserMembershipsResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.GetUserMembershipsResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#RemovePinnedLink
   * @param param22
   * 
   */
  public UserProfileServiceStub.RemovePinnedLinkResponse RemovePinnedLink(

  UserProfileServiceStub.RemovePinnedLink param22)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[11].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/RemovePinnedLink");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param22,
        optimizeContent(new javax.xml.namespace.QName("", "RemovePinnedLink")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.RemovePinnedLinkResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.RemovePinnedLinkResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#GetInCommon
   * @param param24
   * 
   */
  public UserProfileServiceStub.GetInCommonResponse GetInCommon(

  UserProfileServiceStub.GetInCommon param24)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[12].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/GetInCommon");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param24,
        optimizeContent(new javax.xml.namespace.QName("", "GetInCommon")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.GetInCommonResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.GetInCommonResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#RemoveMembership
   * @param param26
   * 
   */
  public UserProfileServiceStub.RemoveMembershipResponse RemoveMembership(

  UserProfileServiceStub.RemoveMembership param26)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[13].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/RemoveMembership");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param26,
        optimizeContent(new javax.xml.namespace.QName("", "RemoveMembership")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.RemoveMembershipResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.RemoveMembershipResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#RemoveAllPinnedLinks
   * @param param28
   * 
   */
  public UserProfileServiceStub.RemoveAllPinnedLinksResponse RemoveAllPinnedLinks(

  UserProfileServiceStub.RemoveAllPinnedLinks param28)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[14].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/RemoveAllPinnedLinks");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param28,
        optimizeContent(new javax.xml.namespace.QName("",
          "RemoveAllPinnedLinks")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(
        _returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.RemoveAllPinnedLinksResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.RemoveAllPinnedLinksResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#GetCommonColleagues
   * @param param30
   * 
   */
  public UserProfileServiceStub.GetCommonColleaguesResponse GetCommonColleagues(

  UserProfileServiceStub.GetCommonColleagues param30)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[15].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/GetCommonColleagues");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(
        getFactory(_operationClient.getOptions().getSoapVersionURI()),
        param30,
        optimizeContent(new javax.xml.namespace.QName("", "GetCommonColleagues")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(
        _returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.GetCommonColleaguesResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.GetCommonColleaguesResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#RemoveAllMemberships
   * @param param32
   * 
   */
  public UserProfileServiceStub.RemoveAllMembershipsResponse RemoveAllMemberships(

  UserProfileServiceStub.RemoveAllMemberships param32)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[16].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/RemoveAllMemberships");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param32,
        optimizeContent(new javax.xml.namespace.QName("",
          "RemoveAllMemberships")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(
        _returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.RemoveAllMembershipsResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.RemoveAllMembershipsResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#UpdateMembershipPrivacy
   * @param param34
   * 
   */
  public UserProfileServiceStub.UpdateMembershipPrivacyResponse UpdateMembershipPrivacy(

  UserProfileServiceStub.UpdateMembershipPrivacy param34)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[17].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/UpdateMembershipPrivacy");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param34,
        optimizeContent(new javax.xml.namespace.QName("",
          "UpdateMembershipPrivacy")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(
        _returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.UpdateMembershipPrivacyResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.UpdateMembershipPrivacyResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#GetUserProfileByGuid
   * @param param36
   * 
   */
  public UserProfileServiceStub.GetUserProfileByGuidResponse GetUserProfileByGuid(

  UserProfileServiceStub.GetUserProfileByGuid param36)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[18].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/GetUserProfileByGuid");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param36,
        optimizeContent(new javax.xml.namespace.QName("",
          "GetUserProfileByGuid")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(
        _returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.GetUserProfileByGuidResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.GetUserProfileByGuidResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#UpdateColleaguePrivacy
   * @param param38
   * 
   */
  public UserProfileServiceStub.UpdateColleaguePrivacyResponse UpdateColleaguePrivacy(

  UserProfileServiceStub.UpdateColleaguePrivacy param38)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[19].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/UpdateColleaguePrivacy");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param38,
        optimizeContent(new javax.xml.namespace.QName("",
          "UpdateColleaguePrivacy")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(
        _returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.UpdateColleaguePrivacyResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.UpdateColleaguePrivacyResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#ModifyUserPropertyByAccountName
   * @param param40
   * 
   */
  public UserProfileServiceStub.ModifyUserPropertyByAccountNameResponse ModifyUserPropertyByAccountName(

  UserProfileServiceStub.ModifyUserPropertyByAccountName param40)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[20].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/ModifyUserPropertyByAccountName");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param40,
        optimizeContent(new javax.xml.namespace.QName("",
          "ModifyUserPropertyByAccountName")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(
        _returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.ModifyUserPropertyByAccountNameResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.ModifyUserPropertyByAccountNameResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#RemoveAllLinks
   * @param param42
   * 
   */
  public UserProfileServiceStub.RemoveAllLinksResponse RemoveAllLinks(

  UserProfileServiceStub.RemoveAllLinks param42)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[21].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/RemoveAllLinks");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param42,
        optimizeContent(new javax.xml.namespace.QName("", "RemoveAllLinks")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.RemoveAllLinksResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.RemoveAllLinksResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#GetUserProfileSchema
   * @param param44
   * 
   */
  public UserProfileServiceStub.GetUserProfileSchemaResponse GetUserProfileSchema(

  UserProfileServiceStub.GetUserProfileSchema param44)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[22].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/GetUserProfileSchema");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param44,
        optimizeContent(new javax.xml.namespace.QName("",
          "GetUserProfileSchema")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(
        _returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.GetUserProfileSchemaResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.GetUserProfileSchemaResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#CreateMemberGroup
   * @param param46
   * 
   */
  public UserProfileServiceStub.CreateMemberGroupResponse CreateMemberGroup(

  UserProfileServiceStub.CreateMemberGroup param46)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[23].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/CreateMemberGroup");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param46,
        optimizeContent(new javax.xml.namespace.QName("", "CreateMemberGroup")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.CreateMemberGroupResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.CreateMemberGroupResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#GetUserPinnedLinks
   * @param param48
   * 
   */
  public UserProfileServiceStub.GetUserPinnedLinksResponse GetUserPinnedLinks(

  UserProfileServiceStub.GetUserPinnedLinks param48)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[24].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/GetUserPinnedLinks");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(
        getFactory(_operationClient.getOptions().getSoapVersionURI()),
        param48,
        optimizeContent(new javax.xml.namespace.QName("", "GetUserPinnedLinks")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.GetUserPinnedLinksResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.GetUserPinnedLinksResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#RemoveLink
   * @param param50
   * 
   */
  public UserProfileServiceStub.RemoveLinkResponse RemoveLink(

  UserProfileServiceStub.RemoveLink param50)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[25].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/RemoveLink");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param50,
        optimizeContent(new javax.xml.namespace.QName("", "RemoveLink")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.RemoveLinkResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.RemoveLinkResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#AddPinnedLink
   * @param param52
   * 
   */
  public UserProfileServiceStub.AddPinnedLinkResponse AddPinnedLink(

  UserProfileServiceStub.AddPinnedLink param52)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[26].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/AddPinnedLink");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param52,
        optimizeContent(new javax.xml.namespace.QName("", "AddPinnedLink")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.AddPinnedLinkResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.AddPinnedLinkResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#UpdateLink
   * @param param54
   * 
   */
  public UserProfileServiceStub.UpdateLinkResponse UpdateLink(

  UserProfileServiceStub.UpdateLink param54)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[27].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/UpdateLink");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param54,
        optimizeContent(new javax.xml.namespace.QName("", "UpdateLink")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.UpdateLinkResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.UpdateLinkResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#RemoveAllColleagues
   * @param param56
   * 
   */
  public UserProfileServiceStub.RemoveAllColleaguesResponse RemoveAllColleagues(

  UserProfileServiceStub.RemoveAllColleagues param56)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[28].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/RemoveAllColleagues");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(
        getFactory(_operationClient.getOptions().getSoapVersionURI()),
        param56,
        optimizeContent(new javax.xml.namespace.QName("", "RemoveAllColleagues")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(
        _returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.RemoveAllColleaguesResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.RemoveAllColleaguesResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#GetCommonManager
   * @param param58
   * 
   */
  public UserProfileServiceStub.GetCommonManagerResponse GetCommonManager(

  UserProfileServiceStub.GetCommonManager param58)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[29].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/GetCommonManager");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param58,
        optimizeContent(new javax.xml.namespace.QName("", "GetCommonManager")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.GetCommonManagerResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.GetCommonManagerResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#GetUserProfileByName
   * @param param60
   * 
   */
  public UserProfileServiceStub.GetUserProfileByNameResponse GetUserProfileByName(

  UserProfileServiceStub.GetUserProfileByName param60)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[30].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/GetUserProfileByName");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param60,
        optimizeContent(new javax.xml.namespace.QName("",
          "GetUserProfileByName")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(
        _returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.GetUserProfileByNameResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.GetUserProfileByNameResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#GetUserProfileByIndex
   * @param param62
   * 
   */
  public UserProfileServiceStub.GetUserProfileByIndexResponse GetUserProfileByIndex(

  UserProfileServiceStub.GetUserProfileByIndex param62)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[31].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/GetUserProfileByIndex");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param62,
        optimizeContent(new javax.xml.namespace.QName("",
          "GetUserProfileByIndex")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(
        _returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.GetUserProfileByIndexResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.GetUserProfileByIndexResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }

  /**
   * Auto generated method signature
   * 
   * @see UserProfileService#AddColleague
   * @param param64
   * 
   */
  public UserProfileServiceStub.AddColleagueResponse AddColleague(

  UserProfileServiceStub.AddColleague param64)
      throws java.rmi.RemoteException

  {
    try {
      org.apache.axis2.client.OperationClient _operationClient = _serviceClient
        .createClient(_operations[32].getName());
      _operationClient
        .getOptions()
        .setAction(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService/AddColleague");
      _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);



      // create SOAP envelope with that payload
      org.apache.axiom.soap.SOAPEnvelope env = null;

      // Style is Doc.


      env = toEnvelope(getFactory(_operationClient.getOptions()
        .getSoapVersionURI()), param64,
        optimizeContent(new javax.xml.namespace.QName("", "AddColleague")));

      // adding SOAP headers
      _serviceClient.addHeadersToEnvelope(env);
      // create message context with that soap envelope
      org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();
      _messageContext.setEnvelope(env);

      // add the message contxt to the operation client
      _operationClient.addMessageContext(_messageContext);

      // execute the operation client
      _operationClient.execute(true);


      org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
        .getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
      org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
        .getEnvelope();


      java.lang.Object object = fromOM(_returnEnv.getBody().getFirstElement(),
        UserProfileServiceStub.AddColleagueResponse.class,
        getEnvelopeNamespaces(_returnEnv));
      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
      return (UserProfileServiceStub.AddColleagueResponse) object;

    } catch (org.apache.axis2.AxisFault f) {
      org.apache.axiom.om.OMElement faultElt = f.getDetail();
      if (faultElt != null) {
        if (faultExeptionNameMap.containsKey(faultElt.getQName())) {
          // make the fault by reflection
          try {
            java.lang.String exceptionClassName = (java.lang.String) faultExeptionClassNameMap
              .get(faultElt.getQName());
            java.lang.Class exceptionClass = java.lang.Class
              .forName(exceptionClassName);
            java.lang.Exception ex = (java.lang.Exception) exceptionClass
              .newInstance();
            // message class
            java.lang.String messageClassName = (java.lang.String) faultMessageMap
              .get(faultElt.getQName());
            java.lang.Class messageClass = java.lang.Class
              .forName(messageClassName);
            java.lang.Object messageObject = fromOM(faultElt, messageClass,
              null);
            java.lang.reflect.Method m = exceptionClass.getMethod(
              "setFaultMessage", new java.lang.Class[]{messageClass});
            m.invoke(ex, new java.lang.Object[]{messageObject});


            throw new java.rmi.RemoteException(ex.getMessage(), ex);
          } catch (java.lang.ClassCastException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.ClassNotFoundException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.NoSuchMethodException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.reflect.InvocationTargetException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.IllegalAccessException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          } catch (java.lang.InstantiationException e) {
            // we cannot intantiate the class - throw the original Axis fault
            throw f;
          }
        } else {
          throw f;
        }
      } else {
        throw f;
      }
    }
  }


  /**
   * A utility method that copies the namepaces from the SOAPEnvelope
   */
  private java.util.Map getEnvelopeNamespaces(
      org.apache.axiom.soap.SOAPEnvelope env) {
    java.util.Map returnMap = new java.util.HashMap();
    java.util.Iterator namespaceIterator = env.getAllDeclaredNamespaces();
    while (namespaceIterator.hasNext()) {
      org.apache.axiom.om.OMNamespace ns = (org.apache.axiom.om.OMNamespace) namespaceIterator
        .next();
      returnMap.put(ns.getPrefix(), ns.getNamespaceURI());
    }
    return returnMap;
  }



  private javax.xml.namespace.QName[] opNameArray = null;

  private boolean optimizeContent(javax.xml.namespace.QName opName) {


    if (opNameArray == null) {
      return false;
    }
    for (int i = 0; i < opNameArray.length; i++) {
      if (opName.equals(opNameArray[i])) {
        return true;
      }
    }
    return false;
  }

  // http://contentvm1/_vti_bin/UserProfileService.asmx
  public static class GetUserPinnedLinks implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetUserPinnedLinks", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetUserPinnedLinks parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetUserPinnedLinks object = new GetUserPinnedLinks();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetUserPinnedLinks".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetUserPinnedLinks) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class UpdatePinnedLinkResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "UpdatePinnedLinkResponse", "ns1");



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }



          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();



      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static UpdatePinnedLinkResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        UpdatePinnedLinkResponse object = new UpdatePinnedLinkResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"UpdatePinnedLinkResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (UpdatePinnedLinkResponse) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class UpdateColleaguePrivacy implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "UpdateColleaguePrivacy", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }


    /**
     * field for ColleagueAccountName
     */

    protected java.lang.String localColleagueAccountName;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getColleagueAccountName() {
      return localColleagueAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param ColleagueAccountName
     */
    public void setColleagueAccountName(java.lang.String param) {

      this.localColleagueAccountName = param;


    }


    /**
     * field for NewPrivacy
     */

    protected Privacy localNewPrivacy;


    /**
     * Auto generated getter method
     * 
     * @return Privacy
     */
    public Privacy getNewPrivacy() {
      return localNewPrivacy;
    }



    /**
     * Auto generated setter method
     * 
     * @param param NewPrivacy
     */
    public void setNewPrivacy(Privacy param) {

      this.localNewPrivacy = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }
          namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
          if (!namespace.equals("")) {
            prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
              prefix = org.apache.axis2.databinding.utils.BeanUtil
                .getUniquePrefix();

              xmlWriter.writeStartElement(prefix, "colleagueAccountName",
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);

            } else {
              xmlWriter.writeStartElement(namespace, "colleagueAccountName");
            }

          } else {
            xmlWriter.writeStartElement("colleagueAccountName");
          }


          if (localColleagueAccountName == null) {
            // write the nil attribute

            throw new RuntimeException("colleagueAccountName cannot be null!!");

          } else {


            xmlWriter
              .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(localColleagueAccountName));

          }

          xmlWriter.writeEndElement();

          if (localNewPrivacy == null) {
            throw new RuntimeException("newPrivacy cannot be null!!");
          }
          localNewPrivacy
            .getOMElement(
              new javax.xml.namespace.QName(
                "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                "newPrivacy"), factory).serialize(xmlWriter);


          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }
      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "colleagueAccountName"));

      if (localColleagueAccountName != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
          .convertToString(localColleagueAccountName));
      } else {
        throw new RuntimeException("colleagueAccountName cannot be null!!");
      }

      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "newPrivacy"));


      if (localNewPrivacy == null) {
        throw new RuntimeException("newPrivacy cannot be null!!");
      }
      elementList.add(localNewPrivacy);


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static UpdateColleaguePrivacy parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        UpdateColleaguePrivacy object = new UpdateColleaguePrivacy();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"UpdateColleaguePrivacy".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (UpdateColleaguePrivacy) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "colleagueAccountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setColleagueAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "newPrivacy").equals(reader.getName())) {

            object.setNewPrivacy(Privacy.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class ArrayOfPropertyInfo implements
      org.apache.axis2.databinding.ADBBean {
    /*
     * This type was generated from the piece of schema that had name =
     * ArrayOfPropertyInfo Namespace URI =
     * http://microsoft.com/webservices/SharePointPortalServer/UserProfileService
     * Namespace Prefix = ns1
     */


    /**
     * field for PropertyInfo This was an Array!
     */

    protected PropertyInfo[] localPropertyInfo;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localPropertyInfoTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return PropertyInfo[]
     */
    public PropertyInfo[] getPropertyInfo() {
      return localPropertyInfo;
    }



    /**
     * validate the array for PropertyInfo
     */
    protected void validatePropertyInfo(PropertyInfo[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param PropertyInfo
     */
    public void setPropertyInfo(PropertyInfo[] param) {

      validatePropertyInfo(param);


      if (param != null) {
        // update the setting tracker
        localPropertyInfoTracker = true;
      } else {
        localPropertyInfoTracker = true;

      }

      this.localPropertyInfo = param;
    }



    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param PropertyInfo
     */
    public void addPropertyInfo(PropertyInfo param) {
      if (localPropertyInfo == null) {
        localPropertyInfo = new PropertyInfo[]{};
      }


      // update the setting tracker
      localPropertyInfoTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
        .toList(localPropertyInfo);
      list.add(param);
      this.localPropertyInfo = (PropertyInfo[]) list
        .toArray(new PropertyInfo[list.size()]);

    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localPropertyInfoTracker) {
            if (localPropertyInfo != null) {
              for (int i = 0; i < localPropertyInfo.length; i++) {
                if (localPropertyInfo[i] != null) {
                  localPropertyInfo[i]
                    .getOMElement(
                      new javax.xml.namespace.QName(
                        "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                        "PropertyInfo"), factory).serialize(xmlWriter);
                } else {

                  // write null attribute
                  java.lang.String namespace2 = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
                  if (!namespace2.equals("")) {
                    java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                    if (prefix2 == null) {
                      prefix2 = org.apache.axis2.databinding.utils.BeanUtil
                        .getUniquePrefix();

                      xmlWriter.writeStartElement(prefix2, "PropertyInfo",
                        namespace2);
                      xmlWriter.writeNamespace(prefix2, namespace2);
                      xmlWriter.setPrefix(prefix2, namespace2);

                    } else {
                      xmlWriter.writeStartElement(namespace2, "PropertyInfo");
                    }

                  } else {
                    xmlWriter.writeStartElement("PropertyInfo");
                  }

                  // write the nil attribute
                  writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "nil", "true",
                    xmlWriter);
                  xmlWriter.writeEndElement();

                }

              }
            } else {

              // write null attribute
              java.lang.String namespace2 = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
              if (!namespace2.equals("")) {
                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                if (prefix2 == null) {
                  prefix2 = org.apache.axis2.databinding.utils.BeanUtil
                    .getUniquePrefix();

                  xmlWriter.writeStartElement(prefix2, "PropertyInfo",
                    namespace2);
                  xmlWriter.writeNamespace(prefix2, namespace2);
                  xmlWriter.setPrefix(prefix2, namespace2);

                } else {
                  xmlWriter.writeStartElement(namespace2, "PropertyInfo");
                }

              } else {
                xmlWriter.writeStartElement("PropertyInfo");
              }

              // write the nil attribute
              writeAttribute("xsi",
                "http://www.w3.org/2001/XMLSchema-instance", "nil", "true",
                xmlWriter);
              xmlWriter.writeEndElement();

            }
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
        parentQName, factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localPropertyInfoTracker) {
        if (localPropertyInfo != null) {
          for (int i = 0; i < localPropertyInfo.length; i++) {

            if (localPropertyInfo[i] != null) {
              elementList
                .add(new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "PropertyInfo"));
              elementList.add(localPropertyInfo[i]);
            } else {

              elementList
                .add(new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "PropertyInfo"));
              elementList.add(null);

            }

          }
        } else {

          elementList
            .add(new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "PropertyInfo"));
          elementList.add(localPropertyInfo);

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static ArrayOfPropertyInfo parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        ArrayOfPropertyInfo object = new ArrayOfPropertyInfo();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"ArrayOfPropertyInfo".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (ArrayOfPropertyInfo) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "PropertyInfo").equals(reader.getName())) {



            // Process the array and step past its final element's end.

            if ("true".equals(reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "nil"))) {
              list1.add(null);
              reader.next();
            } else {
              list1.add(PropertyInfo.Factory.parse(reader));
            }
            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement())
                reader.next();
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml
                // structure
                loopDone1 = true;
              } else {
                if (new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "PropertyInfo").equals(reader.getName())) {

                  if ("true".equals(reader.getAttributeValue(
                    "http://www.w3.org/2001/XMLSchema-instance", "nil"))) {
                    list1.add(null);
                    reader.next();
                  } else {
                    list1.add(PropertyInfo.Factory.parse(reader));
                  }
                } else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array
            object
              .setPropertyInfo((PropertyInfo[]) org.apache.axis2.databinding.utils.ConverterUtil
                .convertToArray(PropertyInfo.class, list1));

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class UpdateMembershipPrivacyResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "UpdateMembershipPrivacyResponse", "ns1");



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }



          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();



      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static UpdateMembershipPrivacyResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        UpdateMembershipPrivacyResponse object = new UpdateMembershipPrivacyResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"UpdateMembershipPrivacyResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (UpdateMembershipPrivacyResponse) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class Guid implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/wsdl/types/", "guid", "ns2");



    /**
     * field for Guid
     */

    protected java.lang.String localGuid;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getGuid() {
      return localGuid;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Guid
     */
    public void setGuid(java.lang.String param) {

      this.localGuid = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {


          // We can safely assume an element has only one type associated with
          // it

          java.lang.String namespace = parentQName.getNamespaceURI();
          java.lang.String localName = parentQName.getLocalPart();

          if (!namespace.equals("")) {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
              prefix = org.apache.axis2.databinding.utils.BeanUtil
                .getUniquePrefix();

              xmlWriter.writeStartElement(prefix, localName, namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);

            } else {
              xmlWriter.writeStartElement(namespace, localName);
            }

          } else {
            xmlWriter.writeStartElement(localName);
          }

          if (localGuid == null) {

            throw new RuntimeException("testValue cannot be null !!");

          } else {

            xmlWriter
              .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(localGuid));

          }

          xmlWriter.writeEndElement();


        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      // We can safely assume an element has only one type associated with it
      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        MY_QNAME,
        new java.lang.Object[]{
          org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
          org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localGuid)}, null);

    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static Guid parse(javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        Guid object = new Guid();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          while (!reader.isEndElement()) {
            if (reader.isStartElement() || reader.hasText()) {

              if (reader.isStartElement() || reader.hasText()) {

                java.lang.String content = reader.getElementText();

                object.setGuid(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(content));

              } // End of if for expected property start element

              else {
                // A start element we are not expecting indicates an invalid
                // parameter was passed
                throw new java.lang.RuntimeException("Unexpected subelement "
                  + reader.getLocalName());
              }

            } else
              reader.next();
          } // end of while loop



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class ArrayOfContactData implements
      org.apache.axis2.databinding.ADBBean {
    /*
     * This type was generated from the piece of schema that had name =
     * ArrayOfContactData Namespace URI =
     * http://microsoft.com/webservices/SharePointPortalServer/UserProfileService
     * Namespace Prefix = ns1
     */


    /**
     * field for ContactData This was an Array!
     */

    protected ContactData[] localContactData;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localContactDataTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ContactData[]
     */
    public ContactData[] getContactData() {
      return localContactData;
    }



    /**
     * validate the array for ContactData
     */
    protected void validateContactData(ContactData[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ContactData
     */
    public void setContactData(ContactData[] param) {

      validateContactData(param);


      if (param != null) {
        // update the setting tracker
        localContactDataTracker = true;
      } else {
        localContactDataTracker = true;

      }

      this.localContactData = param;
    }



    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param ContactData
     */
    public void addContactData(ContactData param) {
      if (localContactData == null) {
        localContactData = new ContactData[]{};
      }


      // update the setting tracker
      localContactDataTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
        .toList(localContactData);
      list.add(param);
      this.localContactData = (ContactData[]) list.toArray(new ContactData[list
        .size()]);

    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localContactDataTracker) {
            if (localContactData != null) {
              for (int i = 0; i < localContactData.length; i++) {
                if (localContactData[i] != null) {
                  localContactData[i]
                    .getOMElement(
                      new javax.xml.namespace.QName(
                        "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                        "ContactData"), factory).serialize(xmlWriter);
                } else {

                  // write null attribute
                  java.lang.String namespace2 = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
                  if (!namespace2.equals("")) {
                    java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                    if (prefix2 == null) {
                      prefix2 = org.apache.axis2.databinding.utils.BeanUtil
                        .getUniquePrefix();

                      xmlWriter.writeStartElement(prefix2, "ContactData",
                        namespace2);
                      xmlWriter.writeNamespace(prefix2, namespace2);
                      xmlWriter.setPrefix(prefix2, namespace2);

                    } else {
                      xmlWriter.writeStartElement(namespace2, "ContactData");
                    }

                  } else {
                    xmlWriter.writeStartElement("ContactData");
                  }

                  // write the nil attribute
                  writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "nil", "true",
                    xmlWriter);
                  xmlWriter.writeEndElement();

                }

              }
            } else {

              // write null attribute
              java.lang.String namespace2 = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
              if (!namespace2.equals("")) {
                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                if (prefix2 == null) {
                  prefix2 = org.apache.axis2.databinding.utils.BeanUtil
                    .getUniquePrefix();

                  xmlWriter.writeStartElement(prefix2, "ContactData",
                    namespace2);
                  xmlWriter.writeNamespace(prefix2, namespace2);
                  xmlWriter.setPrefix(prefix2, namespace2);

                } else {
                  xmlWriter.writeStartElement(namespace2, "ContactData");
                }

              } else {
                xmlWriter.writeStartElement("ContactData");
              }

              // write the nil attribute
              writeAttribute("xsi",
                "http://www.w3.org/2001/XMLSchema-instance", "nil", "true",
                xmlWriter);
              xmlWriter.writeEndElement();

            }
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
        parentQName, factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localContactDataTracker) {
        if (localContactData != null) {
          for (int i = 0; i < localContactData.length; i++) {

            if (localContactData[i] != null) {
              elementList
                .add(new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "ContactData"));
              elementList.add(localContactData[i]);
            } else {

              elementList
                .add(new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "ContactData"));
              elementList.add(null);

            }

          }
        } else {

          elementList
            .add(new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "ContactData"));
          elementList.add(localContactData);

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static ArrayOfContactData parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        ArrayOfContactData object = new ArrayOfContactData();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"ArrayOfContactData".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (ArrayOfContactData) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "ContactData").equals(reader.getName())) {



            // Process the array and step past its final element's end.

            if ("true".equals(reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "nil"))) {
              list1.add(null);
              reader.next();
            } else {
              list1.add(ContactData.Factory.parse(reader));
            }
            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement())
                reader.next();
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml
                // structure
                loopDone1 = true;
              } else {
                if (new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "ContactData").equals(reader.getName())) {

                  if ("true".equals(reader.getAttributeValue(
                    "http://www.w3.org/2001/XMLSchema-instance", "nil"))) {
                    list1.add(null);
                    reader.next();
                  } else {
                    list1.add(ContactData.Factory.parse(reader));
                  }
                } else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array
            object
              .setContactData((ContactData[]) org.apache.axis2.databinding.utils.ConverterUtil
                .convertToArray(ContactData.class, list1));

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class ModifyUserPropertyByAccountNameResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "ModifyUserPropertyByAccountNameResponse", "ns1");



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }



          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();



      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static ModifyUserPropertyByAccountNameResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        ModifyUserPropertyByAccountNameResponse object = new ModifyUserPropertyByAccountNameResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"ModifyUserPropertyByAccountNameResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (ModifyUserPropertyByAccountNameResponse) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class ArrayOfValueData implements
      org.apache.axis2.databinding.ADBBean {
    /*
     * This type was generated from the piece of schema that had name =
     * ArrayOfValueData Namespace URI =
     * http://microsoft.com/webservices/SharePointPortalServer/UserProfileService
     * Namespace Prefix = ns1
     */


    /**
     * field for ValueData This was an Array!
     */

    protected ValueData[] localValueData;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localValueDataTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ValueData[]
     */
    public ValueData[] getValueData() {
      return localValueData;
    }



    /**
     * validate the array for ValueData
     */
    protected void validateValueData(ValueData[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param ValueData
     */
    public void setValueData(ValueData[] param) {

      validateValueData(param);


      if (param != null) {
        // update the setting tracker
        localValueDataTracker = true;
      } else {
        localValueDataTracker = true;

      }

      this.localValueData = param;
    }



    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param ValueData
     */
    public void addValueData(ValueData param) {
      if (localValueData == null) {
        localValueData = new ValueData[]{};
      }


      // update the setting tracker
      localValueDataTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
        .toList(localValueData);
      list.add(param);
      this.localValueData = (ValueData[]) list.toArray(new ValueData[list
        .size()]);

    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localValueDataTracker) {
            if (localValueData != null) {
              for (int i = 0; i < localValueData.length; i++) {
                if (localValueData[i] != null) {
                  localValueData[i]
                    .getOMElement(
                      new javax.xml.namespace.QName(
                        "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                        "ValueData"), factory).serialize(xmlWriter);
                } else {

                  // write null attribute
                  java.lang.String namespace2 = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
                  if (!namespace2.equals("")) {
                    java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                    if (prefix2 == null) {
                      prefix2 = org.apache.axis2.databinding.utils.BeanUtil
                        .getUniquePrefix();

                      xmlWriter.writeStartElement(prefix2, "ValueData",
                        namespace2);
                      xmlWriter.writeNamespace(prefix2, namespace2);
                      xmlWriter.setPrefix(prefix2, namespace2);

                    } else {
                      xmlWriter.writeStartElement(namespace2, "ValueData");
                    }

                  } else {
                    xmlWriter.writeStartElement("ValueData");
                  }

                  // write the nil attribute
                  writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "nil", "true",
                    xmlWriter);
                  xmlWriter.writeEndElement();

                }

              }
            } else {

              // write null attribute
              java.lang.String namespace2 = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
              if (!namespace2.equals("")) {
                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                if (prefix2 == null) {
                  prefix2 = org.apache.axis2.databinding.utils.BeanUtil
                    .getUniquePrefix();

                  xmlWriter.writeStartElement(prefix2, "ValueData", namespace2);
                  xmlWriter.writeNamespace(prefix2, namespace2);
                  xmlWriter.setPrefix(prefix2, namespace2);

                } else {
                  xmlWriter.writeStartElement(namespace2, "ValueData");
                }

              } else {
                xmlWriter.writeStartElement("ValueData");
              }

              // write the nil attribute
              writeAttribute("xsi",
                "http://www.w3.org/2001/XMLSchema-instance", "nil", "true",
                xmlWriter);
              xmlWriter.writeEndElement();

            }
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
        parentQName, factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localValueDataTracker) {
        if (localValueData != null) {
          for (int i = 0; i < localValueData.length; i++) {

            if (localValueData[i] != null) {
              elementList
                .add(new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "ValueData"));
              elementList.add(localValueData[i]);
            } else {

              elementList
                .add(new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "ValueData"));
              elementList.add(null);

            }

          }
        } else {

          elementList
            .add(new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "ValueData"));
          elementList.add(localValueData);

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static ArrayOfValueData parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        ArrayOfValueData object = new ArrayOfValueData();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"ArrayOfValueData".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (ArrayOfValueData) ExtensionMapper.getTypeObject(nsUri,
                  type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "ValueData").equals(reader.getName())) {



            // Process the array and step past its final element's end.

            if ("true".equals(reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "nil"))) {
              list1.add(null);
              reader.next();
            } else {
              list1.add(ValueData.Factory.parse(reader));
            }
            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement())
                reader.next();
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml
                // structure
                loopDone1 = true;
              } else {
                if (new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "ValueData").equals(reader.getName())) {

                  if ("true".equals(reader.getAttributeValue(
                    "http://www.w3.org/2001/XMLSchema-instance", "nil"))) {
                    list1.add(null);
                    reader.next();
                  } else {
                    list1.add(ValueData.Factory.parse(reader));
                  }
                } else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array
            object
              .setValueData((ValueData[]) org.apache.axis2.databinding.utils.ConverterUtil
                .convertToArray(ValueData.class, list1));

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class MembershipGroupType implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "MembershipGroupType", "ns1");



    /**
     * field for MembershipGroupType
     */

    protected java.lang.String localMembershipGroupType;

    private static java.util.HashMap _table_ = new java.util.HashMap();

    // Constructor
    protected MembershipGroupType(java.lang.String value) {
      localMembershipGroupType = value;

      _table_.put(localMembershipGroupType, this);


    }


    public static final java.lang.String _None = org.apache.axis2.databinding.utils.ConverterUtil
      .convertToString("None");

    public static final java.lang.String _Owner = org.apache.axis2.databinding.utils.ConverterUtil
      .convertToString("Owner");

    public static final java.lang.String _Member = org.apache.axis2.databinding.utils.ConverterUtil
      .convertToString("Member");

    public static final MembershipGroupType None = new MembershipGroupType(
      _None);

    public static final MembershipGroupType Owner = new MembershipGroupType(
      _Owner);

    public static final MembershipGroupType Member = new MembershipGroupType(
      _Member);


    public java.lang.String getValue() {
      return localMembershipGroupType;
    }

    public static MembershipGroupType fromValue(java.lang.String value)
        throws java.lang.IllegalArgumentException {
      MembershipGroupType enumeration = (MembershipGroupType)

      _table_.get(value);


      if (enumeration == null)
        throw new java.lang.IllegalArgumentException();
      return enumeration;
    }

    public static MembershipGroupType fromString(java.lang.String value)
        throws java.lang.IllegalArgumentException {
      try {

        return fromValue(new java.lang.String(value));


      } catch (java.lang.Exception e) {
        throw new java.lang.IllegalArgumentException();
      }
    }

    public boolean equals(java.lang.Object obj) {
      return (obj == this);
    }

    public int hashCode() {
      return toString().hashCode();
    }

    public java.lang.String toString() {

      return localMembershipGroupType.toString();


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {


          // We can safely assume an element has only one type associated with
          // it

          java.lang.String namespace = parentQName.getNamespaceURI();
          java.lang.String localName = parentQName.getLocalPart();

          if (!namespace.equals("")) {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
              prefix = org.apache.axis2.databinding.utils.BeanUtil
                .getUniquePrefix();

              xmlWriter.writeStartElement(prefix, localName, namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);

            } else {
              xmlWriter.writeStartElement(namespace, localName);
            }

          } else {
            xmlWriter.writeStartElement(localName);
          }

          if (localMembershipGroupType == null) {

            throw new RuntimeException("testValue cannot be null !!");

          } else {

            xmlWriter
              .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(localMembershipGroupType));

          }

          xmlWriter.writeEndElement();


        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      // We can safely assume an element has only one type associated with it
      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        MY_QNAME,
        new java.lang.Object[]{
          org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
          org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localMembershipGroupType)}, null);

    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static MembershipGroupType parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        MembershipGroupType object = null;
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          while (!reader.isEndElement()) {
            if (reader.isStartElement() || reader.hasText()) {

              java.lang.String content = reader.getElementText();

              object = MembershipGroupType.fromString(content);

            } else
              reader.next();
          } // end of while loop



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class QuickLinkData implements
      org.apache.axis2.databinding.ADBBean {
    /*
     * This type was generated from the piece of schema that had name =
     * QuickLinkData Namespace URI =
     * http://microsoft.com/webservices/SharePointPortalServer/UserProfileService
     * Namespace Prefix = ns1
     */


    /**
     * field for Name
     */

    protected java.lang.String localName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getName() {
      return localName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Name
     */
    public void setName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localNameTracker = true;
      } else {
        localNameTracker = false;

      }

      this.localName = param;


    }


    /**
     * field for Group
     */

    protected java.lang.String localGroup;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localGroupTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getGroup() {
      return localGroup;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Group
     */
    public void setGroup(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localGroupTracker = true;
      } else {
        localGroupTracker = false;

      }

      this.localGroup = param;


    }


    /**
     * field for Privacy
     */

    protected Privacy localPrivacy;


    /**
     * Auto generated getter method
     * 
     * @return Privacy
     */
    public Privacy getPrivacy() {
      return localPrivacy;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Privacy
     */
    public void setPrivacy(Privacy param) {

      this.localPrivacy = param;


    }


    /**
     * field for Url
     */

    protected java.lang.String localUrl;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localUrlTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getUrl() {
      return localUrl;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Url
     */
    public void setUrl(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localUrlTracker = true;
      } else {
        localUrlTracker = false;

      }

      this.localUrl = param;


    }


    /**
     * field for ID
     */

    protected long localID;


    /**
     * Auto generated getter method
     * 
     * @return long
     */
    public long getID() {
      return localID;
    }



    /**
     * Auto generated setter method
     * 
     * @param param ID
     */
    public void setID(long param) {

      this.localID = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "Name", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "Name");
              }

            } else {
              xmlWriter.writeStartElement("Name");
            }


            if (localName == null) {
              // write the nil attribute

              throw new RuntimeException("Name cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localName));

            }

            xmlWriter.writeEndElement();
          }
          if (localGroupTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "Group", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "Group");
              }

            } else {
              xmlWriter.writeStartElement("Group");
            }


            if (localGroup == null) {
              // write the nil attribute

              throw new RuntimeException("Group cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localGroup));

            }

            xmlWriter.writeEndElement();
          }
          if (localPrivacy == null) {
            throw new RuntimeException("Privacy cannot be null!!");
          }
          localPrivacy
            .getOMElement(
              new javax.xml.namespace.QName(
                "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                "Privacy"), factory).serialize(xmlWriter);
          if (localUrlTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "Url", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "Url");
              }

            } else {
              xmlWriter.writeStartElement("Url");
            }


            if (localUrl == null) {
              // write the nil attribute

              throw new RuntimeException("Url cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localUrl));

            }

            xmlWriter.writeEndElement();
          }
          namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
          if (!namespace.equals("")) {
            prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
              prefix = org.apache.axis2.databinding.utils.BeanUtil
                .getUniquePrefix();

              xmlWriter.writeStartElement(prefix, "ID", namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);

            } else {
              xmlWriter.writeStartElement(namespace, "ID");
            }

          } else {
            xmlWriter.writeStartElement("ID");
          }

          xmlWriter
            .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(localID));

          xmlWriter.writeEndElement();


          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
        parentQName, factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "Name"));

        if (localName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localName));
        } else {
          throw new RuntimeException("Name cannot be null!!");
        }
      }
      if (localGroupTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "Group"));

        if (localGroup != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localGroup));
        } else {
          throw new RuntimeException("Group cannot be null!!");
        }
      }
      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "Privacy"));


      if (localPrivacy == null) {
        throw new RuntimeException("Privacy cannot be null!!");
      }
      elementList.add(localPrivacy);
      if (localUrlTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "Url"));

        if (localUrl != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localUrl));
        } else {
          throw new RuntimeException("Url cannot be null!!");
        }
      }
      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "ID"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString(localID));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static QuickLinkData parse(javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        QuickLinkData object = new QuickLinkData();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"QuickLinkData".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (QuickLinkData) ExtensionMapper.getTypeObject(nsUri,
                  type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Name").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setName(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Group").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setGroup(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Privacy").equals(reader.getName())) {

            object.setPrivacy(Privacy.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Url").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setUrl(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "ID").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setID(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToLong(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class ArrayOfPinnedLinkData implements
      org.apache.axis2.databinding.ADBBean {
    /*
     * This type was generated from the piece of schema that had name =
     * ArrayOfPinnedLinkData Namespace URI =
     * http://microsoft.com/webservices/SharePointPortalServer/UserProfileService
     * Namespace Prefix = ns1
     */


    /**
     * field for PinnedLinkData This was an Array!
     */

    protected PinnedLinkData[] localPinnedLinkData;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localPinnedLinkDataTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return PinnedLinkData[]
     */
    public PinnedLinkData[] getPinnedLinkData() {
      return localPinnedLinkData;
    }



    /**
     * validate the array for PinnedLinkData
     */
    protected void validatePinnedLinkData(PinnedLinkData[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param PinnedLinkData
     */
    public void setPinnedLinkData(PinnedLinkData[] param) {

      validatePinnedLinkData(param);


      if (param != null) {
        // update the setting tracker
        localPinnedLinkDataTracker = true;
      } else {
        localPinnedLinkDataTracker = true;

      }

      this.localPinnedLinkData = param;
    }



    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param PinnedLinkData
     */
    public void addPinnedLinkData(PinnedLinkData param) {
      if (localPinnedLinkData == null) {
        localPinnedLinkData = new PinnedLinkData[]{};
      }


      // update the setting tracker
      localPinnedLinkDataTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
        .toList(localPinnedLinkData);
      list.add(param);
      this.localPinnedLinkData = (PinnedLinkData[]) list
        .toArray(new PinnedLinkData[list.size()]);

    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localPinnedLinkDataTracker) {
            if (localPinnedLinkData != null) {
              for (int i = 0; i < localPinnedLinkData.length; i++) {
                if (localPinnedLinkData[i] != null) {
                  localPinnedLinkData[i]
                    .getOMElement(
                      new javax.xml.namespace.QName(
                        "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                        "PinnedLinkData"), factory).serialize(xmlWriter);
                } else {

                  // write null attribute
                  java.lang.String namespace2 = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
                  if (!namespace2.equals("")) {
                    java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                    if (prefix2 == null) {
                      prefix2 = org.apache.axis2.databinding.utils.BeanUtil
                        .getUniquePrefix();

                      xmlWriter.writeStartElement(prefix2, "PinnedLinkData",
                        namespace2);
                      xmlWriter.writeNamespace(prefix2, namespace2);
                      xmlWriter.setPrefix(prefix2, namespace2);

                    } else {
                      xmlWriter.writeStartElement(namespace2, "PinnedLinkData");
                    }

                  } else {
                    xmlWriter.writeStartElement("PinnedLinkData");
                  }

                  // write the nil attribute
                  writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "nil", "true",
                    xmlWriter);
                  xmlWriter.writeEndElement();

                }

              }
            } else {

              // write null attribute
              java.lang.String namespace2 = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
              if (!namespace2.equals("")) {
                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                if (prefix2 == null) {
                  prefix2 = org.apache.axis2.databinding.utils.BeanUtil
                    .getUniquePrefix();

                  xmlWriter.writeStartElement(prefix2, "PinnedLinkData",
                    namespace2);
                  xmlWriter.writeNamespace(prefix2, namespace2);
                  xmlWriter.setPrefix(prefix2, namespace2);

                } else {
                  xmlWriter.writeStartElement(namespace2, "PinnedLinkData");
                }

              } else {
                xmlWriter.writeStartElement("PinnedLinkData");
              }

              // write the nil attribute
              writeAttribute("xsi",
                "http://www.w3.org/2001/XMLSchema-instance", "nil", "true",
                xmlWriter);
              xmlWriter.writeEndElement();

            }
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
        parentQName, factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localPinnedLinkDataTracker) {
        if (localPinnedLinkData != null) {
          for (int i = 0; i < localPinnedLinkData.length; i++) {

            if (localPinnedLinkData[i] != null) {
              elementList
                .add(new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "PinnedLinkData"));
              elementList.add(localPinnedLinkData[i]);
            } else {

              elementList
                .add(new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "PinnedLinkData"));
              elementList.add(null);

            }

          }
        } else {

          elementList
            .add(new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "PinnedLinkData"));
          elementList.add(localPinnedLinkData);

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static ArrayOfPinnedLinkData parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        ArrayOfPinnedLinkData object = new ArrayOfPinnedLinkData();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"ArrayOfPinnedLinkData".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (ArrayOfPinnedLinkData) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "PinnedLinkData").equals(reader.getName())) {



            // Process the array and step past its final element's end.

            if ("true".equals(reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "nil"))) {
              list1.add(null);
              reader.next();
            } else {
              list1.add(PinnedLinkData.Factory.parse(reader));
            }
            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement())
                reader.next();
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml
                // structure
                loopDone1 = true;
              } else {
                if (new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "PinnedLinkData").equals(reader.getName())) {

                  if ("true".equals(reader.getAttributeValue(
                    "http://www.w3.org/2001/XMLSchema-instance", "nil"))) {
                    list1.add(null);
                    reader.next();
                  } else {
                    list1.add(PinnedLinkData.Factory.parse(reader));
                  }
                } else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array
            object
              .setPinnedLinkData((PinnedLinkData[]) org.apache.axis2.databinding.utils.ConverterUtil
                .convertToArray(PinnedLinkData.class, list1));

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class ArrayOfMembershipData implements
      org.apache.axis2.databinding.ADBBean {
    /*
     * This type was generated from the piece of schema that had name =
     * ArrayOfMembershipData Namespace URI =
     * http://microsoft.com/webservices/SharePointPortalServer/UserProfileService
     * Namespace Prefix = ns1
     */


    /**
     * field for MembershipData This was an Array!
     */

    protected MembershipData[] localMembershipData;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localMembershipDataTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return MembershipData[]
     */
    public MembershipData[] getMembershipData() {
      return localMembershipData;
    }



    /**
     * validate the array for MembershipData
     */
    protected void validateMembershipData(MembershipData[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param MembershipData
     */
    public void setMembershipData(MembershipData[] param) {

      validateMembershipData(param);


      if (param != null) {
        // update the setting tracker
        localMembershipDataTracker = true;
      } else {
        localMembershipDataTracker = true;

      }

      this.localMembershipData = param;
    }



    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param MembershipData
     */
    public void addMembershipData(MembershipData param) {
      if (localMembershipData == null) {
        localMembershipData = new MembershipData[]{};
      }


      // update the setting tracker
      localMembershipDataTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
        .toList(localMembershipData);
      list.add(param);
      this.localMembershipData = (MembershipData[]) list
        .toArray(new MembershipData[list.size()]);

    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localMembershipDataTracker) {
            if (localMembershipData != null) {
              for (int i = 0; i < localMembershipData.length; i++) {
                if (localMembershipData[i] != null) {
                  localMembershipData[i]
                    .getOMElement(
                      new javax.xml.namespace.QName(
                        "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                        "MembershipData"), factory).serialize(xmlWriter);
                } else {

                  // write null attribute
                  java.lang.String namespace2 = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
                  if (!namespace2.equals("")) {
                    java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                    if (prefix2 == null) {
                      prefix2 = org.apache.axis2.databinding.utils.BeanUtil
                        .getUniquePrefix();

                      xmlWriter.writeStartElement(prefix2, "MembershipData",
                        namespace2);
                      xmlWriter.writeNamespace(prefix2, namespace2);
                      xmlWriter.setPrefix(prefix2, namespace2);

                    } else {
                      xmlWriter.writeStartElement(namespace2, "MembershipData");
                    }

                  } else {
                    xmlWriter.writeStartElement("MembershipData");
                  }

                  // write the nil attribute
                  writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "nil", "true",
                    xmlWriter);
                  xmlWriter.writeEndElement();

                }

              }
            } else {

              // write null attribute
              java.lang.String namespace2 = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
              if (!namespace2.equals("")) {
                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                if (prefix2 == null) {
                  prefix2 = org.apache.axis2.databinding.utils.BeanUtil
                    .getUniquePrefix();

                  xmlWriter.writeStartElement(prefix2, "MembershipData",
                    namespace2);
                  xmlWriter.writeNamespace(prefix2, namespace2);
                  xmlWriter.setPrefix(prefix2, namespace2);

                } else {
                  xmlWriter.writeStartElement(namespace2, "MembershipData");
                }

              } else {
                xmlWriter.writeStartElement("MembershipData");
              }

              // write the nil attribute
              writeAttribute("xsi",
                "http://www.w3.org/2001/XMLSchema-instance", "nil", "true",
                xmlWriter);
              xmlWriter.writeEndElement();

            }
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
        parentQName, factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localMembershipDataTracker) {
        if (localMembershipData != null) {
          for (int i = 0; i < localMembershipData.length; i++) {

            if (localMembershipData[i] != null) {
              elementList
                .add(new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "MembershipData"));
              elementList.add(localMembershipData[i]);
            } else {

              elementList
                .add(new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "MembershipData"));
              elementList.add(null);

            }

          }
        } else {

          elementList
            .add(new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "MembershipData"));
          elementList.add(localMembershipData);

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static ArrayOfMembershipData parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        ArrayOfMembershipData object = new ArrayOfMembershipData();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"ArrayOfMembershipData".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (ArrayOfMembershipData) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "MembershipData").equals(reader.getName())) {



            // Process the array and step past its final element's end.

            if ("true".equals(reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "nil"))) {
              list1.add(null);
              reader.next();
            } else {
              list1.add(MembershipData.Factory.parse(reader));
            }
            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement())
                reader.next();
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml
                // structure
                loopDone1 = true;
              } else {
                if (new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "MembershipData").equals(reader.getName())) {

                  if ("true".equals(reader.getAttributeValue(
                    "http://www.w3.org/2001/XMLSchema-instance", "nil"))) {
                    list1.add(null);
                    reader.next();
                  } else {
                    list1.add(MembershipData.Factory.parse(reader));
                  }
                } else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array
            object
              .setMembershipData((MembershipData[]) org.apache.axis2.databinding.utils.ConverterUtil
                .convertToArray(MembershipData.class, list1));

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class ValueData implements org.apache.axis2.databinding.ADBBean {
    /*
     * This type was generated from the piece of schema that had name =
     * ValueData Namespace URI =
     * http://microsoft.com/webservices/SharePointPortalServer/UserProfileService
     * Namespace Prefix = ns1
     */


    /**
     * field for Value
     */

    protected org.apache.axiom.om.OMElement localValue;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localValueTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getValue() {
      return localValue;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Value
     */
    public void setValue(org.apache.axiom.om.OMElement param) {

      if (param != null) {
        // update the setting tracker
        localValueTracker = true;
      } else {
        localValueTracker = false;

      }

      this.localValue = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localValueTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "Value", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "Value");
              }

            } else {
              xmlWriter.writeStartElement("Value");
            }


            if (localValue == null) {
              // write the nil attribute

              throw new RuntimeException("Value cannot be null!!");

            } else {

              localValue.serialize(xmlWriter);

            }

            xmlWriter.writeEndElement();
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
        parentQName, factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localValueTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "Value"));

        if (localValue != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localValue));
        } else {
          throw new RuntimeException("Value cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static ValueData parse(javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        ValueData object = new ValueData();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"ValueData".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (ValueData) ExtensionMapper.getTypeObject(nsUri, type,
                  reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()) {

            java.lang.String content = reader.getElementText();

            org.apache.axiom.om.OMFactory fac = org.apache.axiom.om.OMAbstractFactory
              .getOMFactory();
            org.apache.axiom.om.OMNamespace omNs = fac
              .createOMNamespace(
                "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                "");
            org.apache.axiom.om.OMElement _valueValue = fac.createOMElement(
              "Value", omNs);
            _valueValue.addChild(fac.createOMText(_valueValue, content));
            object.setValue(_valueValue);

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class Privacy implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "Privacy", "ns1");



    /**
     * field for Privacy
     */

    protected java.lang.String localPrivacy;

    private static java.util.HashMap _table_ = new java.util.HashMap();

    // Constructor
    protected Privacy(java.lang.String value) {
      localPrivacy = value;

      _table_.put(localPrivacy, this);


    }


    public static final java.lang.String _Public = org.apache.axis2.databinding.utils.ConverterUtil
      .convertToString("Public");

    public static final java.lang.String _Contacts = org.apache.axis2.databinding.utils.ConverterUtil
      .convertToString("Contacts");

    public static final java.lang.String _Organization = org.apache.axis2.databinding.utils.ConverterUtil
      .convertToString("Organization");

    public static final java.lang.String _Manager = org.apache.axis2.databinding.utils.ConverterUtil
      .convertToString("Manager");

    public static final java.lang.String _Private = org.apache.axis2.databinding.utils.ConverterUtil
      .convertToString("Private");

    public static final java.lang.String _NotSet = org.apache.axis2.databinding.utils.ConverterUtil
      .convertToString("NotSet");

    public static final Privacy Public = new Privacy(_Public);

    public static final Privacy Contacts = new Privacy(_Contacts);

    public static final Privacy Organization = new Privacy(_Organization);

    public static final Privacy Manager = new Privacy(_Manager);

    public static final Privacy Private = new Privacy(_Private);

    public static final Privacy NotSet = new Privacy(_NotSet);


    public java.lang.String getValue() {
      return localPrivacy;
    }

    public static Privacy fromValue(java.lang.String value)
        throws java.lang.IllegalArgumentException {
      Privacy enumeration = (Privacy)

      _table_.get(value);


      if (enumeration == null)
        throw new java.lang.IllegalArgumentException();
      return enumeration;
    }

    public static Privacy fromString(java.lang.String value)
        throws java.lang.IllegalArgumentException {
      try {

        return fromValue(new java.lang.String(value));


      } catch (java.lang.Exception e) {
        throw new java.lang.IllegalArgumentException();
      }
    }

    public boolean equals(java.lang.Object obj) {
      return (obj == this);
    }

    public int hashCode() {
      return toString().hashCode();
    }

    public java.lang.String toString() {

      return localPrivacy.toString();


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {


          // We can safely assume an element has only one type associated with
          // it

          java.lang.String namespace = parentQName.getNamespaceURI();
          java.lang.String localName = parentQName.getLocalPart();

          if (!namespace.equals("")) {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
              prefix = org.apache.axis2.databinding.utils.BeanUtil
                .getUniquePrefix();

              xmlWriter.writeStartElement(prefix, localName, namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);

            } else {
              xmlWriter.writeStartElement(namespace, localName);
            }

          } else {
            xmlWriter.writeStartElement(localName);
          }

          if (localPrivacy == null) {

            throw new RuntimeException("testValue cannot be null !!");

          } else {

            xmlWriter
              .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(localPrivacy));

          }

          xmlWriter.writeEndElement();


        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      // We can safely assume an element has only one type associated with it
      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        MY_QNAME,
        new java.lang.Object[]{
          org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
          org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localPrivacy)}, null);

    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static Privacy parse(javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        Privacy object = null;
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          while (!reader.isEndElement()) {
            if (reader.isStartElement() || reader.hasText()) {

              java.lang.String content = reader.getElementText();

              object = Privacy.fromString(content);

            } else
              reader.next();
          } // end of while loop



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetUserMemberships implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetUserMemberships", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetUserMemberships parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetUserMemberships object = new GetUserMemberships();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetUserMemberships".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetUserMemberships) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class ContactData implements
      org.apache.axis2.databinding.ADBBean {
    /*
     * This type was generated from the piece of schema that had name =
     * ContactData Namespace URI =
     * http://microsoft.com/webservices/SharePointPortalServer/UserProfileService
     * Namespace Prefix = ns1
     */


    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }


    /**
     * field for Name
     */

    protected java.lang.String localName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getName() {
      return localName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Name
     */
    public void setName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localNameTracker = true;
      } else {
        localNameTracker = false;

      }

      this.localName = param;


    }


    /**
     * field for Group
     */

    protected java.lang.String localGroup;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localGroupTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getGroup() {
      return localGroup;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Group
     */
    public void setGroup(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localGroupTracker = true;
      } else {
        localGroupTracker = false;

      }

      this.localGroup = param;


    }


    /**
     * field for Email
     */

    protected java.lang.String localEmail;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localEmailTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getEmail() {
      return localEmail;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Email
     */
    public void setEmail(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localEmailTracker = true;
      } else {
        localEmailTracker = false;

      }

      this.localEmail = param;


    }


    /**
     * field for Title
     */

    protected java.lang.String localTitle;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localTitleTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getTitle() {
      return localTitle;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Title
     */
    public void setTitle(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localTitleTracker = true;
      } else {
        localTitleTracker = false;

      }

      this.localTitle = param;


    }


    /**
     * field for Url
     */

    protected java.lang.String localUrl;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localUrlTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getUrl() {
      return localUrl;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Url
     */
    public void setUrl(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localUrlTracker = true;
      } else {
        localUrlTracker = false;

      }

      this.localUrl = param;


    }


    /**
     * field for IsInWorkGroup
     */

    protected boolean localIsInWorkGroup;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getIsInWorkGroup() {
      return localIsInWorkGroup;
    }



    /**
     * Auto generated setter method
     * 
     * @param param IsInWorkGroup
     */
    public void setIsInWorkGroup(boolean param) {

      this.localIsInWorkGroup = param;


    }


    /**
     * field for UserProfileID
     */

    protected Guid localUserProfileID;


    /**
     * Auto generated getter method
     * 
     * @return Guid
     */
    public Guid getUserProfileID() {
      return localUserProfileID;
    }



    /**
     * Auto generated setter method
     * 
     * @param param UserProfileID
     */
    public void setUserProfileID(Guid param) {

      this.localUserProfileID = param;


    }


    /**
     * field for ID
     */

    protected long localID;


    /**
     * Auto generated getter method
     * 
     * @return long
     */
    public long getID() {
      return localID;
    }



    /**
     * Auto generated setter method
     * 
     * @param param ID
     */
    public void setID(long param) {

      this.localID = param;


    }


    /**
     * field for Privacy
     */

    protected Privacy localPrivacy;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localPrivacyTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return Privacy
     */
    public Privacy getPrivacy() {
      return localPrivacy;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Privacy
     */
    public void setPrivacy(Privacy param) {

      if (param != null) {
        // update the setting tracker
        localPrivacyTracker = true;
      } else {
        localPrivacyTracker = false;

      }

      this.localPrivacy = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "AccountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "AccountName");
              }

            } else {
              xmlWriter.writeStartElement("AccountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("AccountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }
          if (localNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "Name", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "Name");
              }

            } else {
              xmlWriter.writeStartElement("Name");
            }


            if (localName == null) {
              // write the nil attribute

              throw new RuntimeException("Name cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localName));

            }

            xmlWriter.writeEndElement();
          }
          if (localGroupTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "Group", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "Group");
              }

            } else {
              xmlWriter.writeStartElement("Group");
            }


            if (localGroup == null) {
              // write the nil attribute

              throw new RuntimeException("Group cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localGroup));

            }

            xmlWriter.writeEndElement();
          }
          if (localEmailTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "Email", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "Email");
              }

            } else {
              xmlWriter.writeStartElement("Email");
            }


            if (localEmail == null) {
              // write the nil attribute

              throw new RuntimeException("Email cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localEmail));

            }

            xmlWriter.writeEndElement();
          }
          if (localTitleTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "Title", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "Title");
              }

            } else {
              xmlWriter.writeStartElement("Title");
            }


            if (localTitle == null) {
              // write the nil attribute

              throw new RuntimeException("Title cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localTitle));

            }

            xmlWriter.writeEndElement();
          }
          if (localUrlTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "Url", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "Url");
              }

            } else {
              xmlWriter.writeStartElement("Url");
            }


            if (localUrl == null) {
              // write the nil attribute

              throw new RuntimeException("Url cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localUrl));

            }

            xmlWriter.writeEndElement();
          }
          namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
          if (!namespace.equals("")) {
            prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
              prefix = org.apache.axis2.databinding.utils.BeanUtil
                .getUniquePrefix();

              xmlWriter.writeStartElement(prefix, "IsInWorkGroup", namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);

            } else {
              xmlWriter.writeStartElement(namespace, "IsInWorkGroup");
            }

          } else {
            xmlWriter.writeStartElement("IsInWorkGroup");
          }

          xmlWriter
            .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(localIsInWorkGroup));

          xmlWriter.writeEndElement();

          if (localUserProfileID == null) {
            throw new RuntimeException("UserProfileID cannot be null!!");
          }
          localUserProfileID
            .getOMElement(
              new javax.xml.namespace.QName(
                "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                "UserProfileID"), factory).serialize(xmlWriter);

          namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
          if (!namespace.equals("")) {
            prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
              prefix = org.apache.axis2.databinding.utils.BeanUtil
                .getUniquePrefix();

              xmlWriter.writeStartElement(prefix, "ID", namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);

            } else {
              xmlWriter.writeStartElement(namespace, "ID");
            }

          } else {
            xmlWriter.writeStartElement("ID");
          }

          xmlWriter
            .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(localID));

          xmlWriter.writeEndElement();
          if (localPrivacyTracker) {
            if (localPrivacy == null) {
              throw new RuntimeException("Privacy cannot be null!!");
            }
            localPrivacy
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "Privacy"), factory).serialize(xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
        parentQName, factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "AccountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("AccountName cannot be null!!");
        }
      }
      if (localNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "Name"));

        if (localName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localName));
        } else {
          throw new RuntimeException("Name cannot be null!!");
        }
      }
      if (localGroupTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "Group"));

        if (localGroup != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localGroup));
        } else {
          throw new RuntimeException("Group cannot be null!!");
        }
      }
      if (localEmailTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "Email"));

        if (localEmail != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localEmail));
        } else {
          throw new RuntimeException("Email cannot be null!!");
        }
      }
      if (localTitleTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "Title"));

        if (localTitle != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localTitle));
        } else {
          throw new RuntimeException("Title cannot be null!!");
        }
      }
      if (localUrlTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "Url"));

        if (localUrl != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localUrl));
        } else {
          throw new RuntimeException("Url cannot be null!!");
        }
      }
      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "IsInWorkGroup"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString(localIsInWorkGroup));

      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "UserProfileID"));


      if (localUserProfileID == null) {
        throw new RuntimeException("UserProfileID cannot be null!!");
      }
      elementList.add(localUserProfileID);

      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "ID"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString(localID));
      if (localPrivacyTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "Privacy"));


        if (localPrivacy == null) {
          throw new RuntimeException("Privacy cannot be null!!");
        }
        elementList.add(localPrivacy);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static ContactData parse(javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        ContactData object = new ContactData();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"ContactData".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (ContactData) ExtensionMapper.getTypeObject(nsUri, type,
                  reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "AccountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Name").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setName(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Group").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setGroup(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Email").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setEmail(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Title").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setTitle(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Url").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setUrl(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "IsInWorkGroup").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setIsInWorkGroup(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "UserProfileID").equals(reader.getName())) {

            object.setUserProfileID(Guid.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "ID").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setID(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToLong(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Privacy").equals(reader.getName())) {

            object.setPrivacy(Privacy.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class RemoveColleague implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "RemoveColleague", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }


    /**
     * field for ColleagueAccountName
     */

    protected java.lang.String localColleagueAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localColleagueAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getColleagueAccountName() {
      return localColleagueAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param ColleagueAccountName
     */
    public void setColleagueAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localColleagueAccountNameTracker = true;
      } else {
        localColleagueAccountNameTracker = false;

      }

      this.localColleagueAccountName = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }
          if (localColleagueAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "colleagueAccountName",
                  namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "colleagueAccountName");
              }

            } else {
              xmlWriter.writeStartElement("colleagueAccountName");
            }


            if (localColleagueAccountName == null) {
              // write the nil attribute

              throw new RuntimeException(
                "colleagueAccountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localColleagueAccountName));

            }

            xmlWriter.writeEndElement();
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }
      if (localColleagueAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "colleagueAccountName"));

        if (localColleagueAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localColleagueAccountName));
        } else {
          throw new RuntimeException("colleagueAccountName cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static RemoveColleague parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        RemoveColleague object = new RemoveColleague();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"RemoveColleague".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (RemoveColleague) ExtensionMapper.getTypeObject(nsUri,
                  type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "colleagueAccountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setColleagueAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class AddMembership implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "AddMembership", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }


    /**
     * field for MembershipInfo
     */

    protected MembershipData localMembershipInfo;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localMembershipInfoTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return MembershipData
     */
    public MembershipData getMembershipInfo() {
      return localMembershipInfo;
    }



    /**
     * Auto generated setter method
     * 
     * @param param MembershipInfo
     */
    public void setMembershipInfo(MembershipData param) {

      if (param != null) {
        // update the setting tracker
        localMembershipInfoTracker = true;
      } else {
        localMembershipInfoTracker = false;

      }

      this.localMembershipInfo = param;


    }


    /**
     * field for Group
     */

    protected java.lang.String localGroup;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localGroupTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getGroup() {
      return localGroup;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Group
     */
    public void setGroup(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localGroupTracker = true;
      } else {
        localGroupTracker = false;

      }

      this.localGroup = param;


    }


    /**
     * field for Privacy
     */

    protected Privacy localPrivacy;


    /**
     * Auto generated getter method
     * 
     * @return Privacy
     */
    public Privacy getPrivacy() {
      return localPrivacy;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Privacy
     */
    public void setPrivacy(Privacy param) {

      this.localPrivacy = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }
          if (localMembershipInfoTracker) {
            if (localMembershipInfo == null) {
              throw new RuntimeException("membershipInfo cannot be null!!");
            }
            localMembershipInfo
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "membershipInfo"), factory).serialize(xmlWriter);
          }
          if (localGroupTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "group", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "group");
              }

            } else {
              xmlWriter.writeStartElement("group");
            }


            if (localGroup == null) {
              // write the nil attribute

              throw new RuntimeException("group cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localGroup));

            }

            xmlWriter.writeEndElement();
          }
          if (localPrivacy == null) {
            throw new RuntimeException("privacy cannot be null!!");
          }
          localPrivacy
            .getOMElement(
              new javax.xml.namespace.QName(
                "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                "privacy"), factory).serialize(xmlWriter);


          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }
      if (localMembershipInfoTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "membershipInfo"));


        if (localMembershipInfo == null) {
          throw new RuntimeException("membershipInfo cannot be null!!");
        }
        elementList.add(localMembershipInfo);
      }
      if (localGroupTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "group"));

        if (localGroup != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localGroup));
        } else {
          throw new RuntimeException("group cannot be null!!");
        }
      }
      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "privacy"));


      if (localPrivacy == null) {
        throw new RuntimeException("privacy cannot be null!!");
      }
      elementList.add(localPrivacy);


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static AddMembership parse(javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        AddMembership object = new AddMembership();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"AddMembership".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (AddMembership) ExtensionMapper.getTypeObject(nsUri,
                  type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "membershipInfo").equals(reader.getName())) {

            object.setMembershipInfo(MembershipData.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "group").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setGroup(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "privacy").equals(reader.getName())) {

            object.setPrivacy(Privacy.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class AddLinkResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "AddLinkResponse", "ns1");



    /**
     * field for AddLinkResult
     */

    protected QuickLinkData localAddLinkResult;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAddLinkResultTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return QuickLinkData
     */
    public QuickLinkData getAddLinkResult() {
      return localAddLinkResult;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AddLinkResult
     */
    public void setAddLinkResult(QuickLinkData param) {

      if (param != null) {
        // update the setting tracker
        localAddLinkResultTracker = true;
      } else {
        localAddLinkResultTracker = false;

      }

      this.localAddLinkResult = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAddLinkResultTracker) {
            if (localAddLinkResult == null) {
              throw new RuntimeException("AddLinkResult cannot be null!!");
            }
            localAddLinkResult
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "AddLinkResult"), factory).serialize(xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAddLinkResultTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "AddLinkResult"));


        if (localAddLinkResult == null) {
          throw new RuntimeException("AddLinkResult cannot be null!!");
        }
        elementList.add(localAddLinkResult);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static AddLinkResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        AddLinkResponse object = new AddLinkResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"AddLinkResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (AddLinkResponse) ExtensionMapper.getTypeObject(nsUri,
                  type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "AddLinkResult").equals(reader.getName())) {

            object.setAddLinkResult(QuickLinkData.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class CreateMemberGroupResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "CreateMemberGroupResponse", "ns1");



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }



          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();



      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static CreateMemberGroupResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        CreateMemberGroupResponse object = new CreateMemberGroupResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"CreateMemberGroupResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (CreateMemberGroupResponse) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class RemoveAllMemberships implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "RemoveAllMemberships", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static RemoveAllMemberships parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        RemoveAllMemberships object = new RemoveAllMemberships();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"RemoveAllMemberships".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (RemoveAllMemberships) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class ArrayOfString implements
      org.apache.axis2.databinding.ADBBean {
    /*
     * This type was generated from the piece of schema that had name =
     * ArrayOfString Namespace URI =
     * http://microsoft.com/webservices/SharePointPortalServer/UserProfileService
     * Namespace Prefix = ns1
     */


    /**
     * field for String This was an Array!
     */

    protected java.lang.String[] localString;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localStringTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String[]
     */
    public java.lang.String[] getString() {
      return localString;
    }



    /**
     * validate the array for String
     */
    protected void validateString(java.lang.String[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param String
     */
    public void setString(java.lang.String[] param) {

      validateString(param);


      if (param != null) {
        // update the setting tracker
        localStringTracker = true;
      } else {
        localStringTracker = true;

      }

      this.localString = param;
    }



    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param java.lang.String
     */
    public void addString(java.lang.String param) {
      if (localString == null) {
        localString = new java.lang.String[]{};
      }


      // update the setting tracker
      localStringTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
        .toList(localString);
      list.add(param);
      this.localString = (java.lang.String[]) list
        .toArray(new java.lang.String[list.size()]);

    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localStringTracker) {
            if (localString != null) {
              for (int i = 0; i < localString.length; i++) {

                if (localString[i] != null) {
                  namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
                  if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);

                    if (prefix == null) {
                      prefix = org.apache.axis2.databinding.utils.BeanUtil
                        .getUniquePrefix();

                      xmlWriter.writeStartElement(prefix, "string", namespace);
                      xmlWriter.writeNamespace(prefix, namespace);
                      xmlWriter.setPrefix(prefix, namespace);

                    } else {
                      xmlWriter.writeStartElement(namespace, "string");
                    }

                  } else {
                    xmlWriter.writeStartElement("string");
                  }
                  xmlWriter
                    .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                      .convertToString(localString[i]));
                  xmlWriter.writeEndElement();

                } else {

                  // write null attribute
                  namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
                  if (!namespace.equals("")) {
                    prefix = xmlWriter.getPrefix(namespace);

                    if (prefix == null) {
                      prefix = org.apache.axis2.databinding.utils.BeanUtil
                        .getUniquePrefix();

                      xmlWriter.writeStartElement(prefix, "string", namespace);
                      xmlWriter.writeNamespace(prefix, namespace);
                      xmlWriter.setPrefix(prefix, namespace);

                    } else {
                      xmlWriter.writeStartElement(namespace, "string");
                    }

                  } else {
                    xmlWriter.writeStartElement("string");
                  }
                  writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "nil", "true",
                    xmlWriter);
                  xmlWriter.writeEndElement();

                }

              }
            } else {

              // write the null attribute
              // write null attribute
              java.lang.String namespace2 = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
              if (!namespace2.equals("")) {
                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                if (prefix2 == null) {
                  prefix2 = org.apache.axis2.databinding.utils.BeanUtil
                    .getUniquePrefix();

                  xmlWriter.writeStartElement(prefix2, "string", namespace2);
                  xmlWriter.writeNamespace(prefix2, namespace2);
                  xmlWriter.setPrefix(prefix2, namespace2);

                } else {
                  xmlWriter.writeStartElement(namespace2, "string");
                }

              } else {
                xmlWriter.writeStartElement("string");
              }

              // write the nil attribute
              writeAttribute("xsi",
                "http://www.w3.org/2001/XMLSchema-instance", "nil", "true",
                xmlWriter);
              xmlWriter.writeEndElement();

            }

          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
        parentQName, factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localStringTracker) {
        if (localString != null) {
          for (int i = 0; i < localString.length; i++) {

            if (localString[i] != null) {
              elementList
                .add(new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "string"));
              elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(localString[i]));
            } else {

              elementList
                .add(new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "string"));
              elementList.add(null);

            }


          }
        } else {

          elementList
            .add(new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "string"));
          elementList.add(null);

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static ArrayOfString parse(javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        ArrayOfString object = new ArrayOfString();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"ArrayOfString".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (ArrayOfString) ExtensionMapper.getTypeObject(nsUri,
                  type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "string").equals(reader.getName())) {



            // Process the array and step past its final element's end.

            if ("true".equals(reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "nil"))) {
              list1.add(null);
              reader.next();
            } else {
              list1.add(reader.getElementText());
            }
            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // Ensure we are at the EndElement
              while (!reader.isEndElement()) {
                reader.next();
              }
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml
                // structure
                loopDone1 = true;
              } else {
                if (new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "string").equals(reader.getName())) {

                  if ("true".equals(reader.getAttributeValue(
                    "http://www.w3.org/2001/XMLSchema-instance", "nil"))) {
                    list1.add(null);
                    reader.next();
                  } else {
                    list1.add(reader.getElementText());
                  }
                } else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array
            object
              .setString((java.lang.String[]) org.apache.axis2.databinding.utils.ConverterUtil
                .convertToArray(java.lang.String.class, list1));

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetUserProfileByIndex implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetUserProfileByIndex", "ns1");



    /**
     * field for Index
     */

    protected int localIndex;


    /**
     * Auto generated getter method
     * 
     * @return int
     */
    public int getIndex() {
      return localIndex;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Index
     */
    public void setIndex(int param) {

      this.localIndex = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }



          namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
          if (!namespace.equals("")) {
            prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
              prefix = org.apache.axis2.databinding.utils.BeanUtil
                .getUniquePrefix();

              xmlWriter.writeStartElement(prefix, "index", namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);

            } else {
              xmlWriter.writeStartElement(namespace, "index");
            }

          } else {
            xmlWriter.writeStartElement("index");
          }

          xmlWriter
            .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(localIndex));

          xmlWriter.writeEndElement();


          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "index"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString(localIndex));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetUserProfileByIndex parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetUserProfileByIndex object = new GetUserProfileByIndex();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetUserProfileByIndex".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetUserProfileByIndex) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "index").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setIndex(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToInt(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class PropertyData implements
      org.apache.axis2.databinding.ADBBean {
    /*
     * This type was generated from the piece of schema that had name =
     * PropertyData Namespace URI =
     * http://microsoft.com/webservices/SharePointPortalServer/UserProfileService
     * Namespace Prefix = ns1
     */


    /**
     * field for Name
     */

    protected java.lang.String localName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getName() {
      return localName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Name
     */
    public void setName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localNameTracker = true;
      } else {
        localNameTracker = false;

      }

      this.localName = param;


    }


    /**
     * field for Privacy
     */

    protected Privacy localPrivacy;


    /**
     * Auto generated getter method
     * 
     * @return Privacy
     */
    public Privacy getPrivacy() {
      return localPrivacy;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Privacy
     */
    public void setPrivacy(Privacy param) {

      this.localPrivacy = param;


    }


    /**
     * field for Values
     */

    protected ArrayOfValueData localValues;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localValuesTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ArrayOfValueData
     */
    public ArrayOfValueData getValues() {
      return localValues;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Values
     */
    public void setValues(ArrayOfValueData param) {

      if (param != null) {
        // update the setting tracker
        localValuesTracker = true;
      } else {
        localValuesTracker = false;

      }

      this.localValues = param;


    }


    /**
     * field for IsPrivacyChanged
     */

    protected boolean localIsPrivacyChanged;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getIsPrivacyChanged() {
      return localIsPrivacyChanged;
    }



    /**
     * Auto generated setter method
     * 
     * @param param IsPrivacyChanged
     */
    public void setIsPrivacyChanged(boolean param) {

      this.localIsPrivacyChanged = param;


    }


    /**
     * field for IsValueChanged
     */

    protected boolean localIsValueChanged;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getIsValueChanged() {
      return localIsValueChanged;
    }



    /**
     * Auto generated setter method
     * 
     * @param param IsValueChanged
     */
    public void setIsValueChanged(boolean param) {

      this.localIsValueChanged = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "Name", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "Name");
              }

            } else {
              xmlWriter.writeStartElement("Name");
            }


            if (localName == null) {
              // write the nil attribute

              throw new RuntimeException("Name cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localName));

            }

            xmlWriter.writeEndElement();
          }
          if (localPrivacy == null) {
            throw new RuntimeException("Privacy cannot be null!!");
          }
          localPrivacy
            .getOMElement(
              new javax.xml.namespace.QName(
                "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                "Privacy"), factory).serialize(xmlWriter);
          if (localValuesTracker) {
            if (localValues == null) {
              throw new RuntimeException("Values cannot be null!!");
            }
            localValues
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "Values"), factory).serialize(xmlWriter);
          }
          namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
          if (!namespace.equals("")) {
            prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
              prefix = org.apache.axis2.databinding.utils.BeanUtil
                .getUniquePrefix();

              xmlWriter
                .writeStartElement(prefix, "IsPrivacyChanged", namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);

            } else {
              xmlWriter.writeStartElement(namespace, "IsPrivacyChanged");
            }

          } else {
            xmlWriter.writeStartElement("IsPrivacyChanged");
          }

          xmlWriter
            .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(localIsPrivacyChanged));

          xmlWriter.writeEndElement();

          namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
          if (!namespace.equals("")) {
            prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
              prefix = org.apache.axis2.databinding.utils.BeanUtil
                .getUniquePrefix();

              xmlWriter.writeStartElement(prefix, "IsValueChanged", namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);

            } else {
              xmlWriter.writeStartElement(namespace, "IsValueChanged");
            }

          } else {
            xmlWriter.writeStartElement("IsValueChanged");
          }

          xmlWriter
            .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(localIsValueChanged));

          xmlWriter.writeEndElement();


          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
        parentQName, factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "Name"));

        if (localName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localName));
        } else {
          throw new RuntimeException("Name cannot be null!!");
        }
      }
      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "Privacy"));


      if (localPrivacy == null) {
        throw new RuntimeException("Privacy cannot be null!!");
      }
      elementList.add(localPrivacy);
      if (localValuesTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "Values"));


        if (localValues == null) {
          throw new RuntimeException("Values cannot be null!!");
        }
        elementList.add(localValues);
      }
      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "IsPrivacyChanged"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString(localIsPrivacyChanged));

      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "IsValueChanged"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString(localIsValueChanged));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
public static PropertyData parse(javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        PropertyData object = new PropertyData();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"PropertyData".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (PropertyData) ExtensionMapper.getTypeObject(nsUri,
                  type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();
          int cnt =0;
          while (true)
          {
            if (cnt++ == 5)
              break;
            
          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Name").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setName(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(content));

            reader.next();
            continue;

          } // End of if for expected property start element


          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Privacy").equals(reader.getName())) {

            object.setPrivacy(Privacy.Factory.parse(reader));

            reader.next();
            continue;
          } // End of if for expected property start element


          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Values").equals(reader.getName())) {

            object.setValues(ArrayOfValueData.Factory.parse(reader));

            reader.next();
            continue;

          } // End of if for expected property start element


          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "IsPrivacyChanged").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setIsPrivacyChanged(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToBoolean(content));

            reader.next();
            continue;

          } // End of if for expected property start element



          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "IsValueChanged").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setIsValueChanged(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToBoolean(content));

            reader.next();
              continue;
          } // End of if for expected property start element
          }//end of while
          
        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }
        
        return object;
      }
    }// end of factory class



  }


  public static class MembershipSource implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "MembershipSource", "ns1");



    /**
     * field for MembershipSource
     */

    protected java.lang.String localMembershipSource;

    private static java.util.HashMap _table_ = new java.util.HashMap();

    // Constructor
    protected MembershipSource(java.lang.String value) {
      localMembershipSource = value;

      _table_.put(localMembershipSource, this);


    }


    public static final java.lang.String _DistributionList = org.apache.axis2.databinding.utils.ConverterUtil
      .convertToString("DistributionList");

    public static final java.lang.String _SharePointSite = org.apache.axis2.databinding.utils.ConverterUtil
      .convertToString("SharePointSite");

    public static final java.lang.String _Other = org.apache.axis2.databinding.utils.ConverterUtil
      .convertToString("Other");

    public static final MembershipSource DistributionList = new MembershipSource(
      _DistributionList);

    public static final MembershipSource SharePointSite = new MembershipSource(
      _SharePointSite);

    public static final MembershipSource Other = new MembershipSource(_Other);


    public java.lang.String getValue() {
      return localMembershipSource;
    }

    public static MembershipSource fromValue(java.lang.String value)
        throws java.lang.IllegalArgumentException {
      MembershipSource enumeration = (MembershipSource)

      _table_.get(value);


      if (enumeration == null)
        throw new java.lang.IllegalArgumentException();
      return enumeration;
    }

    public static MembershipSource fromString(java.lang.String value)
        throws java.lang.IllegalArgumentException {
      try {

        return fromValue(new java.lang.String(value));


      } catch (java.lang.Exception e) {
        throw new java.lang.IllegalArgumentException();
      }
    }

    public boolean equals(java.lang.Object obj) {
      return (obj == this);
    }

    public int hashCode() {
      return toString().hashCode();
    }

    public java.lang.String toString() {

      return localMembershipSource.toString();


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {


          // We can safely assume an element has only one type associated with
          // it

          java.lang.String namespace = parentQName.getNamespaceURI();
          java.lang.String localName = parentQName.getLocalPart();

          if (!namespace.equals("")) {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
              prefix = org.apache.axis2.databinding.utils.BeanUtil
                .getUniquePrefix();

              xmlWriter.writeStartElement(prefix, localName, namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);

            } else {
              xmlWriter.writeStartElement(namespace, localName);
            }

          } else {
            xmlWriter.writeStartElement(localName);
          }

          if (localMembershipSource == null) {

            throw new RuntimeException("testValue cannot be null !!");

          } else {

            xmlWriter
              .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(localMembershipSource));

          }

          xmlWriter.writeEndElement();


        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      // We can safely assume an element has only one type associated with it
      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        MY_QNAME,
        new java.lang.Object[]{
          org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
          org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localMembershipSource)}, null);

    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static MembershipSource parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        MembershipSource object = null;
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          while (!reader.isEndElement()) {
            if (reader.isStartElement() || reader.hasText()) {

              java.lang.String content = reader.getElementText();

              object = MembershipSource.fromString(content);

            } else
              reader.next();
          } // end of while loop



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetCommonMemberships implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetCommonMemberships", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetCommonMemberships parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetCommonMemberships object = new GetCommonMemberships();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetCommonMemberships".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetCommonMemberships) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetCommonManagerResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetCommonManagerResponse", "ns1");



    /**
     * field for GetCommonManagerResult
     */

    protected ContactData localGetCommonManagerResult;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localGetCommonManagerResultTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ContactData
     */
    public ContactData getGetCommonManagerResult() {
      return localGetCommonManagerResult;
    }



    /**
     * Auto generated setter method
     * 
     * @param param GetCommonManagerResult
     */
    public void setGetCommonManagerResult(ContactData param) {

      if (param != null) {
        // update the setting tracker
        localGetCommonManagerResultTracker = true;
      } else {
        localGetCommonManagerResultTracker = false;

      }

      this.localGetCommonManagerResult = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localGetCommonManagerResultTracker) {
            if (localGetCommonManagerResult == null) {
              throw new RuntimeException(
                "GetCommonManagerResult cannot be null!!");
            }
            localGetCommonManagerResult
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "GetCommonManagerResult"), factory).serialize(xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localGetCommonManagerResultTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "GetCommonManagerResult"));


        if (localGetCommonManagerResult == null) {
          throw new RuntimeException("GetCommonManagerResult cannot be null!!");
        }
        elementList.add(localGetCommonManagerResult);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetCommonManagerResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetCommonManagerResponse object = new GetCommonManagerResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetCommonManagerResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetCommonManagerResponse) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "GetCommonManagerResult").equals(reader.getName())) {

            object.setGetCommonManagerResult(ContactData.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class RemovePinnedLink implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "RemovePinnedLink", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }


    /**
     * field for Id
     */

    protected int localId;


    /**
     * Auto generated getter method
     * 
     * @return int
     */
    public int getId() {
      return localId;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Id
     */
    public void setId(int param) {

      this.localId = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }
          namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
          if (!namespace.equals("")) {
            prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
              prefix = org.apache.axis2.databinding.utils.BeanUtil
                .getUniquePrefix();

              xmlWriter.writeStartElement(prefix, "id", namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);

            } else {
              xmlWriter.writeStartElement(namespace, "id");
            }

          } else {
            xmlWriter.writeStartElement("id");
          }

          xmlWriter
            .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(localId));

          xmlWriter.writeEndElement();


          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }
      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "id"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString(localId));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static RemovePinnedLink parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        RemovePinnedLink object = new RemovePinnedLink();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"RemovePinnedLink".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (RemovePinnedLink) ExtensionMapper.getTypeObject(nsUri,
                  type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "id").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setId(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToInt(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class RemoveMembership implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "RemoveMembership", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }


    /**
     * field for SourceInternal
     */

    protected Guid localSourceInternal;


    /**
     * Auto generated getter method
     * 
     * @return Guid
     */
    public Guid getSourceInternal() {
      return localSourceInternal;
    }



    /**
     * Auto generated setter method
     * 
     * @param param SourceInternal
     */
    public void setSourceInternal(Guid param) {

      this.localSourceInternal = param;


    }


    /**
     * field for SourceReference
     */

    protected java.lang.String localSourceReference;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSourceReference() {
      return localSourceReference;
    }



    /**
     * Auto generated setter method
     * 
     * @param param SourceReference
     */
    public void setSourceReference(java.lang.String param) {

      this.localSourceReference = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }
          if (localSourceInternal == null) {
            throw new RuntimeException("sourceInternal cannot be null!!");
          }
          localSourceInternal
            .getOMElement(
              new javax.xml.namespace.QName(
                "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                "sourceInternal"), factory).serialize(xmlWriter);

          namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
          if (!namespace.equals("")) {
            prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
              prefix = org.apache.axis2.databinding.utils.BeanUtil
                .getUniquePrefix();

              xmlWriter.writeStartElement(prefix, "sourceReference", namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);

            } else {
              xmlWriter.writeStartElement(namespace, "sourceReference");
            }

          } else {
            xmlWriter.writeStartElement("sourceReference");
          }


          if (localSourceReference == null) {
            // write the nil attribute

            throw new RuntimeException("sourceReference cannot be null!!");

          } else {


            xmlWriter
              .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(localSourceReference));

          }

          xmlWriter.writeEndElement();


          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }
      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "sourceInternal"));


      if (localSourceInternal == null) {
        throw new RuntimeException("sourceInternal cannot be null!!");
      }
      elementList.add(localSourceInternal);

      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "sourceReference"));

      if (localSourceReference != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
          .convertToString(localSourceReference));
      } else {
        throw new RuntimeException("sourceReference cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static RemoveMembership parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        RemoveMembership object = new RemoveMembership();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"RemoveMembership".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (RemoveMembership) ExtensionMapper.getTypeObject(nsUri,
                  type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "sourceInternal").equals(reader.getName())) {

            object.setSourceInternal(Guid.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "sourceReference").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setSourceReference(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class CreateUserProfileByAccountName implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "CreateUserProfileByAccountName", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static CreateUserProfileByAccountName parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        CreateUserProfileByAccountName object = new CreateUserProfileByAccountName();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"CreateUserProfileByAccountName".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (CreateUserProfileByAccountName) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetUserProfileSchemaResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetUserProfileSchemaResponse", "ns1");



    /**
     * field for GetUserProfileSchemaResult
     */

    protected ArrayOfPropertyInfo localGetUserProfileSchemaResult;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localGetUserProfileSchemaResultTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ArrayOfPropertyInfo
     */
    public ArrayOfPropertyInfo getGetUserProfileSchemaResult() {
      return localGetUserProfileSchemaResult;
    }



    /**
     * Auto generated setter method
     * 
     * @param param GetUserProfileSchemaResult
     */
    public void setGetUserProfileSchemaResult(ArrayOfPropertyInfo param) {

      if (param != null) {
        // update the setting tracker
        localGetUserProfileSchemaResultTracker = true;
      } else {
        localGetUserProfileSchemaResultTracker = false;

      }

      this.localGetUserProfileSchemaResult = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localGetUserProfileSchemaResultTracker) {
            if (localGetUserProfileSchemaResult == null) {
              throw new RuntimeException(
                "GetUserProfileSchemaResult cannot be null!!");
            }
            localGetUserProfileSchemaResult
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "GetUserProfileSchemaResult"), factory).serialize(xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localGetUserProfileSchemaResultTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "GetUserProfileSchemaResult"));


        if (localGetUserProfileSchemaResult == null) {
          throw new RuntimeException(
            "GetUserProfileSchemaResult cannot be null!!");
        }
        elementList.add(localGetUserProfileSchemaResult);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetUserProfileSchemaResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetUserProfileSchemaResponse object = new GetUserProfileSchemaResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetUserProfileSchemaResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetUserProfileSchemaResponse) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "GetUserProfileSchemaResult").equals(reader.getName())) {

            object.setGetUserProfileSchemaResult(ArrayOfPropertyInfo.Factory
              .parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class MembershipData implements
      org.apache.axis2.databinding.ADBBean {
    /*
     * This type was generated from the piece of schema that had name =
     * MembershipData Namespace URI =
     * http://microsoft.com/webservices/SharePointPortalServer/UserProfileService
     * Namespace Prefix = ns1
     */


    /**
     * field for GroupType
     */

    protected MembershipGroupType localGroupType;


    /**
     * Auto generated getter method
     * 
     * @return MembershipGroupType
     */
    public MembershipGroupType getGroupType() {
      return localGroupType;
    }



    /**
     * Auto generated setter method
     * 
     * @param param GroupType
     */
    public void setGroupType(MembershipGroupType param) {

      this.localGroupType = param;


    }


    /**
     * field for Source
     */

    protected MembershipSource localSource;


    /**
     * Auto generated getter method
     * 
     * @return MembershipSource
     */
    public MembershipSource getSource() {
      return localSource;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Source
     */
    public void setSource(MembershipSource param) {

      this.localSource = param;


    }


    /**
     * field for Privacy
     */

    protected Privacy localPrivacy;


    /**
     * Auto generated getter method
     * 
     * @return Privacy
     */
    public Privacy getPrivacy() {
      return localPrivacy;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Privacy
     */
    public void setPrivacy(Privacy param) {

      this.localPrivacy = param;


    }


    /**
     * field for MemberGroup
     */

    protected MemberGroupData localMemberGroup;


    /**
     * Auto generated getter method
     * 
     * @return MemberGroupData
     */
    public MemberGroupData getMemberGroup() {
      return localMemberGroup;
    }



    /**
     * Auto generated setter method
     * 
     * @param param MemberGroup
     */
    public void setMemberGroup(MemberGroupData param) {

      this.localMemberGroup = param;


    }


    /**
     * field for DisplayName
     */

    protected java.lang.String localDisplayName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localDisplayNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getDisplayName() {
      return localDisplayName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param DisplayName
     */
    public void setDisplayName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localDisplayNameTracker = true;
      } else {
        localDisplayNameTracker = false;

      }

      this.localDisplayName = param;


    }


    /**
     * field for MailNickname
     */

    protected java.lang.String localMailNickname;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localMailNicknameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getMailNickname() {
      return localMailNickname;
    }



    /**
     * Auto generated setter method
     * 
     * @param param MailNickname
     */
    public void setMailNickname(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localMailNicknameTracker = true;
      } else {
        localMailNicknameTracker = false;

      }

      this.localMailNickname = param;


    }


    /**
     * field for Url
     */

    protected java.lang.String localUrl;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localUrlTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getUrl() {
      return localUrl;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Url
     */
    public void setUrl(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localUrlTracker = true;
      } else {
        localUrlTracker = false;

      }

      this.localUrl = param;


    }


    /**
     * field for ID
     */

    protected long localID;


    /**
     * Auto generated getter method
     * 
     * @return long
     */
    public long getID() {
      return localID;
    }



    /**
     * Auto generated setter method
     * 
     * @param param ID
     */
    public void setID(long param) {

      this.localID = param;


    }


    /**
     * field for MemberGroupID
     */

    protected long localMemberGroupID;


    /**
     * Auto generated getter method
     * 
     * @return long
     */
    public long getMemberGroupID() {
      return localMemberGroupID;
    }



    /**
     * Auto generated setter method
     * 
     * @param param MemberGroupID
     */
    public void setMemberGroupID(long param) {

      this.localMemberGroupID = param;


    }


    /**
     * field for Group
     */

    protected java.lang.String localGroup;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localGroupTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getGroup() {
      return localGroup;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Group
     */
    public void setGroup(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localGroupTracker = true;
      } else {
        localGroupTracker = false;

      }

      this.localGroup = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }



          if (localGroupType == null) {
            throw new RuntimeException("GroupType cannot be null!!");
          }
          localGroupType
            .getOMElement(
              new javax.xml.namespace.QName(
                "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                "GroupType"), factory).serialize(xmlWriter);

          if (localSource == null) {
            throw new RuntimeException("Source cannot be null!!");
          }
          localSource
            .getOMElement(
              new javax.xml.namespace.QName(
                "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                "Source"), factory).serialize(xmlWriter);

          if (localPrivacy == null) {
            throw new RuntimeException("Privacy cannot be null!!");
          }
          localPrivacy
            .getOMElement(
              new javax.xml.namespace.QName(
                "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                "Privacy"), factory).serialize(xmlWriter);

          if (localMemberGroup == null) {
            throw new RuntimeException("MemberGroup cannot be null!!");
          }
          localMemberGroup
            .getOMElement(
              new javax.xml.namespace.QName(
                "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                "MemberGroup"), factory).serialize(xmlWriter);
          if (localDisplayNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "DisplayName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "DisplayName");
              }

            } else {
              xmlWriter.writeStartElement("DisplayName");
            }


            if (localDisplayName == null) {
              // write the nil attribute

              throw new RuntimeException("DisplayName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localDisplayName));

            }

            xmlWriter.writeEndElement();
          }
          if (localMailNicknameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "MailNickname", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "MailNickname");
              }

            } else {
              xmlWriter.writeStartElement("MailNickname");
            }


            if (localMailNickname == null) {
              // write the nil attribute

              throw new RuntimeException("MailNickname cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localMailNickname));

            }

            xmlWriter.writeEndElement();
          }
          if (localUrlTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "Url", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "Url");
              }

            } else {
              xmlWriter.writeStartElement("Url");
            }


            if (localUrl == null) {
              // write the nil attribute

              throw new RuntimeException("Url cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localUrl));

            }

            xmlWriter.writeEndElement();
          }
          namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
          if (!namespace.equals("")) {
            prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
              prefix = org.apache.axis2.databinding.utils.BeanUtil
                .getUniquePrefix();

              xmlWriter.writeStartElement(prefix, "ID", namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);

            } else {
              xmlWriter.writeStartElement(namespace, "ID");
            }

          } else {
            xmlWriter.writeStartElement("ID");
          }

          xmlWriter
            .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(localID));

          xmlWriter.writeEndElement();

          namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
          if (!namespace.equals("")) {
            prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
              prefix = org.apache.axis2.databinding.utils.BeanUtil
                .getUniquePrefix();

              xmlWriter.writeStartElement(prefix, "MemberGroupID", namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);

            } else {
              xmlWriter.writeStartElement(namespace, "MemberGroupID");
            }

          } else {
            xmlWriter.writeStartElement("MemberGroupID");
          }

          xmlWriter
            .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(localMemberGroupID));

          xmlWriter.writeEndElement();
          if (localGroupTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "Group", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "Group");
              }

            } else {
              xmlWriter.writeStartElement("Group");
            }


            if (localGroup == null) {
              // write the nil attribute

              throw new RuntimeException("Group cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localGroup));

            }

            xmlWriter.writeEndElement();
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
        parentQName, factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "GroupType"));


      if (localGroupType == null) {
        throw new RuntimeException("GroupType cannot be null!!");
      }
      elementList.add(localGroupType);

      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "Source"));


      if (localSource == null) {
        throw new RuntimeException("Source cannot be null!!");
      }
      elementList.add(localSource);

      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "Privacy"));


      if (localPrivacy == null) {
        throw new RuntimeException("Privacy cannot be null!!");
      }
      elementList.add(localPrivacy);

      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "MemberGroup"));


      if (localMemberGroup == null) {
        throw new RuntimeException("MemberGroup cannot be null!!");
      }
      elementList.add(localMemberGroup);
      if (localDisplayNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "DisplayName"));

        if (localDisplayName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localDisplayName));
        } else {
          throw new RuntimeException("DisplayName cannot be null!!");
        }
      }
      if (localMailNicknameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "MailNickname"));

        if (localMailNickname != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localMailNickname));
        } else {
          throw new RuntimeException("MailNickname cannot be null!!");
        }
      }
      if (localUrlTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "Url"));

        if (localUrl != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localUrl));
        } else {
          throw new RuntimeException("Url cannot be null!!");
        }
      }
      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "ID"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString(localID));

      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "MemberGroupID"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString(localMemberGroupID));
      if (localGroupTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "Group"));

        if (localGroup != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localGroup));
        } else {
          throw new RuntimeException("Group cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static MembershipData parse(javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        MembershipData object = new MembershipData();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"MembershipData".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (MembershipData) ExtensionMapper.getTypeObject(nsUri,
                  type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "GroupType").equals(reader.getName())) {

            object.setGroupType(MembershipGroupType.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Source").equals(reader.getName())) {

            object.setSource(MembershipSource.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Privacy").equals(reader.getName())) {

            object.setPrivacy(Privacy.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "MemberGroup").equals(reader.getName())) {

            object.setMemberGroup(MemberGroupData.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "DisplayName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setDisplayName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "MailNickname").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setMailNickname(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Url").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setUrl(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "ID").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setID(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToLong(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "MemberGroupID").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setMemberGroupID(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToLong(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Group").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setGroup(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(content));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class PinnedLinkData implements
      org.apache.axis2.databinding.ADBBean {
    /*
     * This type was generated from the piece of schema that had name =
     * PinnedLinkData Namespace URI =
     * http://microsoft.com/webservices/SharePointPortalServer/UserProfileService
     * Namespace Prefix = ns1
     */


    /**
     * field for Name
     */

    protected java.lang.String localName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getName() {
      return localName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Name
     */
    public void setName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localNameTracker = true;
      } else {
        localNameTracker = false;

      }

      this.localName = param;


    }


    /**
     * field for Url
     */

    protected java.lang.String localUrl;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localUrlTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getUrl() {
      return localUrl;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Url
     */
    public void setUrl(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localUrlTracker = true;
      } else {
        localUrlTracker = false;

      }

      this.localUrl = param;


    }


    /**
     * field for ID
     */

    protected long localID;


    /**
     * Auto generated getter method
     * 
     * @return long
     */
    public long getID() {
      return localID;
    }



    /**
     * Auto generated setter method
     * 
     * @param param ID
     */
    public void setID(long param) {

      this.localID = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "Name", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "Name");
              }

            } else {
              xmlWriter.writeStartElement("Name");
            }


            if (localName == null) {
              // write the nil attribute

              throw new RuntimeException("Name cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localName));

            }

            xmlWriter.writeEndElement();
          }
          if (localUrlTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "Url", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "Url");
              }

            } else {
              xmlWriter.writeStartElement("Url");
            }


            if (localUrl == null) {
              // write the nil attribute

              throw new RuntimeException("Url cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localUrl));

            }

            xmlWriter.writeEndElement();
          }
          namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
          if (!namespace.equals("")) {
            prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
              prefix = org.apache.axis2.databinding.utils.BeanUtil
                .getUniquePrefix();

              xmlWriter.writeStartElement(prefix, "ID", namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);

            } else {
              xmlWriter.writeStartElement(namespace, "ID");
            }

          } else {
            xmlWriter.writeStartElement("ID");
          }

          xmlWriter
            .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(localID));

          xmlWriter.writeEndElement();


          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
        parentQName, factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "Name"));

        if (localName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localName));
        } else {
          throw new RuntimeException("Name cannot be null!!");
        }
      }
      if (localUrlTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "Url"));

        if (localUrl != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localUrl));
        } else {
          throw new RuntimeException("Url cannot be null!!");
        }
      }
      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "ID"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString(localID));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static PinnedLinkData parse(javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        PinnedLinkData object = new PinnedLinkData();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"PinnedLinkData".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (PinnedLinkData) ExtensionMapper.getTypeObject(nsUri,
                  type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Name").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setName(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Url").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setUrl(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "ID").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setID(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToLong(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetUserColleaguesResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetUserColleaguesResponse", "ns1");



    /**
     * field for GetUserColleaguesResult
     */

    protected ArrayOfContactData localGetUserColleaguesResult;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localGetUserColleaguesResultTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ArrayOfContactData
     */
    public ArrayOfContactData getGetUserColleaguesResult() {
      return localGetUserColleaguesResult;
    }



    /**
     * Auto generated setter method
     * 
     * @param param GetUserColleaguesResult
     */
    public void setGetUserColleaguesResult(ArrayOfContactData param) {

      if (param != null) {
        // update the setting tracker
        localGetUserColleaguesResultTracker = true;
      } else {
        localGetUserColleaguesResultTracker = false;

      }

      this.localGetUserColleaguesResult = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localGetUserColleaguesResultTracker) {
            if (localGetUserColleaguesResult == null) {
              throw new RuntimeException(
                "GetUserColleaguesResult cannot be null!!");
            }
            localGetUserColleaguesResult
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "GetUserColleaguesResult"), factory).serialize(xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localGetUserColleaguesResultTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "GetUserColleaguesResult"));


        if (localGetUserColleaguesResult == null) {
          throw new RuntimeException("GetUserColleaguesResult cannot be null!!");
        }
        elementList.add(localGetUserColleaguesResult);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetUserColleaguesResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetUserColleaguesResponse object = new GetUserColleaguesResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetUserColleaguesResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetUserColleaguesResponse) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "GetUserColleaguesResult").equals(reader.getName())) {

            object.setGetUserColleaguesResult(ArrayOfContactData.Factory
              .parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class RemoveColleagueResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "RemoveColleagueResponse", "ns1");



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }



          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();



      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static RemoveColleagueResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        RemoveColleagueResponse object = new RemoveColleagueResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"RemoveColleagueResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (RemoveColleagueResponse) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class ExtensionMapper {

    public static java.lang.Object getTypeObject(java.lang.String namespaceURI,
        java.lang.String typeName, javax.xml.stream.XMLStreamReader reader)
        throws java.lang.Exception {


      if ("http://microsoft.com/webservices/SharePointPortalServer/UserProfileService"
        .equals(namespaceURI)
        && "ArrayOfPropertyData".equals(typeName)) {

        return ArrayOfPropertyData.Factory.parse(reader);


      }


      if ("http://microsoft.com/webservices/SharePointPortalServer/UserProfileService"
        .equals(namespaceURI)
        && "GetUserProfileByIndexResult".equals(typeName)) {

        return GetUserProfileByIndexResult.Factory.parse(reader);


      }


      if ("http://microsoft.com/webservices/SharePointPortalServer/UserProfileService"
        .equals(namespaceURI)
        && "PropertyData".equals(typeName)) {

        return PropertyData.Factory.parse(reader);


      }


      if ("http://microsoft.com/webservices/SharePointPortalServer/UserProfileService"
        .equals(namespaceURI)
        && "MembershipSource".equals(typeName)) {

        return MembershipSource.Factory.parse(reader);


      }


      if ("http://microsoft.com/webservices/SharePointPortalServer/UserProfileService"
        .equals(namespaceURI)
        && "ArrayOfPropertyInfo".equals(typeName)) {

        return ArrayOfPropertyInfo.Factory.parse(reader);


      }


      if ("http://microsoft.com/webservices/SharePointPortalServer/UserProfileService"
        .equals(namespaceURI)
        && "ArrayOfContactData".equals(typeName)) {

        return ArrayOfContactData.Factory.parse(reader);


      }


      if ("http://microsoft.com/webservices/SharePointPortalServer/UserProfileService"
        .equals(namespaceURI)
        && "ArrayOfValueData".equals(typeName)) {

        return ArrayOfValueData.Factory.parse(reader);


      }


      if ("http://microsoft.com/webservices/SharePointPortalServer/UserProfileService"
        .equals(namespaceURI)
        && "MembershipGroupType".equals(typeName)) {

        return MembershipGroupType.Factory.parse(reader);


      }


      if ("http://microsoft.com/webservices/SharePointPortalServer/UserProfileService"
        .equals(namespaceURI)
        && "MembershipData".equals(typeName)) {

        return MembershipData.Factory.parse(reader);


      }


      if ("http://microsoft.com/webservices/SharePointPortalServer/UserProfileService"
        .equals(namespaceURI)
        && "QuickLinkData".equals(typeName)) {

        return QuickLinkData.Factory.parse(reader);


      }


      if ("http://microsoft.com/webservices/SharePointPortalServer/UserProfileService"
        .equals(namespaceURI)
        && "ArrayOfPinnedLinkData".equals(typeName)) {

        return ArrayOfPinnedLinkData.Factory.parse(reader);


      }


      if ("http://microsoft.com/webservices/SharePointPortalServer/UserProfileService"
        .equals(namespaceURI)
        && "PinnedLinkData".equals(typeName)) {

        return PinnedLinkData.Factory.parse(reader);


      }


      if ("http://microsoft.com/webservices/SharePointPortalServer/UserProfileService"
        .equals(namespaceURI)
        && "ArrayOfQuickLinkData".equals(typeName)) {

        return ArrayOfQuickLinkData.Factory.parse(reader);


      }


      if ("http://microsoft.com/webservices/SharePointPortalServer/UserProfileService"
        .equals(namespaceURI)
        && "InCommonData".equals(typeName)) {

        return InCommonData.Factory.parse(reader);


      }


      if ("http://microsoft.com/webservices/SharePointPortalServer/UserProfileService"
        .equals(namespaceURI)
        && "ArrayOfMembershipData".equals(typeName)) {

        return ArrayOfMembershipData.Factory.parse(reader);


      }


      if ("http://microsoft.com/webservices/SharePointPortalServer/UserProfileService"
        .equals(namespaceURI)
        && "ValueData".equals(typeName)) {

        return ValueData.Factory.parse(reader);


      }


      if ("http://microsoft.com/wsdl/types/".equals(namespaceURI)
        && "guid".equals(typeName)) {

        return Guid.Factory.parse(reader);


      }


      if ("http://microsoft.com/webservices/SharePointPortalServer/UserProfileService"
        .equals(namespaceURI)
        && "MemberGroupData".equals(typeName)) {

        return MemberGroupData.Factory.parse(reader);


      }


      if ("http://microsoft.com/webservices/SharePointPortalServer/UserProfileService"
        .equals(namespaceURI)
        && "Privacy".equals(typeName)) {

        return Privacy.Factory.parse(reader);


      }


      if ("http://microsoft.com/webservices/SharePointPortalServer/UserProfileService"
        .equals(namespaceURI)
        && "PropertyInfo".equals(typeName)) {

        return PropertyInfo.Factory.parse(reader);


      }


      if ("http://microsoft.com/webservices/SharePointPortalServer/UserProfileService"
        .equals(namespaceURI)
        && "ContactData".equals(typeName)) {

        return ContactData.Factory.parse(reader);


      }


      if ("http://microsoft.com/webservices/SharePointPortalServer/UserProfileService"
        .equals(namespaceURI)
        && "ChoiceTypes".equals(typeName)) {

        return ChoiceTypes.Factory.parse(reader);


      }


      if ("http://microsoft.com/webservices/SharePointPortalServer/UserProfileService"
        .equals(namespaceURI)
        && "ArrayOfString".equals(typeName)) {

        return ArrayOfString.Factory.parse(reader);


      }


      throw new java.lang.RuntimeException("Unsupported type " + namespaceURI
        + " " + typeName);
    }

  }

  public static class RemoveAllPinnedLinksResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "RemoveAllPinnedLinksResponse", "ns1");



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }



          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();



      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static RemoveAllPinnedLinksResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        RemoveAllPinnedLinksResponse object = new RemoveAllPinnedLinksResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"RemoveAllPinnedLinksResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (RemoveAllPinnedLinksResponse) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetUserColleagues implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetUserColleagues", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetUserColleagues parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetUserColleagues object = new GetUserColleagues();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetUserColleagues".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetUserColleagues) ExtensionMapper.getTypeObject(nsUri,
                  type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class MemberGroupData implements
      org.apache.axis2.databinding.ADBBean {
    /*
     * This type was generated from the piece of schema that had name =
     * MemberGroupData Namespace URI =
     * http://microsoft.com/webservices/SharePointPortalServer/UserProfileService
     * Namespace Prefix = ns1
     */


    /**
     * field for SourceInternal
     */

    protected Guid localSourceInternal;


    /**
     * Auto generated getter method
     * 
     * @return Guid
     */
    public Guid getSourceInternal() {
      return localSourceInternal;
    }



    /**
     * Auto generated setter method
     * 
     * @param param SourceInternal
     */
    public void setSourceInternal(Guid param) {

      this.localSourceInternal = param;


    }


    /**
     * field for SourceReference
     */

    protected java.lang.String localSourceReference;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSourceReference() {
      return localSourceReference;
    }



    /**
     * Auto generated setter method
     * 
     * @param param SourceReference
     */
    public void setSourceReference(java.lang.String param) {

      this.localSourceReference = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }



          if (localSourceInternal == null) {
            throw new RuntimeException("SourceInternal cannot be null!!");
          }
          localSourceInternal
            .getOMElement(
              new javax.xml.namespace.QName(
                "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                "SourceInternal"), factory).serialize(xmlWriter);

          namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
          if (!namespace.equals("")) {
            prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
              prefix = org.apache.axis2.databinding.utils.BeanUtil
                .getUniquePrefix();

              xmlWriter.writeStartElement(prefix, "SourceReference", namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);

            } else {
              xmlWriter.writeStartElement(namespace, "SourceReference");
            }

          } else {
            xmlWriter.writeStartElement("SourceReference");
          }


          if (localSourceReference == null) {
            // write the nil attribute

            throw new RuntimeException("SourceReference cannot be null!!");

          } else {


            xmlWriter
              .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(localSourceReference));

          }

          xmlWriter.writeEndElement();


          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
        parentQName, factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "SourceInternal"));


      if (localSourceInternal == null) {
        throw new RuntimeException("SourceInternal cannot be null!!");
      }
      elementList.add(localSourceInternal);

      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "SourceReference"));

      if (localSourceReference != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
          .convertToString(localSourceReference));
      } else {
        throw new RuntimeException("SourceReference cannot be null!!");
      }


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static MemberGroupData parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        MemberGroupData object = new MemberGroupData();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"MemberGroupData".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (MemberGroupData) ExtensionMapper.getTypeObject(nsUri,
                  type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "SourceInternal").equals(reader.getName())) {

            object.setSourceInternal(Guid.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "SourceReference").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setSourceReference(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetUserProfileCount implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetUserProfileCount", "ns1");



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }



          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();



      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetUserProfileCount parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetUserProfileCount object = new GetUserProfileCount();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetUserProfileCount".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetUserProfileCount) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetInCommon implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetInCommon", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetInCommon parse(javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetInCommon object = new GetInCommon();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetInCommon".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetInCommon) ExtensionMapper.getTypeObject(nsUri, type,
                  reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetUserProfileSchema implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetUserProfileSchema", "ns1");



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }



          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();



      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetUserProfileSchema parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetUserProfileSchema object = new GetUserProfileSchema();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetUserProfileSchema".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetUserProfileSchema) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class AddPinnedLink implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "AddPinnedLink", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }


    /**
     * field for Name
     */

    protected java.lang.String localName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getName() {
      return localName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Name
     */
    public void setName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localNameTracker = true;
      } else {
        localNameTracker = false;

      }

      this.localName = param;


    }


    /**
     * field for Url
     */

    protected java.lang.String localUrl;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localUrlTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getUrl() {
      return localUrl;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Url
     */
    public void setUrl(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localUrlTracker = true;
      } else {
        localUrlTracker = false;

      }

      this.localUrl = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }
          if (localNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "name", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "name");
              }

            } else {
              xmlWriter.writeStartElement("name");
            }


            if (localName == null) {
              // write the nil attribute

              throw new RuntimeException("name cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localName));

            }

            xmlWriter.writeEndElement();
          }
          if (localUrlTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "url", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "url");
              }

            } else {
              xmlWriter.writeStartElement("url");
            }


            if (localUrl == null) {
              // write the nil attribute

              throw new RuntimeException("url cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localUrl));

            }

            xmlWriter.writeEndElement();
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }
      if (localNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "name"));

        if (localName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localName));
        } else {
          throw new RuntimeException("name cannot be null!!");
        }
      }
      if (localUrlTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "url"));

        if (localUrl != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localUrl));
        } else {
          throw new RuntimeException("url cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static AddPinnedLink parse(javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        AddPinnedLink object = new AddPinnedLink();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"AddPinnedLink".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (AddPinnedLink) ExtensionMapper.getTypeObject(nsUri,
                  type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "name").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setName(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "url").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setUrl(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(content));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetUserProfileCountResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetUserProfileCountResponse", "ns1");



    /**
     * field for GetUserProfileCountResult
     */

    protected long localGetUserProfileCountResult;


    /**
     * Auto generated getter method
     * 
     * @return long
     */
    public long getGetUserProfileCountResult() {
      return localGetUserProfileCountResult;
    }



    /**
     * Auto generated setter method
     * 
     * @param param GetUserProfileCountResult
     */
    public void setGetUserProfileCountResult(long param) {

      this.localGetUserProfileCountResult = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }



          namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
          if (!namespace.equals("")) {
            prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
              prefix = org.apache.axis2.databinding.utils.BeanUtil
                .getUniquePrefix();

              xmlWriter.writeStartElement(prefix, "GetUserProfileCountResult",
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);

            } else {
              xmlWriter.writeStartElement(namespace,
                "GetUserProfileCountResult");
            }

          } else {
            xmlWriter.writeStartElement("GetUserProfileCountResult");
          }

          xmlWriter
            .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(localGetUserProfileCountResult));

          xmlWriter.writeEndElement();


          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "GetUserProfileCountResult"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString(localGetUserProfileCountResult));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetUserProfileCountResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetUserProfileCountResponse object = new GetUserProfileCountResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetUserProfileCountResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetUserProfileCountResponse) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "GetUserProfileCountResult").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setGetUserProfileCountResult(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToLong(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class UpdateLinkResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "UpdateLinkResponse", "ns1");



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }



          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();



      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static UpdateLinkResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        UpdateLinkResponse object = new UpdateLinkResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"UpdateLinkResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (UpdateLinkResponse) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class RemoveAllLinks implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "RemoveAllLinks", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static RemoveAllLinks parse(javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        RemoveAllLinks object = new RemoveAllLinks();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"RemoveAllLinks".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (RemoveAllLinks) ExtensionMapper.getTypeObject(nsUri,
                  type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class UpdateLink implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "UpdateLink", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }


    /**
     * field for Data
     */

    protected QuickLinkData localData;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localDataTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return QuickLinkData
     */
    public QuickLinkData getData() {
      return localData;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Data
     */
    public void setData(QuickLinkData param) {

      if (param != null) {
        // update the setting tracker
        localDataTracker = true;
      } else {
        localDataTracker = false;

      }

      this.localData = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }
          if (localDataTracker) {
            if (localData == null) {
              throw new RuntimeException("data cannot be null!!");
            }
            localData
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "data"), factory).serialize(xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }
      if (localDataTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "data"));


        if (localData == null) {
          throw new RuntimeException("data cannot be null!!");
        }
        elementList.add(localData);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static UpdateLink parse(javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        UpdateLink object = new UpdateLink();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"UpdateLink".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (UpdateLink) ExtensionMapper.getTypeObject(nsUri, type,
                  reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "data").equals(reader.getName())) {

            object.setData(QuickLinkData.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetPropertyChoiceList implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetPropertyChoiceList", "ns1");



    /**
     * field for PropertyName
     */

    protected java.lang.String localPropertyName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localPropertyNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getPropertyName() {
      return localPropertyName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param PropertyName
     */
    public void setPropertyName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localPropertyNameTracker = true;
      } else {
        localPropertyNameTracker = false;

      }

      this.localPropertyName = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localPropertyNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "propertyName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "propertyName");
              }

            } else {
              xmlWriter.writeStartElement("propertyName");
            }


            if (localPropertyName == null) {
              // write the nil attribute

              throw new RuntimeException("propertyName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localPropertyName));

            }

            xmlWriter.writeEndElement();
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localPropertyNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "propertyName"));

        if (localPropertyName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localPropertyName));
        } else {
          throw new RuntimeException("propertyName cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetPropertyChoiceList parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetPropertyChoiceList object = new GetPropertyChoiceList();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetPropertyChoiceList".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetPropertyChoiceList) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "propertyName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setPropertyName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class RemoveAllPinnedLinks implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "RemoveAllPinnedLinks", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static RemoveAllPinnedLinks parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        RemoveAllPinnedLinks object = new RemoveAllPinnedLinks();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"RemoveAllPinnedLinks".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (RemoveAllPinnedLinks) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetUserMembershipsResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetUserMembershipsResponse", "ns1");



    /**
     * field for GetUserMembershipsResult
     */

    protected ArrayOfMembershipData localGetUserMembershipsResult;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localGetUserMembershipsResultTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ArrayOfMembershipData
     */
    public ArrayOfMembershipData getGetUserMembershipsResult() {
      return localGetUserMembershipsResult;
    }



    /**
     * Auto generated setter method
     * 
     * @param param GetUserMembershipsResult
     */
    public void setGetUserMembershipsResult(ArrayOfMembershipData param) {

      if (param != null) {
        // update the setting tracker
        localGetUserMembershipsResultTracker = true;
      } else {
        localGetUserMembershipsResultTracker = false;

      }

      this.localGetUserMembershipsResult = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localGetUserMembershipsResultTracker) {
            if (localGetUserMembershipsResult == null) {
              throw new RuntimeException(
                "GetUserMembershipsResult cannot be null!!");
            }
            localGetUserMembershipsResult
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "GetUserMembershipsResult"), factory).serialize(xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localGetUserMembershipsResultTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "GetUserMembershipsResult"));


        if (localGetUserMembershipsResult == null) {
          throw new RuntimeException(
            "GetUserMembershipsResult cannot be null!!");
        }
        elementList.add(localGetUserMembershipsResult);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetUserMembershipsResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetUserMembershipsResponse object = new GetUserMembershipsResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetUserMembershipsResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetUserMembershipsResponse) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "GetUserMembershipsResult").equals(reader.getName())) {

            object.setGetUserMembershipsResult(ArrayOfMembershipData.Factory
              .parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class RemoveAllMembershipsResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "RemoveAllMembershipsResponse", "ns1");



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }



          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();



      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static RemoveAllMembershipsResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        RemoveAllMembershipsResponse object = new RemoveAllMembershipsResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"RemoveAllMembershipsResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (RemoveAllMembershipsResponse) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class RemoveLinkResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "RemoveLinkResponse", "ns1");



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }



          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();



      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static RemoveLinkResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        RemoveLinkResponse object = new RemoveLinkResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"RemoveLinkResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (RemoveLinkResponse) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetUserProfileByGuidResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetUserProfileByGuidResponse", "ns1");



    /**
     * field for GetUserProfileByGuidResult
     */

    protected ArrayOfPropertyData localGetUserProfileByGuidResult;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localGetUserProfileByGuidResultTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ArrayOfPropertyData
     */
    public ArrayOfPropertyData getGetUserProfileByGuidResult() {
      return localGetUserProfileByGuidResult;
    }



    /**
     * Auto generated setter method
     * 
     * @param param GetUserProfileByGuidResult
     */
    public void setGetUserProfileByGuidResult(ArrayOfPropertyData param) {

      if (param != null) {
        // update the setting tracker
        localGetUserProfileByGuidResultTracker = true;
      } else {
        localGetUserProfileByGuidResultTracker = false;

      }

      this.localGetUserProfileByGuidResult = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localGetUserProfileByGuidResultTracker) {
            if (localGetUserProfileByGuidResult == null) {
              throw new RuntimeException(
                "GetUserProfileByGuidResult cannot be null!!");
            }
            localGetUserProfileByGuidResult
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "GetUserProfileByGuidResult"), factory).serialize(xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localGetUserProfileByGuidResultTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "GetUserProfileByGuidResult"));


        if (localGetUserProfileByGuidResult == null) {
          throw new RuntimeException(
            "GetUserProfileByGuidResult cannot be null!!");
        }
        elementList.add(localGetUserProfileByGuidResult);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetUserProfileByGuidResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetUserProfileByGuidResponse object = new GetUserProfileByGuidResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetUserProfileByGuidResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetUserProfileByGuidResponse) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "GetUserProfileByGuidResult").equals(reader.getName())) {

            object.setGetUserProfileByGuidResult(ArrayOfPropertyData.Factory
              .parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class UpdateMembershipPrivacy implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "UpdateMembershipPrivacy", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }


    /**
     * field for SourceInternal
     */

    protected Guid localSourceInternal;


    /**
     * Auto generated getter method
     * 
     * @return Guid
     */
    public Guid getSourceInternal() {
      return localSourceInternal;
    }



    /**
     * Auto generated setter method
     * 
     * @param param SourceInternal
     */
    public void setSourceInternal(Guid param) {

      this.localSourceInternal = param;


    }


    /**
     * field for SourceReference
     */

    protected java.lang.String localSourceReference;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getSourceReference() {
      return localSourceReference;
    }



    /**
     * Auto generated setter method
     * 
     * @param param SourceReference
     */
    public void setSourceReference(java.lang.String param) {

      this.localSourceReference = param;


    }


    /**
     * field for NewPrivacy
     */

    protected Privacy localNewPrivacy;


    /**
     * Auto generated getter method
     * 
     * @return Privacy
     */
    public Privacy getNewPrivacy() {
      return localNewPrivacy;
    }



    /**
     * Auto generated setter method
     * 
     * @param param NewPrivacy
     */
    public void setNewPrivacy(Privacy param) {

      this.localNewPrivacy = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }
          if (localSourceInternal == null) {
            throw new RuntimeException("sourceInternal cannot be null!!");
          }
          localSourceInternal
            .getOMElement(
              new javax.xml.namespace.QName(
                "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                "sourceInternal"), factory).serialize(xmlWriter);

          namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
          if (!namespace.equals("")) {
            prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
              prefix = org.apache.axis2.databinding.utils.BeanUtil
                .getUniquePrefix();

              xmlWriter.writeStartElement(prefix, "sourceReference", namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);

            } else {
              xmlWriter.writeStartElement(namespace, "sourceReference");
            }

          } else {
            xmlWriter.writeStartElement("sourceReference");
          }


          if (localSourceReference == null) {
            // write the nil attribute

            throw new RuntimeException("sourceReference cannot be null!!");

          } else {


            xmlWriter
              .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(localSourceReference));

          }

          xmlWriter.writeEndElement();

          if (localNewPrivacy == null) {
            throw new RuntimeException("newPrivacy cannot be null!!");
          }
          localNewPrivacy
            .getOMElement(
              new javax.xml.namespace.QName(
                "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                "newPrivacy"), factory).serialize(xmlWriter);


          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }
      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "sourceInternal"));


      if (localSourceInternal == null) {
        throw new RuntimeException("sourceInternal cannot be null!!");
      }
      elementList.add(localSourceInternal);

      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "sourceReference"));

      if (localSourceReference != null) {
        elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
          .convertToString(localSourceReference));
      } else {
        throw new RuntimeException("sourceReference cannot be null!!");
      }

      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "newPrivacy"));


      if (localNewPrivacy == null) {
        throw new RuntimeException("newPrivacy cannot be null!!");
      }
      elementList.add(localNewPrivacy);


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static UpdateMembershipPrivacy parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        UpdateMembershipPrivacy object = new UpdateMembershipPrivacy();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"UpdateMembershipPrivacy".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (UpdateMembershipPrivacy) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "sourceInternal").equals(reader.getName())) {

            object.setSourceInternal(Guid.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "sourceReference").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setSourceReference(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "newPrivacy").equals(reader.getName())) {

            object.setNewPrivacy(Privacy.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetUserProfileByIndexResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetUserProfileByIndexResponse", "ns1");



    /**
     * field for GetUserProfileByIndexResult
     */

    protected GetUserProfileByIndexResult localGetUserProfileByIndexResult;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localGetUserProfileByIndexResultTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return GetUserProfileByIndexResult
     */
    public GetUserProfileByIndexResult getGetUserProfileByIndexResult() {
      return localGetUserProfileByIndexResult;
    }



    /**
     * Auto generated setter method
     * 
     * @param param GetUserProfileByIndexResult
     */
    public void setGetUserProfileByIndexResult(GetUserProfileByIndexResult param) {

      if (param != null) {
        // update the setting tracker
        localGetUserProfileByIndexResultTracker = true;
      } else {
        localGetUserProfileByIndexResultTracker = false;

      }

      this.localGetUserProfileByIndexResult = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localGetUserProfileByIndexResultTracker) {
            if (localGetUserProfileByIndexResult == null) {
              throw new RuntimeException(
                "GetUserProfileByIndexResult cannot be null!!");
            }
            localGetUserProfileByIndexResult
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "GetUserProfileByIndexResult"), factory).serialize(xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localGetUserProfileByIndexResultTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "GetUserProfileByIndexResult"));


        if (localGetUserProfileByIndexResult == null) {
          throw new RuntimeException(
            "GetUserProfileByIndexResult cannot be null!!");
        }
        elementList.add(localGetUserProfileByIndexResult);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetUserProfileByIndexResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetUserProfileByIndexResponse object = new GetUserProfileByIndexResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetUserProfileByIndexResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetUserProfileByIndexResponse) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "GetUserProfileByIndexResult").equals(reader.getName())) {

            object
              .setGetUserProfileByIndexResult(GetUserProfileByIndexResult.Factory
                .parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class RemovePinnedLinkResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "RemovePinnedLinkResponse", "ns1");



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }



          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();



      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static RemovePinnedLinkResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        RemovePinnedLinkResponse object = new RemovePinnedLinkResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"RemovePinnedLinkResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (RemovePinnedLinkResponse) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetUserLinks implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetUserLinks", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetUserLinks parse(javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        GetUserLinks object = new GetUserLinks();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetUserLinks".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetUserLinks) ExtensionMapper.getTypeObject(nsUri,
                  type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetUserProfileByGuid implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetUserProfileByGuid", "ns1");



    /**
     * field for Guid
     */

    protected Guid localGuid;


    /**
     * Auto generated getter method
     * 
     * @return Guid
     */
    public Guid getGuid() {
      return localGuid;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Guid
     */
    public void setGuid(Guid param) {

      this.localGuid = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }



          if (localGuid == null) {
            throw new RuntimeException("guid cannot be null!!");
          }
          localGuid
            .getOMElement(
              new javax.xml.namespace.QName(
                "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                "guid"), factory).serialize(xmlWriter);


          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();


      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "guid"));


      if (localGuid == null) {
        throw new RuntimeException("guid cannot be null!!");
      }
      elementList.add(localGuid);


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetUserProfileByGuid parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetUserProfileByGuid object = new GetUserProfileByGuid();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetUserProfileByGuid".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetUserProfileByGuid) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "guid").equals(reader.getName())) {

            object.setGuid(Guid.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class RemoveLink implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "RemoveLink", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }


    /**
     * field for Id
     */

    protected int localId;


    /**
     * Auto generated getter method
     * 
     * @return int
     */
    public int getId() {
      return localId;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Id
     */
    public void setId(int param) {

      this.localId = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }
          namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
          if (!namespace.equals("")) {
            prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
              prefix = org.apache.axis2.databinding.utils.BeanUtil
                .getUniquePrefix();

              xmlWriter.writeStartElement(prefix, "id", namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);

            } else {
              xmlWriter.writeStartElement(namespace, "id");
            }

          } else {
            xmlWriter.writeStartElement("id");
          }

          xmlWriter
            .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(localId));

          xmlWriter.writeEndElement();


          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }
      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "id"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString(localId));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static RemoveLink parse(javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        RemoveLink object = new RemoveLink();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"RemoveLink".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (RemoveLink) ExtensionMapper.getTypeObject(nsUri, type,
                  reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "id").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setId(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToInt(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class UpdatePinnedLink implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "UpdatePinnedLink", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }


    /**
     * field for Data
     */

    protected PinnedLinkData localData;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localDataTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return PinnedLinkData
     */
    public PinnedLinkData getData() {
      return localData;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Data
     */
    public void setData(PinnedLinkData param) {

      if (param != null) {
        // update the setting tracker
        localDataTracker = true;
      } else {
        localDataTracker = false;

      }

      this.localData = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }
          if (localDataTracker) {
            if (localData == null) {
              throw new RuntimeException("data cannot be null!!");
            }
            localData
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "data"), factory).serialize(xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }
      if (localDataTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "data"));


        if (localData == null) {
          throw new RuntimeException("data cannot be null!!");
        }
        elementList.add(localData);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static UpdatePinnedLink parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        UpdatePinnedLink object = new UpdatePinnedLink();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"UpdatePinnedLink".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (UpdatePinnedLink) ExtensionMapper.getTypeObject(nsUri,
                  type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "data").equals(reader.getName())) {

            object.setData(PinnedLinkData.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class CreateMemberGroup implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "CreateMemberGroup", "ns1");



    /**
     * field for MembershipInfo
     */

    protected MembershipData localMembershipInfo;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localMembershipInfoTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return MembershipData
     */
    public MembershipData getMembershipInfo() {
      return localMembershipInfo;
    }



    /**
     * Auto generated setter method
     * 
     * @param param MembershipInfo
     */
    public void setMembershipInfo(MembershipData param) {

      if (param != null) {
        // update the setting tracker
        localMembershipInfoTracker = true;
      } else {
        localMembershipInfoTracker = false;

      }

      this.localMembershipInfo = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localMembershipInfoTracker) {
            if (localMembershipInfo == null) {
              throw new RuntimeException("membershipInfo cannot be null!!");
            }
            localMembershipInfo
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "membershipInfo"), factory).serialize(xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localMembershipInfoTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "membershipInfo"));


        if (localMembershipInfo == null) {
          throw new RuntimeException("membershipInfo cannot be null!!");
        }
        elementList.add(localMembershipInfo);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static CreateMemberGroup parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        CreateMemberGroup object = new CreateMemberGroup();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"CreateMemberGroup".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (CreateMemberGroup) ExtensionMapper.getTypeObject(nsUri,
                  type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "membershipInfo").equals(reader.getName())) {

            object.setMembershipInfo(MembershipData.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class CreateUserProfileByAccountNameResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "CreateUserProfileByAccountNameResponse", "ns1");



    /**
     * field for CreateUserProfileByAccountNameResult
     */

    protected ArrayOfPropertyData localCreateUserProfileByAccountNameResult;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localCreateUserProfileByAccountNameResultTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ArrayOfPropertyData
     */
    public ArrayOfPropertyData getCreateUserProfileByAccountNameResult() {
      return localCreateUserProfileByAccountNameResult;
    }



    /**
     * Auto generated setter method
     * 
     * @param param CreateUserProfileByAccountNameResult
     */
    public void setCreateUserProfileByAccountNameResult(
        ArrayOfPropertyData param) {

      if (param != null) {
        // update the setting tracker
        localCreateUserProfileByAccountNameResultTracker = true;
      } else {
        localCreateUserProfileByAccountNameResultTracker = false;

      }

      this.localCreateUserProfileByAccountNameResult = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localCreateUserProfileByAccountNameResultTracker) {
            if (localCreateUserProfileByAccountNameResult == null) {
              throw new RuntimeException(
                "CreateUserProfileByAccountNameResult cannot be null!!");
            }
            localCreateUserProfileByAccountNameResult
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "CreateUserProfileByAccountNameResult"), factory).serialize(
                xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localCreateUserProfileByAccountNameResultTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "CreateUserProfileByAccountNameResult"));


        if (localCreateUserProfileByAccountNameResult == null) {
          throw new RuntimeException(
            "CreateUserProfileByAccountNameResult cannot be null!!");
        }
        elementList.add(localCreateUserProfileByAccountNameResult);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static CreateUserProfileByAccountNameResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        CreateUserProfileByAccountNameResponse object = new CreateUserProfileByAccountNameResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"CreateUserProfileByAccountNameResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (CreateUserProfileByAccountNameResponse) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "CreateUserProfileByAccountNameResult").equals(reader.getName())) {

            object
              .setCreateUserProfileByAccountNameResult(ArrayOfPropertyData.Factory
                .parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class AddMembershipResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "AddMembershipResponse", "ns1");



    /**
     * field for AddMembershipResult
     */

    protected MembershipData localAddMembershipResult;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAddMembershipResultTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return MembershipData
     */
    public MembershipData getAddMembershipResult() {
      return localAddMembershipResult;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AddMembershipResult
     */
    public void setAddMembershipResult(MembershipData param) {

      if (param != null) {
        // update the setting tracker
        localAddMembershipResultTracker = true;
      } else {
        localAddMembershipResultTracker = false;

      }

      this.localAddMembershipResult = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAddMembershipResultTracker) {
            if (localAddMembershipResult == null) {
              throw new RuntimeException("AddMembershipResult cannot be null!!");
            }
            localAddMembershipResult
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "AddMembershipResult"), factory).serialize(xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAddMembershipResultTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "AddMembershipResult"));


        if (localAddMembershipResult == null) {
          throw new RuntimeException("AddMembershipResult cannot be null!!");
        }
        elementList.add(localAddMembershipResult);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static AddMembershipResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        AddMembershipResponse object = new AddMembershipResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"AddMembershipResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (AddMembershipResponse) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "AddMembershipResult").equals(reader.getName())) {

            object.setAddMembershipResult(MembershipData.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class AddColleagueResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "AddColleagueResponse", "ns1");



    /**
     * field for AddColleagueResult
     */

    protected ContactData localAddColleagueResult;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAddColleagueResultTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ContactData
     */
    public ContactData getAddColleagueResult() {
      return localAddColleagueResult;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AddColleagueResult
     */
    public void setAddColleagueResult(ContactData param) {

      if (param != null) {
        // update the setting tracker
        localAddColleagueResultTracker = true;
      } else {
        localAddColleagueResultTracker = false;

      }

      this.localAddColleagueResult = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAddColleagueResultTracker) {
            if (localAddColleagueResult == null) {
              throw new RuntimeException("AddColleagueResult cannot be null!!");
            }
            localAddColleagueResult
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "AddColleagueResult"), factory).serialize(xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAddColleagueResultTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "AddColleagueResult"));


        if (localAddColleagueResult == null) {
          throw new RuntimeException("AddColleagueResult cannot be null!!");
        }
        elementList.add(localAddColleagueResult);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static AddColleagueResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        AddColleagueResponse object = new AddColleagueResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"AddColleagueResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (AddColleagueResponse) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "AddColleagueResult").equals(reader.getName())) {

            object.setAddColleagueResult(ContactData.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetUserProfileByName implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetUserProfileByName", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "AccountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "AccountName");
              }

            } else {
              xmlWriter.writeStartElement("AccountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("AccountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "AccountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("AccountName cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetUserProfileByName parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetUserProfileByName object = new GetUserProfileByName();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetUserProfileByName".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetUserProfileByName) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "AccountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetPropertyChoiceListResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetPropertyChoiceListResponse", "ns1");



    /**
     * field for GetPropertyChoiceListResult
     */

    protected ArrayOfString localGetPropertyChoiceListResult;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localGetPropertyChoiceListResultTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ArrayOfString
     */
    public ArrayOfString getGetPropertyChoiceListResult() {
      return localGetPropertyChoiceListResult;
    }



    /**
     * Auto generated setter method
     * 
     * @param param GetPropertyChoiceListResult
     */
    public void setGetPropertyChoiceListResult(ArrayOfString param) {

      if (param != null) {
        // update the setting tracker
        localGetPropertyChoiceListResultTracker = true;
      } else {
        localGetPropertyChoiceListResultTracker = false;

      }

      this.localGetPropertyChoiceListResult = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localGetPropertyChoiceListResultTracker) {
            if (localGetPropertyChoiceListResult == null) {
              throw new RuntimeException(
                "GetPropertyChoiceListResult cannot be null!!");
            }
            localGetPropertyChoiceListResult
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "GetPropertyChoiceListResult"), factory).serialize(xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localGetPropertyChoiceListResultTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "GetPropertyChoiceListResult"));


        if (localGetPropertyChoiceListResult == null) {
          throw new RuntimeException(
            "GetPropertyChoiceListResult cannot be null!!");
        }
        elementList.add(localGetPropertyChoiceListResult);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetPropertyChoiceListResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetPropertyChoiceListResponse object = new GetPropertyChoiceListResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetPropertyChoiceListResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetPropertyChoiceListResponse) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "GetPropertyChoiceListResult").equals(reader.getName())) {

            object.setGetPropertyChoiceListResult(ArrayOfString.Factory
              .parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class ArrayOfPropertyData implements
      org.apache.axis2.databinding.ADBBean {
    /*
     * This type was generated from the piece of schema that had name =
     * ArrayOfPropertyData Namespace URI =
     * http://microsoft.com/webservices/SharePointPortalServer/UserProfileService
     * Namespace Prefix = ns1
     */


    /**
     * field for PropertyData This was an Array!
     */

    protected PropertyData[] localPropertyData;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localPropertyDataTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return PropertyData[]
     */
    public PropertyData[] getPropertyData() {
      return localPropertyData;
    }



    /**
     * validate the array for PropertyData
     */
    protected void validatePropertyData(PropertyData[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param PropertyData
     */
    public void setPropertyData(PropertyData[] param) {

      validatePropertyData(param);


      if (param != null) {
        // update the setting tracker
        localPropertyDataTracker = true;
      } else {
        localPropertyDataTracker = true;

      }

      this.localPropertyData = param;
    }



    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param PropertyData
     */
    public void addPropertyData(PropertyData param) {
      if (localPropertyData == null) {
        localPropertyData = new PropertyData[]{};
      }


      // update the setting tracker
      localPropertyDataTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
        .toList(localPropertyData);
      list.add(param);
      this.localPropertyData = (PropertyData[]) list
        .toArray(new PropertyData[list.size()]);

    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localPropertyDataTracker) {
            if (localPropertyData != null) {
              for (int i = 0; i < localPropertyData.length; i++) {
                if (localPropertyData[i] != null) {
                  localPropertyData[i]
                    .getOMElement(
                      new javax.xml.namespace.QName(
                        "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                        "PropertyData"), factory).serialize(xmlWriter);
                } else {

                  // write null attribute
                  java.lang.String namespace2 = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
                  if (!namespace2.equals("")) {
                    java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                    if (prefix2 == null) {
                      prefix2 = org.apache.axis2.databinding.utils.BeanUtil
                        .getUniquePrefix();

                      xmlWriter.writeStartElement(prefix2, "PropertyData",
                        namespace2);
                      xmlWriter.writeNamespace(prefix2, namespace2);
                      xmlWriter.setPrefix(prefix2, namespace2);

                    } else {
                      xmlWriter.writeStartElement(namespace2, "PropertyData");
                    }

                  } else {
                    xmlWriter.writeStartElement("PropertyData");
                  }

                  // write the nil attribute
                  writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "nil", "true",
                    xmlWriter);
                  xmlWriter.writeEndElement();

                }

              }
            } else {

              // write null attribute
              java.lang.String namespace2 = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
              if (!namespace2.equals("")) {
                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                if (prefix2 == null) {
                  prefix2 = org.apache.axis2.databinding.utils.BeanUtil
                    .getUniquePrefix();

                  xmlWriter.writeStartElement(prefix2, "PropertyData",
                    namespace2);
                  xmlWriter.writeNamespace(prefix2, namespace2);
                  xmlWriter.setPrefix(prefix2, namespace2);

                } else {
                  xmlWriter.writeStartElement(namespace2, "PropertyData");
                }

              } else {
                xmlWriter.writeStartElement("PropertyData");
              }

              // write the nil attribute
              writeAttribute("xsi",
                "http://www.w3.org/2001/XMLSchema-instance", "nil", "true",
                xmlWriter);
              xmlWriter.writeEndElement();

            }
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
        parentQName, factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localPropertyDataTracker) {
        if (localPropertyData != null) {
          for (int i = 0; i < localPropertyData.length; i++) {

            if (localPropertyData[i] != null) {
              elementList
                .add(new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "PropertyData"));
              elementList.add(localPropertyData[i]);
            } else {

              elementList
                .add(new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "PropertyData"));
              elementList.add(null);

            }

          }
        } else {

          elementList
            .add(new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "PropertyData"));
          elementList.add(localPropertyData);

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static ArrayOfPropertyData parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        ArrayOfPropertyData object = new ArrayOfPropertyData();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"ArrayOfPropertyData".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (ArrayOfPropertyData) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "PropertyData").equals(reader.getName())) {



            // Process the array and step past its final element's end.

            if ("true".equals(reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "nil"))) {
              list1.add(null);
              reader.next();
            } else {
              list1.add(PropertyData.Factory.parse(reader));
            }
            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement())
                reader.next();
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml
                // structure
                loopDone1 = true;
              } else {
                if (new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "PropertyData").equals(reader.getName())) {

                  if ("true".equals(reader.getAttributeValue(
                    "http://www.w3.org/2001/XMLSchema-instance", "nil"))) {
                    list1.add(null);
                    reader.next();
                  } else {
                    list1.add(PropertyData.Factory.parse(reader));
                  }
                } else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array
            object
              .setPropertyData((PropertyData[]) org.apache.axis2.databinding.utils.ConverterUtil
                .convertToArray(PropertyData.class, list1));

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class ModifyUserPropertyByAccountName implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "ModifyUserPropertyByAccountName", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }


    /**
     * field for NewData
     */

    protected ArrayOfPropertyData localNewData;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localNewDataTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ArrayOfPropertyData
     */
    public ArrayOfPropertyData getNewData() {
      return localNewData;
    }



    /**
     * Auto generated setter method
     * 
     * @param param NewData
     */
    public void setNewData(ArrayOfPropertyData param) {

      if (param != null) {
        // update the setting tracker
        localNewDataTracker = true;
      } else {
        localNewDataTracker = false;

      }

      this.localNewData = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }
          if (localNewDataTracker) {
            if (localNewData == null) {
              throw new RuntimeException("newData cannot be null!!");
            }
            localNewData
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "newData"), factory).serialize(xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }
      if (localNewDataTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "newData"));


        if (localNewData == null) {
          throw new RuntimeException("newData cannot be null!!");
        }
        elementList.add(localNewData);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static ModifyUserPropertyByAccountName parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        ModifyUserPropertyByAccountName object = new ModifyUserPropertyByAccountName();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"ModifyUserPropertyByAccountName".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (ModifyUserPropertyByAccountName) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "newData").equals(reader.getName())) {

            object.setNewData(ArrayOfPropertyData.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetUserProfileByIndexResult implements
      org.apache.axis2.databinding.ADBBean {
    /*
     * This type was generated from the piece of schema that had name =
     * GetUserProfileByIndexResult Namespace URI =
     * http://microsoft.com/webservices/SharePointPortalServer/UserProfileService
     * Namespace Prefix = ns1
     */


    /**
     * field for NextValue
     */

    protected java.lang.String localNextValue;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localNextValueTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getNextValue() {
      return localNextValue;
    }



    /**
     * Auto generated setter method
     * 
     * @param param NextValue
     */
    public void setNextValue(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localNextValueTracker = true;
      } else {
        localNextValueTracker = false;

      }

      this.localNextValue = param;


    }


    /**
     * field for UserProfile
     */

    protected ArrayOfPropertyData localUserProfile;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localUserProfileTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ArrayOfPropertyData
     */
    public ArrayOfPropertyData getUserProfile() {
      return localUserProfile;
    }



    /**
     * Auto generated setter method
     * 
     * @param param UserProfile
     */
    public void setUserProfile(ArrayOfPropertyData param) {

      if (param != null) {
        // update the setting tracker
        localUserProfileTracker = true;
      } else {
        localUserProfileTracker = false;

      }

      this.localUserProfile = param;


    }


    /**
     * field for Colleagues
     */

    protected ArrayOfContactData localColleagues;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localColleaguesTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ArrayOfContactData
     */
    public ArrayOfContactData getColleagues() {
      return localColleagues;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Colleagues
     */
    public void setColleagues(ArrayOfContactData param) {

      if (param != null) {
        // update the setting tracker
        localColleaguesTracker = true;
      } else {
        localColleaguesTracker = false;

      }

      this.localColleagues = param;


    }


    /**
     * field for QuickLinks
     */

    protected ArrayOfQuickLinkData localQuickLinks;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localQuickLinksTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ArrayOfQuickLinkData
     */
    public ArrayOfQuickLinkData getQuickLinks() {
      return localQuickLinks;
    }



    /**
     * Auto generated setter method
     * 
     * @param param QuickLinks
     */
    public void setQuickLinks(ArrayOfQuickLinkData param) {

      if (param != null) {
        // update the setting tracker
        localQuickLinksTracker = true;
      } else {
        localQuickLinksTracker = false;

      }

      this.localQuickLinks = param;


    }


    /**
     * field for PinnedLinks
     */

    protected ArrayOfPinnedLinkData localPinnedLinks;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localPinnedLinksTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ArrayOfPinnedLinkData
     */
    public ArrayOfPinnedLinkData getPinnedLinks() {
      return localPinnedLinks;
    }



    /**
     * Auto generated setter method
     * 
     * @param param PinnedLinks
     */
    public void setPinnedLinks(ArrayOfPinnedLinkData param) {

      if (param != null) {
        // update the setting tracker
        localPinnedLinksTracker = true;
      } else {
        localPinnedLinksTracker = false;

      }

      this.localPinnedLinks = param;


    }


    /**
     * field for Memberships
     */

    protected ArrayOfMembershipData localMemberships;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localMembershipsTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ArrayOfMembershipData
     */
    public ArrayOfMembershipData getMemberships() {
      return localMemberships;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Memberships
     */
    public void setMemberships(ArrayOfMembershipData param) {

      if (param != null) {
        // update the setting tracker
        localMembershipsTracker = true;
      } else {
        localMembershipsTracker = false;

      }

      this.localMemberships = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localNextValueTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "NextValue", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "NextValue");
              }

            } else {
              xmlWriter.writeStartElement("NextValue");
            }


            if (localNextValue == null) {
              // write the nil attribute

              throw new RuntimeException("NextValue cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localNextValue));

            }

            xmlWriter.writeEndElement();
          }
          if (localUserProfileTracker) {
            if (localUserProfile == null) {
              throw new RuntimeException("UserProfile cannot be null!!");
            }
            localUserProfile
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "UserProfile"), factory).serialize(xmlWriter);
          }
          if (localColleaguesTracker) {
            if (localColleagues == null) {
              throw new RuntimeException("Colleagues cannot be null!!");
            }
            localColleagues
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "Colleagues"), factory).serialize(xmlWriter);
          }
          if (localQuickLinksTracker) {
            if (localQuickLinks == null) {
              throw new RuntimeException("QuickLinks cannot be null!!");
            }
            localQuickLinks
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "QuickLinks"), factory).serialize(xmlWriter);
          }
          if (localPinnedLinksTracker) {
            if (localPinnedLinks == null) {
              throw new RuntimeException("PinnedLinks cannot be null!!");
            }
            localPinnedLinks
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "PinnedLinks"), factory).serialize(xmlWriter);
          }
          if (localMembershipsTracker) {
            if (localMemberships == null) {
              throw new RuntimeException("Memberships cannot be null!!");
            }
            localMemberships
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "Memberships"), factory).serialize(xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
        parentQName, factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localNextValueTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "NextValue"));

        if (localNextValue != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localNextValue));
        } else {
          throw new RuntimeException("NextValue cannot be null!!");
        }
      }
      if (localUserProfileTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "UserProfile"));


        if (localUserProfile == null) {
          throw new RuntimeException("UserProfile cannot be null!!");
        }
        elementList.add(localUserProfile);
      }
      if (localColleaguesTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "Colleagues"));


        if (localColleagues == null) {
          throw new RuntimeException("Colleagues cannot be null!!");
        }
        elementList.add(localColleagues);
      }
      if (localQuickLinksTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "QuickLinks"));


        if (localQuickLinks == null) {
          throw new RuntimeException("QuickLinks cannot be null!!");
        }
        elementList.add(localQuickLinks);
      }
      if (localPinnedLinksTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "PinnedLinks"));


        if (localPinnedLinks == null) {
          throw new RuntimeException("PinnedLinks cannot be null!!");
        }
        elementList.add(localPinnedLinks);
      }
      if (localMembershipsTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "Memberships"));


        if (localMemberships == null) {
          throw new RuntimeException("Memberships cannot be null!!");
        }
        elementList.add(localMemberships);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetUserProfileByIndexResult parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetUserProfileByIndexResult object = new GetUserProfileByIndexResult();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetUserProfileByIndexResult".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetUserProfileByIndexResult) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "NextValue").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setNextValue(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "UserProfile").equals(reader.getName())) {

            object.setUserProfile(ArrayOfPropertyData.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Colleagues").equals(reader.getName())) {

            object.setColleagues(ArrayOfContactData.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "QuickLinks").equals(reader.getName())) {

            object.setQuickLinks(ArrayOfQuickLinkData.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "PinnedLinks").equals(reader.getName())) {

            object.setPinnedLinks(ArrayOfPinnedLinkData.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Memberships").equals(reader.getName())) {

            object.setMemberships(ArrayOfMembershipData.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class RemoveAllLinksResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "RemoveAllLinksResponse", "ns1");



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }



          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();



      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static RemoveAllLinksResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        RemoveAllLinksResponse object = new RemoveAllLinksResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"RemoveAllLinksResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (RemoveAllLinksResponse) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetUserLinksResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetUserLinksResponse", "ns1");



    /**
     * field for GetUserLinksResult
     */

    protected ArrayOfQuickLinkData localGetUserLinksResult;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localGetUserLinksResultTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ArrayOfQuickLinkData
     */
    public ArrayOfQuickLinkData getGetUserLinksResult() {
      return localGetUserLinksResult;
    }



    /**
     * Auto generated setter method
     * 
     * @param param GetUserLinksResult
     */
    public void setGetUserLinksResult(ArrayOfQuickLinkData param) {

      if (param != null) {
        // update the setting tracker
        localGetUserLinksResultTracker = true;
      } else {
        localGetUserLinksResultTracker = false;

      }

      this.localGetUserLinksResult = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localGetUserLinksResultTracker) {
            if (localGetUserLinksResult == null) {
              throw new RuntimeException("GetUserLinksResult cannot be null!!");
            }
            localGetUserLinksResult
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "GetUserLinksResult"), factory).serialize(xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localGetUserLinksResultTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "GetUserLinksResult"));


        if (localGetUserLinksResult == null) {
          throw new RuntimeException("GetUserLinksResult cannot be null!!");
        }
        elementList.add(localGetUserLinksResult);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetUserLinksResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetUserLinksResponse object = new GetUserLinksResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetUserLinksResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetUserLinksResponse) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "GetUserLinksResult").equals(reader.getName())) {

            object.setGetUserLinksResult(ArrayOfQuickLinkData.Factory
              .parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class RemoveAllColleagues implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "RemoveAllColleagues", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static RemoveAllColleagues parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        RemoveAllColleagues object = new RemoveAllColleagues();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"RemoveAllColleagues".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (RemoveAllColleagues) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class RemoveMembershipResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "RemoveMembershipResponse", "ns1");



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }



          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();



      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static RemoveMembershipResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        RemoveMembershipResponse object = new RemoveMembershipResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"RemoveMembershipResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (RemoveMembershipResponse) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetInCommonResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetInCommonResponse", "ns1");



    /**
     * field for GetInCommonResult
     */

    protected InCommonData localGetInCommonResult;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localGetInCommonResultTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return InCommonData
     */
    public InCommonData getGetInCommonResult() {
      return localGetInCommonResult;
    }



    /**
     * Auto generated setter method
     * 
     * @param param GetInCommonResult
     */
    public void setGetInCommonResult(InCommonData param) {

      if (param != null) {
        // update the setting tracker
        localGetInCommonResultTracker = true;
      } else {
        localGetInCommonResultTracker = false;

      }

      this.localGetInCommonResult = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localGetInCommonResultTracker) {
            if (localGetInCommonResult == null) {
              throw new RuntimeException("GetInCommonResult cannot be null!!");
            }
            localGetInCommonResult
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "GetInCommonResult"), factory).serialize(xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localGetInCommonResultTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "GetInCommonResult"));


        if (localGetInCommonResult == null) {
          throw new RuntimeException("GetInCommonResult cannot be null!!");
        }
        elementList.add(localGetInCommonResult);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetInCommonResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetInCommonResponse object = new GetInCommonResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetInCommonResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetInCommonResponse) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "GetInCommonResult").equals(reader.getName())) {

            object.setGetInCommonResult(InCommonData.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetUserPinnedLinksResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetUserPinnedLinksResponse", "ns1");



    /**
     * field for GetUserPinnedLinksResult
     */

    protected ArrayOfPinnedLinkData localGetUserPinnedLinksResult;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localGetUserPinnedLinksResultTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ArrayOfPinnedLinkData
     */
    public ArrayOfPinnedLinkData getGetUserPinnedLinksResult() {
      return localGetUserPinnedLinksResult;
    }



    /**
     * Auto generated setter method
     * 
     * @param param GetUserPinnedLinksResult
     */
    public void setGetUserPinnedLinksResult(ArrayOfPinnedLinkData param) {

      if (param != null) {
        // update the setting tracker
        localGetUserPinnedLinksResultTracker = true;
      } else {
        localGetUserPinnedLinksResultTracker = false;

      }

      this.localGetUserPinnedLinksResult = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localGetUserPinnedLinksResultTracker) {
            if (localGetUserPinnedLinksResult == null) {
              throw new RuntimeException(
                "GetUserPinnedLinksResult cannot be null!!");
            }
            localGetUserPinnedLinksResult
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "GetUserPinnedLinksResult"), factory).serialize(xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localGetUserPinnedLinksResultTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "GetUserPinnedLinksResult"));


        if (localGetUserPinnedLinksResult == null) {
          throw new RuntimeException(
            "GetUserPinnedLinksResult cannot be null!!");
        }
        elementList.add(localGetUserPinnedLinksResult);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetUserPinnedLinksResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetUserPinnedLinksResponse object = new GetUserPinnedLinksResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetUserPinnedLinksResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetUserPinnedLinksResponse) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "GetUserPinnedLinksResult").equals(reader.getName())) {

            object.setGetUserPinnedLinksResult(ArrayOfPinnedLinkData.Factory
              .parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class AddLink implements org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "AddLink", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }


    /**
     * field for Name
     */

    protected java.lang.String localName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getName() {
      return localName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Name
     */
    public void setName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localNameTracker = true;
      } else {
        localNameTracker = false;

      }

      this.localName = param;


    }


    /**
     * field for Url
     */

    protected java.lang.String localUrl;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localUrlTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getUrl() {
      return localUrl;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Url
     */
    public void setUrl(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localUrlTracker = true;
      } else {
        localUrlTracker = false;

      }

      this.localUrl = param;


    }


    /**
     * field for Group
     */

    protected java.lang.String localGroup;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localGroupTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getGroup() {
      return localGroup;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Group
     */
    public void setGroup(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localGroupTracker = true;
      } else {
        localGroupTracker = false;

      }

      this.localGroup = param;


    }


    /**
     * field for Privacy
     */

    protected Privacy localPrivacy;


    /**
     * Auto generated getter method
     * 
     * @return Privacy
     */
    public Privacy getPrivacy() {
      return localPrivacy;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Privacy
     */
    public void setPrivacy(Privacy param) {

      this.localPrivacy = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }
          if (localNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "name", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "name");
              }

            } else {
              xmlWriter.writeStartElement("name");
            }


            if (localName == null) {
              // write the nil attribute

              throw new RuntimeException("name cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localName));

            }

            xmlWriter.writeEndElement();
          }
          if (localUrlTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "url", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "url");
              }

            } else {
              xmlWriter.writeStartElement("url");
            }


            if (localUrl == null) {
              // write the nil attribute

              throw new RuntimeException("url cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localUrl));

            }

            xmlWriter.writeEndElement();
          }
          if (localGroupTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "group", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "group");
              }

            } else {
              xmlWriter.writeStartElement("group");
            }


            if (localGroup == null) {
              // write the nil attribute

              throw new RuntimeException("group cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localGroup));

            }

            xmlWriter.writeEndElement();
          }
          if (localPrivacy == null) {
            throw new RuntimeException("privacy cannot be null!!");
          }
          localPrivacy
            .getOMElement(
              new javax.xml.namespace.QName(
                "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                "privacy"), factory).serialize(xmlWriter);


          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }
      if (localNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "name"));

        if (localName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localName));
        } else {
          throw new RuntimeException("name cannot be null!!");
        }
      }
      if (localUrlTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "url"));

        if (localUrl != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localUrl));
        } else {
          throw new RuntimeException("url cannot be null!!");
        }
      }
      if (localGroupTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "group"));

        if (localGroup != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localGroup));
        } else {
          throw new RuntimeException("group cannot be null!!");
        }
      }
      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "privacy"));


      if (localPrivacy == null) {
        throw new RuntimeException("privacy cannot be null!!");
      }
      elementList.add(localPrivacy);


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static AddLink parse(javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        AddLink object = new AddLink();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"AddLink".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (AddLink) ExtensionMapper.getTypeObject(nsUri, type,
                  reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "name").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setName(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "url").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setUrl(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "group").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setGroup(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "privacy").equals(reader.getName())) {

            object.setPrivacy(Privacy.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetCommonManager implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetCommonManager", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetCommonManager parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetCommonManager object = new GetCommonManager();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetCommonManager".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetCommonManager) ExtensionMapper.getTypeObject(nsUri,
                  type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetUserProfileByNameResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetUserProfileByNameResponse", "ns1");



    /**
     * field for GetUserProfileByNameResult
     */

    protected ArrayOfPropertyData localGetUserProfileByNameResult;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localGetUserProfileByNameResultTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ArrayOfPropertyData
     */
    public ArrayOfPropertyData getGetUserProfileByNameResult() {
      return localGetUserProfileByNameResult;
    }



    /**
     * Auto generated setter method
     * 
     * @param param GetUserProfileByNameResult
     */
    public void setGetUserProfileByNameResult(ArrayOfPropertyData param) {

      if (param != null) {
        // update the setting tracker
        localGetUserProfileByNameResultTracker = true;
      } else {
        localGetUserProfileByNameResultTracker = false;

      }

      this.localGetUserProfileByNameResult = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localGetUserProfileByNameResultTracker) {
            if (localGetUserProfileByNameResult == null) {
              throw new RuntimeException(
                "GetUserProfileByNameResult cannot be null!!");
            }
            localGetUserProfileByNameResult
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "GetUserProfileByNameResult"), factory).serialize(xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localGetUserProfileByNameResultTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "GetUserProfileByNameResult"));


        if (localGetUserProfileByNameResult == null) {
          throw new RuntimeException(
            "GetUserProfileByNameResult cannot be null!!");
        }
        elementList.add(localGetUserProfileByNameResult);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetUserProfileByNameResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetUserProfileByNameResponse object = new GetUserProfileByNameResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetUserProfileByNameResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetUserProfileByNameResponse) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "GetUserProfileByNameResult").equals(reader.getName())) {

            object.setGetUserProfileByNameResult(ArrayOfPropertyData.Factory
              .parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class ArrayOfQuickLinkData implements
      org.apache.axis2.databinding.ADBBean {
    /*
     * This type was generated from the piece of schema that had name =
     * ArrayOfQuickLinkData Namespace URI =
     * http://microsoft.com/webservices/SharePointPortalServer/UserProfileService
     * Namespace Prefix = ns1
     */


    /**
     * field for QuickLinkData This was an Array!
     */

    protected QuickLinkData[] localQuickLinkData;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localQuickLinkDataTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return QuickLinkData[]
     */
    public QuickLinkData[] getQuickLinkData() {
      return localQuickLinkData;
    }



    /**
     * validate the array for QuickLinkData
     */
    protected void validateQuickLinkData(QuickLinkData[] param) {

    }


    /**
     * Auto generated setter method
     * 
     * @param param QuickLinkData
     */
    public void setQuickLinkData(QuickLinkData[] param) {

      validateQuickLinkData(param);


      if (param != null) {
        // update the setting tracker
        localQuickLinkDataTracker = true;
      } else {
        localQuickLinkDataTracker = true;

      }

      this.localQuickLinkData = param;
    }



    /**
     * Auto generated add method for the array for convenience
     * 
     * @param param QuickLinkData
     */
    public void addQuickLinkData(QuickLinkData param) {
      if (localQuickLinkData == null) {
        localQuickLinkData = new QuickLinkData[]{};
      }


      // update the setting tracker
      localQuickLinkDataTracker = true;


      java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
        .toList(localQuickLinkData);
      list.add(param);
      this.localQuickLinkData = (QuickLinkData[]) list
        .toArray(new QuickLinkData[list.size()]);

    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localQuickLinkDataTracker) {
            if (localQuickLinkData != null) {
              for (int i = 0; i < localQuickLinkData.length; i++) {
                if (localQuickLinkData[i] != null) {
                  localQuickLinkData[i]
                    .getOMElement(
                      new javax.xml.namespace.QName(
                        "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                        "QuickLinkData"), factory).serialize(xmlWriter);
                } else {

                  // write null attribute
                  java.lang.String namespace2 = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
                  if (!namespace2.equals("")) {
                    java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                    if (prefix2 == null) {
                      prefix2 = org.apache.axis2.databinding.utils.BeanUtil
                        .getUniquePrefix();

                      xmlWriter.writeStartElement(prefix2, "QuickLinkData",
                        namespace2);
                      xmlWriter.writeNamespace(prefix2, namespace2);
                      xmlWriter.setPrefix(prefix2, namespace2);

                    } else {
                      xmlWriter.writeStartElement(namespace2, "QuickLinkData");
                    }

                  } else {
                    xmlWriter.writeStartElement("QuickLinkData");
                  }

                  // write the nil attribute
                  writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "nil", "true",
                    xmlWriter);
                  xmlWriter.writeEndElement();

                }

              }
            } else {

              // write null attribute
              java.lang.String namespace2 = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
              if (!namespace2.equals("")) {
                java.lang.String prefix2 = xmlWriter.getPrefix(namespace2);

                if (prefix2 == null) {
                  prefix2 = org.apache.axis2.databinding.utils.BeanUtil
                    .getUniquePrefix();

                  xmlWriter.writeStartElement(prefix2, "QuickLinkData",
                    namespace2);
                  xmlWriter.writeNamespace(prefix2, namespace2);
                  xmlWriter.setPrefix(prefix2, namespace2);

                } else {
                  xmlWriter.writeStartElement(namespace2, "QuickLinkData");
                }

              } else {
                xmlWriter.writeStartElement("QuickLinkData");
              }

              // write the nil attribute
              writeAttribute("xsi",
                "http://www.w3.org/2001/XMLSchema-instance", "nil", "true",
                xmlWriter);
              xmlWriter.writeEndElement();

            }
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
        parentQName, factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localQuickLinkDataTracker) {
        if (localQuickLinkData != null) {
          for (int i = 0; i < localQuickLinkData.length; i++) {

            if (localQuickLinkData[i] != null) {
              elementList
                .add(new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "QuickLinkData"));
              elementList.add(localQuickLinkData[i]);
            } else {

              elementList
                .add(new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "QuickLinkData"));
              elementList.add(null);

            }

          }
        } else {

          elementList
            .add(new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "QuickLinkData"));
          elementList.add(localQuickLinkData);

        }

      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static ArrayOfQuickLinkData parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        ArrayOfQuickLinkData object = new ArrayOfQuickLinkData();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"ArrayOfQuickLinkData".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (ArrayOfQuickLinkData) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();

          java.util.ArrayList list1 = new java.util.ArrayList();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "QuickLinkData").equals(reader.getName())) {



            // Process the array and step past its final element's end.

            if ("true".equals(reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "nil"))) {
              list1.add(null);
              reader.next();
            } else {
              list1.add(QuickLinkData.Factory.parse(reader));
            }
            // loop until we find a start element that is not part of this array
            boolean loopDone1 = false;
            while (!loopDone1) {
              // We should be at the end element, but make sure
              while (!reader.isEndElement())
                reader.next();
              // Step out of this element
              reader.next();
              // Step to next element event.
              while (!reader.isStartElement() && !reader.isEndElement())
                reader.next();
              if (reader.isEndElement()) {
                // two continuous end elements means we are exiting the xml
                // structure
                loopDone1 = true;
              } else {
                if (new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "QuickLinkData").equals(reader.getName())) {

                  if ("true".equals(reader.getAttributeValue(
                    "http://www.w3.org/2001/XMLSchema-instance", "nil"))) {
                    list1.add(null);
                    reader.next();
                  } else {
                    list1.add(QuickLinkData.Factory.parse(reader));
                  }
                } else {
                  loopDone1 = true;
                }
              }
            }
            // call the converter utility to convert and set the array
            object
              .setQuickLinkData((QuickLinkData[]) org.apache.axis2.databinding.utils.ConverterUtil
                .convertToArray(QuickLinkData.class, list1));

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class InCommonData implements
      org.apache.axis2.databinding.ADBBean {
    /*
     * This type was generated from the piece of schema that had name =
     * InCommonData Namespace URI =
     * http://microsoft.com/webservices/SharePointPortalServer/UserProfileService
     * Namespace Prefix = ns1
     */


    /**
     * field for Manager
     */

    protected ContactData localManager;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localManagerTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ContactData
     */
    public ContactData getManager() {
      return localManager;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Manager
     */
    public void setManager(ContactData param) {

      if (param != null) {
        // update the setting tracker
        localManagerTracker = true;
      } else {
        localManagerTracker = false;

      }

      this.localManager = param;


    }


    /**
     * field for Colleagues
     */

    protected ArrayOfContactData localColleagues;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localColleaguesTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ArrayOfContactData
     */
    public ArrayOfContactData getColleagues() {
      return localColleagues;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Colleagues
     */
    public void setColleagues(ArrayOfContactData param) {

      if (param != null) {
        // update the setting tracker
        localColleaguesTracker = true;
      } else {
        localColleaguesTracker = false;

      }

      this.localColleagues = param;


    }


    /**
     * field for Memberships
     */

    protected ArrayOfMembershipData localMemberships;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localMembershipsTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ArrayOfMembershipData
     */
    public ArrayOfMembershipData getMemberships() {
      return localMemberships;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Memberships
     */
    public void setMemberships(ArrayOfMembershipData param) {

      if (param != null) {
        // update the setting tracker
        localMembershipsTracker = true;
      } else {
        localMembershipsTracker = false;

      }

      this.localMemberships = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localManagerTracker) {
            if (localManager == null) {
              throw new RuntimeException("Manager cannot be null!!");
            }
            localManager
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "Manager"), factory).serialize(xmlWriter);
          }
          if (localColleaguesTracker) {
            if (localColleagues == null) {
              throw new RuntimeException("Colleagues cannot be null!!");
            }
            localColleagues
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "Colleagues"), factory).serialize(xmlWriter);
          }
          if (localMembershipsTracker) {
            if (localMemberships == null) {
              throw new RuntimeException("Memberships cannot be null!!");
            }
            localMemberships
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "Memberships"), factory).serialize(xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
        parentQName, factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localManagerTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "Manager"));


        if (localManager == null) {
          throw new RuntimeException("Manager cannot be null!!");
        }
        elementList.add(localManager);
      }
      if (localColleaguesTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "Colleagues"));


        if (localColleagues == null) {
          throw new RuntimeException("Colleagues cannot be null!!");
        }
        elementList.add(localColleagues);
      }
      if (localMembershipsTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "Memberships"));


        if (localMemberships == null) {
          throw new RuntimeException("Memberships cannot be null!!");
        }
        elementList.add(localMemberships);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static InCommonData parse(javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        InCommonData object = new InCommonData();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"InCommonData".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (InCommonData) ExtensionMapper.getTypeObject(nsUri,
                  type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Manager").equals(reader.getName())) {

            object.setManager(ContactData.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Colleagues").equals(reader.getName())) {

            object.setColleagues(ArrayOfContactData.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Memberships").equals(reader.getName())) {

            object.setMemberships(ArrayOfMembershipData.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class AddPinnedLinkResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "AddPinnedLinkResponse", "ns1");



    /**
     * field for AddPinnedLinkResult
     */

    protected PinnedLinkData localAddPinnedLinkResult;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAddPinnedLinkResultTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return PinnedLinkData
     */
    public PinnedLinkData getAddPinnedLinkResult() {
      return localAddPinnedLinkResult;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AddPinnedLinkResult
     */
    public void setAddPinnedLinkResult(PinnedLinkData param) {

      if (param != null) {
        // update the setting tracker
        localAddPinnedLinkResultTracker = true;
      } else {
        localAddPinnedLinkResultTracker = false;

      }

      this.localAddPinnedLinkResult = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAddPinnedLinkResultTracker) {
            if (localAddPinnedLinkResult == null) {
              throw new RuntimeException("AddPinnedLinkResult cannot be null!!");
            }
            localAddPinnedLinkResult
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "AddPinnedLinkResult"), factory).serialize(xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAddPinnedLinkResultTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "AddPinnedLinkResult"));


        if (localAddPinnedLinkResult == null) {
          throw new RuntimeException("AddPinnedLinkResult cannot be null!!");
        }
        elementList.add(localAddPinnedLinkResult);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static AddPinnedLinkResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        AddPinnedLinkResponse object = new AddPinnedLinkResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"AddPinnedLinkResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (AddPinnedLinkResponse) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "AddPinnedLinkResult").equals(reader.getName())) {

            object.setAddPinnedLinkResult(PinnedLinkData.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetCommonColleaguesResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetCommonColleaguesResponse", "ns1");



    /**
     * field for GetCommonColleaguesResult
     */

    protected ArrayOfContactData localGetCommonColleaguesResult;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localGetCommonColleaguesResultTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ArrayOfContactData
     */
    public ArrayOfContactData getGetCommonColleaguesResult() {
      return localGetCommonColleaguesResult;
    }



    /**
     * Auto generated setter method
     * 
     * @param param GetCommonColleaguesResult
     */
    public void setGetCommonColleaguesResult(ArrayOfContactData param) {

      if (param != null) {
        // update the setting tracker
        localGetCommonColleaguesResultTracker = true;
      } else {
        localGetCommonColleaguesResultTracker = false;

      }

      this.localGetCommonColleaguesResult = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localGetCommonColleaguesResultTracker) {
            if (localGetCommonColleaguesResult == null) {
              throw new RuntimeException(
                "GetCommonColleaguesResult cannot be null!!");
            }
            localGetCommonColleaguesResult
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "GetCommonColleaguesResult"), factory).serialize(xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localGetCommonColleaguesResultTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "GetCommonColleaguesResult"));


        if (localGetCommonColleaguesResult == null) {
          throw new RuntimeException(
            "GetCommonColleaguesResult cannot be null!!");
        }
        elementList.add(localGetCommonColleaguesResult);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetCommonColleaguesResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetCommonColleaguesResponse object = new GetCommonColleaguesResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetCommonColleaguesResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetCommonColleaguesResponse) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "GetCommonColleaguesResult").equals(reader.getName())) {

            object.setGetCommonColleaguesResult(ArrayOfContactData.Factory
              .parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class PropertyInfo implements
      org.apache.axis2.databinding.ADBBean {
    /*
     * This type was generated from the piece of schema that had name =
     * PropertyInfo Namespace URI =
     * http://microsoft.com/webservices/SharePointPortalServer/UserProfileService
     * Namespace Prefix = ns1
     */


    /**
     * field for Name
     */

    protected java.lang.String localName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getName() {
      return localName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Name
     */
    public void setName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localNameTracker = true;
      } else {
        localNameTracker = false;

      }

      this.localName = param;


    }


    /**
     * field for DisplayName
     */

    protected java.lang.String localDisplayName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localDisplayNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getDisplayName() {
      return localDisplayName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param DisplayName
     */
    public void setDisplayName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localDisplayNameTracker = true;
      } else {
        localDisplayNameTracker = false;

      }

      this.localDisplayName = param;


    }


    /**
     * field for Type
     */

    protected java.lang.String localType;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localTypeTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getType() {
      return localType;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Type
     */
    public void setType(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localTypeTracker = true;
      } else {
        localTypeTracker = false;

      }

      this.localType = param;


    }


    /**
     * field for IsMultiValue
     */

    protected boolean localIsMultiValue;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getIsMultiValue() {
      return localIsMultiValue;
    }



    /**
     * Auto generated setter method
     * 
     * @param param IsMultiValue
     */
    public void setIsMultiValue(boolean param) {

      this.localIsMultiValue = param;


    }


    /**
     * field for ChoiceType
     */

    protected ChoiceTypes localChoiceType;


    /**
     * Auto generated getter method
     * 
     * @return ChoiceTypes
     */
    public ChoiceTypes getChoiceType() {
      return localChoiceType;
    }



    /**
     * Auto generated setter method
     * 
     * @param param ChoiceType
     */
    public void setChoiceType(ChoiceTypes param) {

      this.localChoiceType = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "Name", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "Name");
              }

            } else {
              xmlWriter.writeStartElement("Name");
            }


            if (localName == null) {
              // write the nil attribute

              throw new RuntimeException("Name cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localName));

            }

            xmlWriter.writeEndElement();
          }
          if (localDisplayNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "DisplayName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "DisplayName");
              }

            } else {
              xmlWriter.writeStartElement("DisplayName");
            }


            if (localDisplayName == null) {
              // write the nil attribute

              throw new RuntimeException("DisplayName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localDisplayName));

            }

            xmlWriter.writeEndElement();
          }
          if (localTypeTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "Type", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "Type");
              }

            } else {
              xmlWriter.writeStartElement("Type");
            }


            if (localType == null) {
              // write the nil attribute

              throw new RuntimeException("Type cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localType));

            }

            xmlWriter.writeEndElement();
          }
          namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
          if (!namespace.equals("")) {
            prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
              prefix = org.apache.axis2.databinding.utils.BeanUtil
                .getUniquePrefix();

              xmlWriter.writeStartElement(prefix, "IsMultiValue", namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);

            } else {
              xmlWriter.writeStartElement(namespace, "IsMultiValue");
            }

          } else {
            xmlWriter.writeStartElement("IsMultiValue");
          }

          xmlWriter
            .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(localIsMultiValue));

          xmlWriter.writeEndElement();

          if (localChoiceType == null) {
            throw new RuntimeException("ChoiceType cannot be null!!");
          }
          localChoiceType
            .getOMElement(
              new javax.xml.namespace.QName(
                "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                "ChoiceType"), factory).serialize(xmlWriter);


          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(
        parentQName, factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "Name"));

        if (localName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localName));
        } else {
          throw new RuntimeException("Name cannot be null!!");
        }
      }
      if (localDisplayNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "DisplayName"));

        if (localDisplayName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localDisplayName));
        } else {
          throw new RuntimeException("DisplayName cannot be null!!");
        }
      }
      if (localTypeTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "Type"));

        if (localType != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localType));
        } else {
          throw new RuntimeException("Type cannot be null!!");
        }
      }
      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "IsMultiValue"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString(localIsMultiValue));

      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "ChoiceType"));


      if (localChoiceType == null) {
        throw new RuntimeException("ChoiceType cannot be null!!");
      }
      elementList.add(localChoiceType);


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static PropertyInfo parse(javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        PropertyInfo object = new PropertyInfo();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"PropertyInfo".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (PropertyInfo) ExtensionMapper.getTypeObject(nsUri,
                  type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Name").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setName(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "DisplayName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setDisplayName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "Type").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setType(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "IsMultiValue").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setIsMultiValue(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "ChoiceType").equals(reader.getName())) {

            object.setChoiceType(ChoiceTypes.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetCommonMembershipsResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetCommonMembershipsResponse", "ns1");



    /**
     * field for GetCommonMembershipsResult
     */

    protected ArrayOfMembershipData localGetCommonMembershipsResult;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localGetCommonMembershipsResultTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return ArrayOfMembershipData
     */
    public ArrayOfMembershipData getGetCommonMembershipsResult() {
      return localGetCommonMembershipsResult;
    }



    /**
     * Auto generated setter method
     * 
     * @param param GetCommonMembershipsResult
     */
    public void setGetCommonMembershipsResult(ArrayOfMembershipData param) {

      if (param != null) {
        // update the setting tracker
        localGetCommonMembershipsResultTracker = true;
      } else {
        localGetCommonMembershipsResultTracker = false;

      }

      this.localGetCommonMembershipsResult = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localGetCommonMembershipsResultTracker) {
            if (localGetCommonMembershipsResult == null) {
              throw new RuntimeException(
                "GetCommonMembershipsResult cannot be null!!");
            }
            localGetCommonMembershipsResult
              .getOMElement(
                new javax.xml.namespace.QName(
                  "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                  "GetCommonMembershipsResult"), factory).serialize(xmlWriter);
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localGetCommonMembershipsResultTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "GetCommonMembershipsResult"));


        if (localGetCommonMembershipsResult == null) {
          throw new RuntimeException(
            "GetCommonMembershipsResult cannot be null!!");
        }
        elementList.add(localGetCommonMembershipsResult);
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetCommonMembershipsResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetCommonMembershipsResponse object = new GetCommonMembershipsResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetCommonMembershipsResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetCommonMembershipsResponse) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "GetCommonMembershipsResult").equals(reader.getName())) {

            object.setGetCommonMembershipsResult(ArrayOfMembershipData.Factory
              .parse(reader));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class GetCommonColleagues implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "GetCommonColleagues", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }

          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }

      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static GetCommonColleagues parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        GetCommonColleagues object = new GetCommonColleagues();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"GetCommonColleagues".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (GetCommonColleagues) ExtensionMapper.getTypeObject(
                  nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class ChoiceTypes implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "ChoiceTypes", "ns1");



    /**
     * field for ChoiceTypes
     */

    protected java.lang.String localChoiceTypes;

    private static java.util.HashMap _table_ = new java.util.HashMap();

    // Constructor
    protected ChoiceTypes(java.lang.String value) {
      localChoiceTypes = value;

      _table_.put(localChoiceTypes, this);


    }


    public static final java.lang.String _Off = org.apache.axis2.databinding.utils.ConverterUtil
      .convertToString("Off");

    public static final java.lang.String _None = org.apache.axis2.databinding.utils.ConverterUtil
      .convertToString("None");

    public static final java.lang.String _Open = org.apache.axis2.databinding.utils.ConverterUtil
      .convertToString("Open");

    public static final java.lang.String _Closed = org.apache.axis2.databinding.utils.ConverterUtil
      .convertToString("Closed");

    public static final ChoiceTypes Off = new ChoiceTypes(_Off);

    public static final ChoiceTypes None = new ChoiceTypes(_None);

    public static final ChoiceTypes Open = new ChoiceTypes(_Open);

    public static final ChoiceTypes Closed = new ChoiceTypes(_Closed);


    public java.lang.String getValue() {
      return localChoiceTypes;
    }

    public static ChoiceTypes fromValue(java.lang.String value)
        throws java.lang.IllegalArgumentException {
      ChoiceTypes enumeration = (ChoiceTypes)

      _table_.get(value);


      if (enumeration == null)
        throw new java.lang.IllegalArgumentException();
      return enumeration;
    }

    public static ChoiceTypes fromString(java.lang.String value)
        throws java.lang.IllegalArgumentException {
      try {

        return fromValue(new java.lang.String(value));


      } catch (java.lang.Exception e) {
        throw new java.lang.IllegalArgumentException();
      }
    }

    public boolean equals(java.lang.Object obj) {
      return (obj == this);
    }

    public int hashCode() {
      return toString().hashCode();
    }

    public java.lang.String toString() {

      return localChoiceTypes.toString();


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {


          // We can safely assume an element has only one type associated with
          // it

          java.lang.String namespace = parentQName.getNamespaceURI();
          java.lang.String localName = parentQName.getLocalPart();

          if (!namespace.equals("")) {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
              prefix = org.apache.axis2.databinding.utils.BeanUtil
                .getUniquePrefix();

              xmlWriter.writeStartElement(prefix, localName, namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);

            } else {
              xmlWriter.writeStartElement(namespace, localName);
            }

          } else {
            xmlWriter.writeStartElement(localName);
          }

          if (localChoiceTypes == null) {

            throw new RuntimeException("testValue cannot be null !!");

          } else {

            xmlWriter
              .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(localChoiceTypes));

          }

          xmlWriter.writeEndElement();


        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      // We can safely assume an element has only one type associated with it
      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        MY_QNAME,
        new java.lang.Object[]{
          org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
          org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localChoiceTypes)}, null);

    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static ChoiceTypes parse(javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        ChoiceTypes object = null;
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          while (!reader.isEndElement()) {
            if (reader.isStartElement() || reader.hasText()) {

              java.lang.String content = reader.getElementText();

              object = ChoiceTypes.fromString(content);

            } else
              reader.next();
          } // end of while loop



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class UpdateColleaguePrivacyResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "UpdateColleaguePrivacyResponse", "ns1");



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }



          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();



      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static UpdateColleaguePrivacyResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        UpdateColleaguePrivacyResponse object = new UpdateColleaguePrivacyResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"UpdateColleaguePrivacyResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (UpdateColleaguePrivacyResponse) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class RemoveAllColleaguesResponse implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "RemoveAllColleaguesResponse", "ns1");



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }



          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();



      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static RemoveAllColleaguesResponse parse(
          javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
        RemoveAllColleaguesResponse object = new RemoveAllColleaguesResponse();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"RemoveAllColleaguesResponse".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (RemoveAllColleaguesResponse) ExtensionMapper
                  .getTypeObject(nsUri, type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  public static class AddColleague implements
      org.apache.axis2.databinding.ADBBean {

    public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
      "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
      "AddColleague", "ns1");



    /**
     * field for AccountName
     */

    protected java.lang.String localAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getAccountName() {
      return localAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param AccountName
     */
    public void setAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localAccountNameTracker = true;
      } else {
        localAccountNameTracker = false;

      }

      this.localAccountName = param;


    }


    /**
     * field for ColleagueAccountName
     */

    protected java.lang.String localColleagueAccountName;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localColleagueAccountNameTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getColleagueAccountName() {
      return localColleagueAccountName;
    }



    /**
     * Auto generated setter method
     * 
     * @param param ColleagueAccountName
     */
    public void setColleagueAccountName(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localColleagueAccountNameTracker = true;
      } else {
        localColleagueAccountNameTracker = false;

      }

      this.localColleagueAccountName = param;


    }


    /**
     * field for Group
     */

    protected java.lang.String localGroup;

    /*
     * This tracker boolean wil be used to detect whether the user called the
     * set method for this attribute. It will be used to determine whether to
     * include this field in the serialized XML
     */
    protected boolean localGroupTracker = false;


    /**
     * Auto generated getter method
     * 
     * @return java.lang.String
     */
    public java.lang.String getGroup() {
      return localGroup;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Group
     */
    public void setGroup(java.lang.String param) {

      if (param != null) {
        // update the setting tracker
        localGroupTracker = true;
      } else {
        localGroupTracker = false;

      }

      this.localGroup = param;


    }


    /**
     * field for Privacy
     */

    protected Privacy localPrivacy;


    /**
     * Auto generated getter method
     * 
     * @return Privacy
     */
    public Privacy getPrivacy() {
      return localPrivacy;
    }



    /**
     * Auto generated setter method
     * 
     * @param param Privacy
     */
    public void setPrivacy(Privacy param) {

      this.localPrivacy = param;


    }


    /**
     * field for IsInWorkGroup
     */

    protected boolean localIsInWorkGroup;


    /**
     * Auto generated getter method
     * 
     * @return boolean
     */
    public boolean getIsInWorkGroup() {
      return localIsInWorkGroup;
    }



    /**
     * Auto generated setter method
     * 
     * @param param IsInWorkGroup
     */
    public void setIsInWorkGroup(boolean param) {

      this.localIsInWorkGroup = param;


    }



    /**
     * 
     * @param parentQName
     * @param factory
     * @return org.apache.axiom.om.OMElement
     */
    public org.apache.axiom.om.OMElement getOMElement(
        final javax.xml.namespace.QName parentQName,
        final org.apache.axiom.om.OMFactory factory) {


      org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
        this, parentQName) {

        public void serialize(javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {



          java.lang.String prefix = parentQName.getPrefix();
          java.lang.String namespace = parentQName.getNamespaceURI();

          if (namespace != null) {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
              xmlWriter
                .writeStartElement(namespace, parentQName.getLocalPart());
            } else {
              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();
              }

              xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(),
                namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);
            }
          } else {
            xmlWriter.writeStartElement(parentQName.getLocalPart());
          }


          if (localAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "accountName", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "accountName");
              }

            } else {
              xmlWriter.writeStartElement("accountName");
            }


            if (localAccountName == null) {
              // write the nil attribute

              throw new RuntimeException("accountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localAccountName));

            }

            xmlWriter.writeEndElement();
          }
          if (localColleagueAccountNameTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "colleagueAccountName",
                  namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "colleagueAccountName");
              }

            } else {
              xmlWriter.writeStartElement("colleagueAccountName");
            }


            if (localColleagueAccountName == null) {
              // write the nil attribute

              throw new RuntimeException(
                "colleagueAccountName cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localColleagueAccountName));

            }

            xmlWriter.writeEndElement();
          }
          if (localGroupTracker) {
            namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
            if (!namespace.equals("")) {
              prefix = xmlWriter.getPrefix(namespace);

              if (prefix == null) {
                prefix = org.apache.axis2.databinding.utils.BeanUtil
                  .getUniquePrefix();

                xmlWriter.writeStartElement(prefix, "group", namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);

              } else {
                xmlWriter.writeStartElement(namespace, "group");
              }

            } else {
              xmlWriter.writeStartElement("group");
            }


            if (localGroup == null) {
              // write the nil attribute

              throw new RuntimeException("group cannot be null!!");

            } else {


              xmlWriter
                .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
                  .convertToString(localGroup));

            }

            xmlWriter.writeEndElement();
          }
          if (localPrivacy == null) {
            throw new RuntimeException("privacy cannot be null!!");
          }
          localPrivacy
            .getOMElement(
              new javax.xml.namespace.QName(
                "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
                "privacy"), factory).serialize(xmlWriter);

          namespace = "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService";
          if (!namespace.equals("")) {
            prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
              prefix = org.apache.axis2.databinding.utils.BeanUtil
                .getUniquePrefix();

              xmlWriter.writeStartElement(prefix, "isInWorkGroup", namespace);
              xmlWriter.writeNamespace(prefix, namespace);
              xmlWriter.setPrefix(prefix, namespace);

            } else {
              xmlWriter.writeStartElement(namespace, "isInWorkGroup");
            }

          } else {
            xmlWriter.writeStartElement("isInWorkGroup");
          }

          xmlWriter
            .writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(localIsInWorkGroup));

          xmlWriter.writeEndElement();


          xmlWriter.writeEndElement();



        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (xmlWriter.getPrefix(namespace) == null) {
            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);

          }

          xmlWriter.writeAttribute(namespace, attName, attValue);

        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
          if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attValue);
          } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attValue);
          }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
          java.lang.String prefix = xmlWriter.getPrefix(namespace);

          if (prefix == null) {
            prefix = createPrefix();

            while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {
              prefix = createPrefix();
            }

            xmlWriter.writeNamespace(prefix, namespace);
            xmlWriter.setPrefix(prefix, namespace);
          }

          return prefix;
        }

        /**
         * Create a prefix
         */
        private java.lang.String createPrefix() {
          return "ns" + (int) Math.random();
        }
      };


      return new org.apache.axiom.om.impl.llom.OMSourcedElementImpl(MY_QNAME,
        factory, dataSource);

    }


    /**
     * databinding method to get an XML representation of this object
     * 
     */
    public javax.xml.stream.XMLStreamReader getPullParser(
        javax.xml.namespace.QName qName) {



      java.util.ArrayList elementList = new java.util.ArrayList();
      java.util.ArrayList attribList = new java.util.ArrayList();

      if (localAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "accountName"));

        if (localAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localAccountName));
        } else {
          throw new RuntimeException("accountName cannot be null!!");
        }
      }
      if (localColleagueAccountNameTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "colleagueAccountName"));

        if (localColleagueAccountName != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localColleagueAccountName));
        } else {
          throw new RuntimeException("colleagueAccountName cannot be null!!");
        }
      }
      if (localGroupTracker) {
        elementList
          .add(new javax.xml.namespace.QName(
            "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
            "group"));

        if (localGroup != null) {
          elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
            .convertToString(localGroup));
        } else {
          throw new RuntimeException("group cannot be null!!");
        }
      }
      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "privacy"));


      if (localPrivacy == null) {
        throw new RuntimeException("privacy cannot be null!!");
      }
      elementList.add(localPrivacy);

      elementList
        .add(new javax.xml.namespace.QName(
          "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
          "isInWorkGroup"));

      elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
        .convertToString(localIsInWorkGroup));


      return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
        qName, elementList.toArray(), attribList.toArray());



    }



    /**
     * Factory class that keeps the parse method
     */
    public static class Factory {


      /**
       * static method to create the object Precondition: If this object is an
       * element, the current or next start element starts this object and any
       * intervening reader events are ignorable If this object is not an
       * element, it is a complex type and the reader is at the event just after
       * the outer start element Postcondition: If this object is an element,
       * the reader is positioned at its end element If this object is a complex
       * type, the reader is positioned at the end element of its outer element
       */
      public static AddColleague parse(javax.xml.stream.XMLStreamReader reader)
          throws java.lang.Exception {
        AddColleague object = new AddColleague();
        int event;
        try {

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


          if (reader.getAttributeValue(
            "http://www.w3.org/2001/XMLSchema-instance", "type") != null) {
            java.lang.String fullTypeName = reader.getAttributeValue(
              "http://www.w3.org/2001/XMLSchema-instance", "type");
            if (fullTypeName != null) {
              java.lang.String nsPrefix = fullTypeName.substring(0,
                fullTypeName.indexOf(":"));
              nsPrefix = nsPrefix == null ? "" : nsPrefix;

              java.lang.String type = fullTypeName.substring(fullTypeName
                .indexOf(":") + 1);
              if (!"AddColleague".equals(type)) {
                // find namespace for the prefix
                java.lang.String nsUri = reader.getNamespaceContext()
                  .getNamespaceURI(nsPrefix);
                return (AddColleague) ExtensionMapper.getTypeObject(nsUri,
                  type, reader);
              }

            }

          }



          // Note all attributes that were handled. Used to differ normal
          // attributes
          // from anyAttributes.
          java.util.Vector handledAttributes = new java.util.Vector();


          boolean isReaderMTOMAware = false;

          try {
            isReaderMTOMAware = java.lang.Boolean.TRUE
              .equals(reader
                .getProperty(org.apache.axiom.om.OMConstants.IS_DATA_HANDLERS_AWARE));
          } catch (java.lang.IllegalArgumentException e) {
            isReaderMTOMAware = false;
          }



          reader.next();


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "accountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "colleagueAccountName").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setColleagueAccountName(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "group").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object.setGroup(org.apache.axis2.databinding.utils.ConverterUtil
              .convertToString(content));

            reader.next();

          } // End of if for expected property start element


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "privacy").equals(reader.getName())) {

            object.setPrivacy(Privacy.Factory.parse(reader));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }


          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();

          if (reader.isStartElement()
            && new javax.xml.namespace.QName(
              "http://microsoft.com/webservices/SharePointPortalServer/UserProfileService",
              "isInWorkGroup").equals(reader.getName())) {

            java.lang.String content = reader.getElementText();

            object
              .setIsInWorkGroup(org.apache.axis2.databinding.utils.ConverterUtil
                .convertToBoolean(content));

            reader.next();

          } // End of if for expected property start element

          else {
            // A start element we are not expecting indicates an invalid
            // parameter was passed
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());
          }

          while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();
          if (reader.isStartElement())
            // A start element we are not expecting indicates a trailing invalid
            // property
            throw new java.lang.RuntimeException("Unexpected subelement "
              + reader.getLocalName());



        } catch (javax.xml.stream.XMLStreamException e) {
          throw new java.lang.Exception(e);
        }

        return object;
      }

    }// end of factory class



  }


  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetUserProfileCount param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.GetUserProfileCount.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetUserProfileCountResponse param,
      boolean optimizeContent) {

    return param
      .getOMElement(
        UserProfileServiceStub.GetUserProfileCountResponse.MY_QNAME,
        org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.UpdatePinnedLink param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.UpdatePinnedLink.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.UpdatePinnedLinkResponse param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.UpdatePinnedLinkResponse.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetUserLinks param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.GetUserLinks.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetUserLinksResponse param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.GetUserLinksResponse.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.CreateUserProfileByAccountName param,
      boolean optimizeContent) {

    return param
      .getOMElement(
        UserProfileServiceStub.CreateUserProfileByAccountName.MY_QNAME,
        org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.CreateUserProfileByAccountNameResponse param,
      boolean optimizeContent) {

    return param
      .getOMElement(
        UserProfileServiceStub.CreateUserProfileByAccountNameResponse.MY_QNAME,
        org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.AddMembership param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.AddMembership.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.AddMembershipResponse param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.AddMembershipResponse.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetUserColleagues param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.GetUserColleagues.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetUserColleaguesResponse param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.GetUserColleaguesResponse.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetPropertyChoiceList param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.GetPropertyChoiceList.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetPropertyChoiceListResponse param,
      boolean optimizeContent) {

    return param
      .getOMElement(
        UserProfileServiceStub.GetPropertyChoiceListResponse.MY_QNAME,
        org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.AddLink param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.AddLink.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.AddLinkResponse param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.AddLinkResponse.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetCommonMemberships param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.GetCommonMemberships.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetCommonMembershipsResponse param,
      boolean optimizeContent) {

    return param
      .getOMElement(
        UserProfileServiceStub.GetCommonMembershipsResponse.MY_QNAME,
        org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.RemoveColleague param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.RemoveColleague.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.RemoveColleagueResponse param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.RemoveColleagueResponse.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetUserMemberships param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.GetUserMemberships.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetUserMembershipsResponse param,
      boolean optimizeContent) {

    return param
      .getOMElement(
        UserProfileServiceStub.GetUserMembershipsResponse.MY_QNAME,
        org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.RemovePinnedLink param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.RemovePinnedLink.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.RemovePinnedLinkResponse param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.RemovePinnedLinkResponse.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetInCommon param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.GetInCommon.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetInCommonResponse param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.GetInCommonResponse.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.RemoveMembership param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.RemoveMembership.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.RemoveMembershipResponse param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.RemoveMembershipResponse.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.RemoveAllPinnedLinks param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.RemoveAllPinnedLinks.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.RemoveAllPinnedLinksResponse param,
      boolean optimizeContent) {

    return param
      .getOMElement(
        UserProfileServiceStub.RemoveAllPinnedLinksResponse.MY_QNAME,
        org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetCommonColleagues param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.GetCommonColleagues.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetCommonColleaguesResponse param,
      boolean optimizeContent) {

    return param
      .getOMElement(
        UserProfileServiceStub.GetCommonColleaguesResponse.MY_QNAME,
        org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.RemoveAllMemberships param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.RemoveAllMemberships.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.RemoveAllMembershipsResponse param,
      boolean optimizeContent) {

    return param
      .getOMElement(
        UserProfileServiceStub.RemoveAllMembershipsResponse.MY_QNAME,
        org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.UpdateMembershipPrivacy param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.UpdateMembershipPrivacy.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.UpdateMembershipPrivacyResponse param,
      boolean optimizeContent) {

    return param
      .getOMElement(
        UserProfileServiceStub.UpdateMembershipPrivacyResponse.MY_QNAME,
        org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetUserProfileByGuid param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.GetUserProfileByGuid.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetUserProfileByGuidResponse param,
      boolean optimizeContent) {

    return param
      .getOMElement(
        UserProfileServiceStub.GetUserProfileByGuidResponse.MY_QNAME,
        org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.UpdateColleaguePrivacy param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.UpdateColleaguePrivacy.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.UpdateColleaguePrivacyResponse param,
      boolean optimizeContent) {

    return param
      .getOMElement(
        UserProfileServiceStub.UpdateColleaguePrivacyResponse.MY_QNAME,
        org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.ModifyUserPropertyByAccountName param,
      boolean optimizeContent) {

    return param
      .getOMElement(
        UserProfileServiceStub.ModifyUserPropertyByAccountName.MY_QNAME,
        org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.ModifyUserPropertyByAccountNameResponse param,
      boolean optimizeContent) {

    return param
      .getOMElement(
        UserProfileServiceStub.ModifyUserPropertyByAccountNameResponse.MY_QNAME,
        org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.RemoveAllLinks param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.RemoveAllLinks.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.RemoveAllLinksResponse param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.RemoveAllLinksResponse.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetUserProfileSchema param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.GetUserProfileSchema.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetUserProfileSchemaResponse param,
      boolean optimizeContent) {

    return param
      .getOMElement(
        UserProfileServiceStub.GetUserProfileSchemaResponse.MY_QNAME,
        org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.CreateMemberGroup param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.CreateMemberGroup.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.CreateMemberGroupResponse param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.CreateMemberGroupResponse.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetUserPinnedLinks param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.GetUserPinnedLinks.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetUserPinnedLinksResponse param,
      boolean optimizeContent) {

    return param
      .getOMElement(
        UserProfileServiceStub.GetUserPinnedLinksResponse.MY_QNAME,
        org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.RemoveLink param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.RemoveLink.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.RemoveLinkResponse param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.RemoveLinkResponse.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.AddPinnedLink param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.AddPinnedLink.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.AddPinnedLinkResponse param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.AddPinnedLinkResponse.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.UpdateLink param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.UpdateLink.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.UpdateLinkResponse param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.UpdateLinkResponse.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.RemoveAllColleagues param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.RemoveAllColleagues.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.RemoveAllColleaguesResponse param,
      boolean optimizeContent) {

    return param
      .getOMElement(
        UserProfileServiceStub.RemoveAllColleaguesResponse.MY_QNAME,
        org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetCommonManager param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.GetCommonManager.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetCommonManagerResponse param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.GetCommonManagerResponse.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetUserProfileByName param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.GetUserProfileByName.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetUserProfileByNameResponse param,
      boolean optimizeContent) {

    return param
      .getOMElement(
        UserProfileServiceStub.GetUserProfileByNameResponse.MY_QNAME,
        org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetUserProfileByIndex param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.GetUserProfileByIndex.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.GetUserProfileByIndexResponse param,
      boolean optimizeContent) {

    return param
      .getOMElement(
        UserProfileServiceStub.GetUserProfileByIndexResponse.MY_QNAME,
        org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.AddColleague param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.AddColleague.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }

  private org.apache.axiom.om.OMElement toOM(
      UserProfileServiceStub.AddColleagueResponse param,
      boolean optimizeContent) {

    return param.getOMElement(
      UserProfileServiceStub.AddColleagueResponse.MY_QNAME,
      org.apache.axiom.om.OMAbstractFactory.getOMFactory());


  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.GetUserProfileCount param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.GetUserProfileCount.MY_QNAME,
        factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.UpdatePinnedLink param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.UpdatePinnedLink.MY_QNAME,
        factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.GetUserLinks param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.GetUserLinks.MY_QNAME, factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.CreateUserProfileByAccountName param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope
      .getBody()
      .addChild(
        param
          .getOMElement(
            UserProfileServiceStub.CreateUserProfileByAccountName.MY_QNAME,
            factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.AddMembership param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.AddMembership.MY_QNAME, factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.GetUserColleagues param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.GetUserColleagues.MY_QNAME,
        factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.GetPropertyChoiceList param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.GetPropertyChoiceList.MY_QNAME,
        factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.AddLink param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.AddLink.MY_QNAME, factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.GetCommonMemberships param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.GetCommonMemberships.MY_QNAME,
        factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.RemoveColleague param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param
        .getOMElement(
          UserProfileServiceStub.RemoveColleague.MY_QNAME,
          factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.GetUserMemberships param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.GetUserMemberships.MY_QNAME,
        factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.RemovePinnedLink param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.RemovePinnedLink.MY_QNAME,
        factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.GetInCommon param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.GetInCommon.MY_QNAME, factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.RemoveMembership param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.RemoveMembership.MY_QNAME,
        factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.RemoveAllPinnedLinks param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.RemoveAllPinnedLinks.MY_QNAME,
        factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.GetCommonColleagues param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.GetCommonColleagues.MY_QNAME,
        factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.RemoveAllMemberships param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.RemoveAllMemberships.MY_QNAME,
        factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.UpdateMembershipPrivacy param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.UpdateMembershipPrivacy.MY_QNAME,
        factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.GetUserProfileByGuid param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.GetUserProfileByGuid.MY_QNAME,
        factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.UpdateColleaguePrivacy param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.UpdateColleaguePrivacy.MY_QNAME,
        factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.ModifyUserPropertyByAccountName param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope
      .getBody()
      .addChild(
        param
          .getOMElement(
            UserProfileServiceStub.ModifyUserPropertyByAccountName.MY_QNAME,
            factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.RemoveAllLinks param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody()
      .addChild(
        param.getOMElement(
          UserProfileServiceStub.RemoveAllLinks.MY_QNAME,
          factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.GetUserProfileSchema param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.GetUserProfileSchema.MY_QNAME,
        factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.CreateMemberGroup param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.CreateMemberGroup.MY_QNAME,
        factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.GetUserPinnedLinks param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.GetUserPinnedLinks.MY_QNAME,
        factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.RemoveLink param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.RemoveLink.MY_QNAME, factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.AddPinnedLink param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.AddPinnedLink.MY_QNAME, factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.UpdateLink param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.UpdateLink.MY_QNAME, factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.RemoveAllColleagues param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.RemoveAllColleagues.MY_QNAME,
        factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.GetCommonManager param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.GetCommonManager.MY_QNAME,
        factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.GetUserProfileByName param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.GetUserProfileByName.MY_QNAME,
        factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.GetUserProfileByIndex param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.GetUserProfileByIndex.MY_QNAME,
        factory));

    return emptyEnvelope;
  }



  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory,
      UserProfileServiceStub.AddColleague param,
      boolean optimizeContent) {
    org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
      .getDefaultEnvelope();

    emptyEnvelope.getBody().addChild(
      param.getOMElement(
        UserProfileServiceStub.AddColleague.MY_QNAME, factory));

    return emptyEnvelope;
  }



  /**
   * get the default envelope
   */
  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
      org.apache.axiom.soap.SOAPFactory factory) {
    return factory.getDefaultEnvelope();
  }


  private java.lang.Object fromOM(org.apache.axiom.om.OMElement param,
      java.lang.Class type, java.util.Map extraNamespaces) {

    try {

      if (UserProfileServiceStub.GetUserProfileCount.class
        .equals(type)) {

        return UserProfileServiceStub.GetUserProfileCount.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetUserProfileCountResponse.class
        .equals(type)) {

        return UserProfileServiceStub.GetUserProfileCountResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.UpdatePinnedLink.class
        .equals(type)) {

        return UserProfileServiceStub.UpdatePinnedLink.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.UpdatePinnedLinkResponse.class
        .equals(type)) {

        return UserProfileServiceStub.UpdatePinnedLinkResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetUserLinks.class.equals(type)) {

        return UserProfileServiceStub.GetUserLinks.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetUserLinksResponse.class
        .equals(type)) {

        return UserProfileServiceStub.GetUserLinksResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.CreateUserProfileByAccountName.class
        .equals(type)) {

        return UserProfileServiceStub.CreateUserProfileByAccountName.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.CreateUserProfileByAccountNameResponse.class
        .equals(type)) {

        return UserProfileServiceStub.CreateUserProfileByAccountNameResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.AddMembership.class
        .equals(type)) {

        return UserProfileServiceStub.AddMembership.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.AddMembershipResponse.class
        .equals(type)) {

        return UserProfileServiceStub.AddMembershipResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetUserColleagues.class
        .equals(type)) {

        return UserProfileServiceStub.GetUserColleagues.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetUserColleaguesResponse.class
        .equals(type)) {

        return UserProfileServiceStub.GetUserColleaguesResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetPropertyChoiceList.class
        .equals(type)) {

        return UserProfileServiceStub.GetPropertyChoiceList.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetPropertyChoiceListResponse.class
        .equals(type)) {

        return UserProfileServiceStub.GetPropertyChoiceListResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.AddLink.class.equals(type)) {

        return UserProfileServiceStub.AddLink.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.AddLinkResponse.class
        .equals(type)) {

        return UserProfileServiceStub.AddLinkResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetCommonMemberships.class
        .equals(type)) {

        return UserProfileServiceStub.GetCommonMemberships.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetCommonMembershipsResponse.class
        .equals(type)) {

        return UserProfileServiceStub.GetCommonMembershipsResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.RemoveColleague.class
        .equals(type)) {

        return UserProfileServiceStub.RemoveColleague.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.RemoveColleagueResponse.class
        .equals(type)) {

        return UserProfileServiceStub.RemoveColleagueResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetUserMemberships.class
        .equals(type)) {

        return UserProfileServiceStub.GetUserMemberships.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetUserMembershipsResponse.class
        .equals(type)) {

        return UserProfileServiceStub.GetUserMembershipsResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.RemovePinnedLink.class
        .equals(type)) {

        return UserProfileServiceStub.RemovePinnedLink.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.RemovePinnedLinkResponse.class
        .equals(type)) {

        return UserProfileServiceStub.RemovePinnedLinkResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetInCommon.class.equals(type)) {

        return UserProfileServiceStub.GetInCommon.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetInCommonResponse.class
        .equals(type)) {

        return UserProfileServiceStub.GetInCommonResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.RemoveMembership.class
        .equals(type)) {

        return UserProfileServiceStub.RemoveMembership.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.RemoveMembershipResponse.class
        .equals(type)) {

        return UserProfileServiceStub.RemoveMembershipResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.RemoveAllPinnedLinks.class
        .equals(type)) {

        return UserProfileServiceStub.RemoveAllPinnedLinks.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.RemoveAllPinnedLinksResponse.class
        .equals(type)) {

        return UserProfileServiceStub.RemoveAllPinnedLinksResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetCommonColleagues.class
        .equals(type)) {

        return UserProfileServiceStub.GetCommonColleagues.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetCommonColleaguesResponse.class
        .equals(type)) {

        return UserProfileServiceStub.GetCommonColleaguesResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.RemoveAllMemberships.class
        .equals(type)) {

        return UserProfileServiceStub.RemoveAllMemberships.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.RemoveAllMembershipsResponse.class
        .equals(type)) {

        return UserProfileServiceStub.RemoveAllMembershipsResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.UpdateMembershipPrivacy.class
        .equals(type)) {

        return UserProfileServiceStub.UpdateMembershipPrivacy.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.UpdateMembershipPrivacyResponse.class
        .equals(type)) {

        return UserProfileServiceStub.UpdateMembershipPrivacyResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetUserProfileByGuid.class
        .equals(type)) {

        return UserProfileServiceStub.GetUserProfileByGuid.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetUserProfileByGuidResponse.class
        .equals(type)) {

        return UserProfileServiceStub.GetUserProfileByGuidResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.UpdateColleaguePrivacy.class
        .equals(type)) {

        return UserProfileServiceStub.UpdateColleaguePrivacy.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.UpdateColleaguePrivacyResponse.class
        .equals(type)) {

        return UserProfileServiceStub.UpdateColleaguePrivacyResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.ModifyUserPropertyByAccountName.class
        .equals(type)) {

        return UserProfileServiceStub.ModifyUserPropertyByAccountName.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.ModifyUserPropertyByAccountNameResponse.class
        .equals(type)) {

        return UserProfileServiceStub.ModifyUserPropertyByAccountNameResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.RemoveAllLinks.class
        .equals(type)) {

        return UserProfileServiceStub.RemoveAllLinks.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.RemoveAllLinksResponse.class
        .equals(type)) {

        return UserProfileServiceStub.RemoveAllLinksResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetUserProfileSchema.class
        .equals(type)) {

        return UserProfileServiceStub.GetUserProfileSchema.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetUserProfileSchemaResponse.class
        .equals(type)) {

        return UserProfileServiceStub.GetUserProfileSchemaResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.CreateMemberGroup.class
        .equals(type)) {

        return UserProfileServiceStub.CreateMemberGroup.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.CreateMemberGroupResponse.class
        .equals(type)) {

        return UserProfileServiceStub.CreateMemberGroupResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetUserPinnedLinks.class
        .equals(type)) {

        return UserProfileServiceStub.GetUserPinnedLinks.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetUserPinnedLinksResponse.class
        .equals(type)) {

        return UserProfileServiceStub.GetUserPinnedLinksResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.RemoveLink.class.equals(type)) {

        return UserProfileServiceStub.RemoveLink.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.RemoveLinkResponse.class
        .equals(type)) {

        return UserProfileServiceStub.RemoveLinkResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.AddPinnedLink.class
        .equals(type)) {

        return UserProfileServiceStub.AddPinnedLink.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.AddPinnedLinkResponse.class
        .equals(type)) {

        return UserProfileServiceStub.AddPinnedLinkResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.UpdateLink.class.equals(type)) {

        return UserProfileServiceStub.UpdateLink.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.UpdateLinkResponse.class
        .equals(type)) {

        return UserProfileServiceStub.UpdateLinkResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.RemoveAllColleagues.class
        .equals(type)) {

        return UserProfileServiceStub.RemoveAllColleagues.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.RemoveAllColleaguesResponse.class
        .equals(type)) {

        return UserProfileServiceStub.RemoveAllColleaguesResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetCommonManager.class
        .equals(type)) {

        return UserProfileServiceStub.GetCommonManager.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetCommonManagerResponse.class
        .equals(type)) {

        return UserProfileServiceStub.GetCommonManagerResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetUserProfileByName.class
        .equals(type)) {

        return UserProfileServiceStub.GetUserProfileByName.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetUserProfileByNameResponse.class
        .equals(type)) {

        return UserProfileServiceStub.GetUserProfileByNameResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetUserProfileByIndex.class
        .equals(type)) {

        return UserProfileServiceStub.GetUserProfileByIndex.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.GetUserProfileByIndexResponse.class
        .equals(type)) {

        return UserProfileServiceStub.GetUserProfileByIndexResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.AddColleague.class.equals(type)) {

        return UserProfileServiceStub.AddColleague.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

      if (UserProfileServiceStub.AddColleagueResponse.class
        .equals(type)) {

        return UserProfileServiceStub.AddColleagueResponse.Factory
          .parse(param.getXMLStreamReaderWithoutCaching());


      }

    } catch (Exception e) {
      throw new RuntimeException(e);
    }
    return null;
  }



  private void setOpNameArray() {
    opNameArray = null;
  }

}
