TEST_SERVERS=SELECT 1 FROM :servers LIMIT 1;
CREATE_SERVERS_SEQUENCE=
CREATE_SERVERS=CREATE TABLE IF NOT EXISTS :servers (serverid IDENTITY, dn VARCHAR(1024) NOT NULL, netbiosname VARCHAR(32) NOT NULL, dnsroot VARCHAR(64) NOT NULL, sid VARCHAR(64) NOT NULL, dsservicename VARCHAR(512) NOT NULL, invocationid VARCHAR(128) NOT NULL, highestcommittedusn INT NOT NULL, lastfullsync DATETIME, UNIQUE(dn), UNIQUE(sid, dnsroot));
TEST_ENTITIES=SELECT 1 FROM :entities LIMIT 1;
CREATE_ENTITIES_SEQUENCE=
CREATE_ENTITIES=CREATE TABLE IF NOT EXISTS :entities (entityid IDENTITY, dn VARCHAR(1024), samaccountname VARCHAR(256), userprincipalname VARCHAR(256), domainsid VARCHAR(64) NOT NULL, rid INTEGER, primarygroupid INTEGER, objectguid VARCHAR(64), usnchanged BIGINT, wellknown SMALLINT NOT NULL); CREATE INDEX IF NOT EXISTS  dn:entities:index ON :entities(DN); CREATE INDEX IF NOT EXISTS rid:entities:index ON :entities(RID);
TEST_MEMBERS=SELECT 1 FROM :members LIMIT 1;
CREATE_MEMBERS_SEQUENCE=
CREATE_MEMBERS=CREATE TABLE IF NOT EXISTS :members (groupid LONG, memberdn VARCHAR(1024), memberid LONG, PRIMARY KEY (groupid, memberdn), FOREIGN KEY(groupid) REFERENCES :entities (entityid), FOREIGN KEY(memberid) REFERENCES :entities (entityid));

SELECT_SERVER=SELECT serverid, dn, netbiosname, dnsroot, dsservicename, invocationid, highestcommittedusn, lastfullsync FROM :servers WHERE dn = :dn;
UPDATE_SERVER=MERGE INTO :servers (dn, netbiosname, dnsroot, sid, dsservicename, invocationid, highestcommittedusn, lastfullsync) KEY (dn) VALUES (:dn, :netbiosname, :dnsroot, :sid, :dsservicename, :invocationid, :highestcommittedusn, :lastfullsync);
MERGE_ENTITIES=MERGE INTO :entities (dn, samaccountname, userprincipalname, domainsid, rid, primarygroupid, objectguid, usnchanged, wellknown) KEY (dn) VALUES (:dn, :samaccountname, :userprincipalname, :domainsid, :rid, :primarygroupid, :objectguid, :usnchanged, :wellknown);
DELETE_MEMBERSHIPS=DELETE FROM :members WHERE groupid IN (SELECT entityid FROM :entities WHERE dn = :dn OR objectguid = :objectguid) OR memberid in (SELECT entityid FROM :entities WHERE dn = :dn OR objectguid = :objectguid);
ADD_MEMBERSHIPS=INSERT INTO :members (groupid, memberdn) VALUES ((SELECT entityid FROM :entities WHERE dn = :dn), :memberdn);
MATCH_ENTITIES=UPDATE :members SET memberid = (SELECT entityid FROM :entities WHERE memberdn = dn);
RESOLVE_PRIMARY_GROUPS=MERGE INTO :members (groupid, memberdn, memberid) KEY (groupid, memberdn) SELECT b.entityid, a.dn, a.entityid FROM :entities a JOIN :entities b ON a.domainsid = b.domainsid AND a.primarygroupid = b.rid;
RESOLVE_FOREIGN_SECURITY_PRINCIPALS=MERGE INTO :members (groupid, memberid, memberdn) KEY (groupid, memberdn) SELECT groupid, entities.entityid, memberdn FROM :members JOIN entities ON SUBSTRING(memberdn, 4, INSTR(memberdn, ',CN') - 4) = domainsid || '-' || rid WHERE memberdn LIKE '%CN=ForeignSecurityPrincipals%';

SELECT_USER_BY_SAMACCOUNTNAME=SELECT entityid, entities.dn, samaccountname, userprincipalname, domainsid, rid, primarygroupid, objectguid, usnchanged, dnsroot, netbiosname FROM :entities JOIN :servers ON domainsid = sid WHERE LOWER(samaccountname) = LOWER(:samaccountname) AND primarygroupid IS NOT NULL;
SELECT_USER_BY_DOMAIN_SAMACCOUNTNAME=SELECT entityid, entities.dn, samaccountname, userprincipalname, domainsid, rid, primarygroupid, objectguid, usnchanged, dnsroot, netbiosname FROM :entities JOIN :servers ON domainsid = sid WHERE LOWER(samaccountname) = LOWER(:samaccountname) and (UPPER(netbiosname) = UPPER(:netbiosname) OR LOWER(dnsroot) = LOWER(:netbiosname)) AND primarygroupid IS NOT NULL;
SELECT_WELLKNOWN_MEMBERSHIPS=SELECT entityid, netbiosname, samaccountname FROM :entities LEFT JOIN :servers ON domainsid = sid WHERE wellknown = 1;
SELECT_MEMBERSHIPS_BY_ENTITYID=SELECT entityid, netbiosname, samaccountname FROM :members JOIN entities ON groupid = entityid JOIN :servers ON domainsid = sid WHERE memberid = :entityid;
SELECT_MEMBERSHIPS_BY_DN=SELECT e1.dn, memberdn FROM :entities e1 JOIN :members ON e1.entityid = groupid AND e1.dn = :dn LEFT JOIN :entities e2 ON memberid = e2.entityid WHERE e1.rid != e2.primarygroupid OR e2.primarygroupid IS NULL;
DELETE_MEMBERSHIPS_BY_DN_AND_MEMBERDN=DELETE FROM :members WHERE groupid IN (SELECT entityid FROM :entities WHERE dn = :dn) AND memberdn = :memberdn
SELECT_ALL_ENTITIES_BY_SID=SELECT dn FROM :entities WHERE domainsid = :sid;