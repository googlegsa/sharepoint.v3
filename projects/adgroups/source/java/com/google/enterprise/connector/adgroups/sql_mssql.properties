# TODO: Detect existance correctly - this will fail if there is a table with same name in different schema
CREATE_SERVERS_SEQUENCE=
CREATE_SERVERS=IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = ::servers)) BEGIN CREATE TABLE :servers (serverid BIGINT IDENTITY, dn NVARCHAR(1024) NOT NULL, netbiosname VARCHAR(32) NOT NULL, dnsroot VARCHAR(64) NOT NULL, sid VARCHAR(64) NOT NULL, dsservicename VARCHAR(512) NOT NULL, invocationid VARCHAR(128) NOT NULL, highestcommittedusn INT NOT NULL, lastsync DATETIME, PRIMARY KEY (serverid), UNIQUE(dn), UNIQUE(sid, dnsroot)); END
CREATE_ENTITIES_SEQUENCE=
CREATE_ENTITIES=IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = ::entities)) BEGIN CREATE TABLE :entities (entityid BIGINT IDENTITY, dn NVARCHAR(1024), samaccountname NVARCHAR(256), userprincipalname NVARCHAR(256), domainsid VARCHAR(64) NOT NULL, rid INT, primarygroupid INT, objectguid VARCHAR(64), usnchanged BIGINT, wellknown INT NOT NULL, PRIMARY KEY(entityid), UNIQUE(dn), UNIQUE(domainsid, primarygroupid, rid, entityid, dn)); END
CREATE_MEMBERS_SEQUENCE=
CREATE_MEMBERS=IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = ::members)) BEGIN CREATE TABLE :members (groupid BIGINT, memberdn NVARCHAR(1024), memberid BIGINT, PRIMARY KEY (groupid, memberdn), FOREIGN KEY(groupid) REFERENCES :entities (entityid), FOREIGN KEY(memberid) REFERENCES :entities (entityid)); END

CLEAN_MEMBERS=DELETE FROM :members WHERE EXISTS (SELECT NULL FROM :entities, :servers s WHERE members.groupid = entityid AND domainsid = sid AND s.dn = :dn);
CLEAN_FOREIGN_MEMBERS=UPDATE :members SET memberid = NULL WHERE EXISTS (SELECT NULL FROM :entities, :servers s WHERE memberid = entityid AND domainsid = sid AND s.dn = :dn);
CLEAN_ENTITIES=DELETE FROM :entities WHERE EXISTS (SELECT NULL FROM :servers s WHERE domainsid = sid AND s.dn = :dn);

SELECT_SERVER=SELECT serverid, dn, netbiosname, dnsroot, dsservicename, invocationid, highestcommittedusn, lastsync FROM :servers WHERE dn = :dn ORDER BY lastsync DESC;
# TODO: Convert to proper merge statement
UPDATE_SERVER=IF EXISTS (SELECT NULL FROM :servers WHERE dn = :dn) UPDATE :servers SET dn = :dn, netbiosname = :netbiosname, dnsroot = :dnsroot, sid = :sid, dsservicename = :dsservicename, invocationid = :invocationid, highestcommittedusn = :highestcommittedusn, lastsync = GETDATE() WHERE dn = :dn ELSE INSERT INTO :servers (dn, netbiosname, dnsroot, sid, dsservicename, invocationid, highestcommittedusn, lastsync) VALUES (:dn, :netbiosname, :dnsroot, :sid, :dsservicename, :invocationid, :highestcommittedusn, GETDATE());
MERGE_ENTITIES=IF EXISTS (SELECT NULL FROM :entities WHERE dn = :dn) UPDATE :entities SET objectguid = :objectguid, samaccountname = :samaccountname, userprincipalname = :userprincipalname, domainsid = :domainsid, rid = :rid, primarygroupid = :primarygroupid, usnchanged = :usnchanged, wellknown = :wellknown WHERE dn = :dn ELSE INSERT INTO :entities (dn, samaccountname, userprincipalname, domainsid, rid, primarygroupid, objectguid, usnchanged, wellknown) VALUES (:dn, :samaccountname, :userprincipalname, :domainsid, :rid, :primarygroupid, :objectguid, :usnchanged, :wellknown);

DELETE_MEMBERSHIPS=DELETE FROM :members WHERE groupid IN (SELECT entityid FROM :entities WHERE dn = :dn)
ADD_MEMBERSHIPS=INSERT INTO :members (groupid, memberdn) VALUES ((SELECT entityid FROM :entities WHERE dn = :dn), :memberdn);
MATCH_ENTITIES=UPDATE :members SET memberid = (SELECT TOP 1 entityid FROM :entities e WHERE memberdn = dn);
RESOLVE_PRIMARY_GROUPS=MERGE :members USING (entities a JOIN entities b ON a.domainsid = b.domainsid AND a.primarygroupid = b.rid) ON members.groupid = b.entityid AND members.memberdn = a.dn WHEN MATCHED THEN UPDATE SET groupid = b.entityid, memberdn = a.dn, memberid = a.entityid WHEN NOT MATCHED THEN INSERT (groupid, memberdn, memberid) VALUES (b.entityid, a.dn, a.entityid);
RESOLVE_FOREIGN_SECURITY_PRINCIPALS=MERGE :members USING :entities ON SUBSTRING(memberdn, 4, CHARINDEX(',CN', memberdn) - 4) = domainsid + '-' + CAST(rid AS VARCHAR(32)) AND memberdn LIKE '%CN=ForeignSecurityPrincipals%' WHEN MATCHED THEN UPDATE SET memberid = entityid;

SELECT_USER_BY_SAMACCOUNTNAME=SELECT entityid, entities.dn, samaccountname, userprincipalname, domainsid, rid, primarygroupid, objectguid, usnchanged, dnsroot, netbiosname FROM :entities JOIN :servers ON domainsid = sid WHERE LOWER(samaccountname) = LOWER(:samaccountname) AND primarygroupid IS NOT NULL;
SELECT_USER_BY_NETBIOS_SAMACCOUNTNAME=SELECT entityid, entities.dn, samaccountname, userprincipalname, domainsid, rid, primarygroupid, objectguid, usnchanged, dnsroot, netbiosname FROM :entities JOIN :servers ON domainsid = sid WHERE LOWER(samaccountname) = LOWER(:samaccountname) and UPPER(netbiosname) = UPPER(:netbiosname) AND primarygroupid IS NOT NULL;
SELECT_WELLKNOWN_MEMBERSHIPS=SELECT entityid, netbiosname, samaccountname FROM :entities LEFT JOIN :servers ON domainsid = sid WHERE wellknown = 1;
SELECT_MEMBERSHIPS_BY_ENTITYID=SELECT entityid, netbiosname, samaccountname FROM :members JOIN entities ON groupid = entityid JOIN :servers ON domainsid = sid WHERE memberid = :entityid;
