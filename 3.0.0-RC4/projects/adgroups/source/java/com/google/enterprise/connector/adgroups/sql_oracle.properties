# //TODO: detect existence of tables
CREATE_SERVERS_SEQUENCE=CREATE SEQUENCE :servers:sequence
CREATE_SERVERS=CREATE TABLE :servers (serverid NUMBER, dn VARCHAR2(1024) NOT NULL, netbiosname VARCHAR2(32) NOT NULL, dnsroot VARCHAR2(64), sid VARCHAR2(64) NOT NULL, dsservicename VARCHAR2(512) NOT NULL, invocationid VARCHAR2(128) NOT NULL, highestcommittedusn NUMBER NOT NULL, lastsync TIMESTAMP, PRIMARY KEY(serverid), UNIQUE(dn), UNIQUE(sid, dnsroot))
CREATE_ENTITIES_SEQUENCE=CREATE SEQUENCE :entities:sequence
CREATE_ENTITIES=CREATE TABLE :entities (entityid NUMBER, dn VARCHAR2(1024), samaccountname VARCHAR2(256), userprincipalname VARCHAR2(256), domainsid VARCHAR2(64) NOT NULL, rid NUMBER(10), primarygroupid NUMBER(10), objectguid VARCHAR2(64), usnchanged NUMBER, wellknown NUMBER NOT NULL, PRIMARY KEY(entityid))
CREATE_MEMBERS_SEQUENCE=CREATE SEQUENCE :members:sequence
CREATE_MEMBERS=CREATE TABLE :members (groupid NUMBER, memberdn VARCHAR2(1024), memberid NUMBER, PRIMARY KEY (groupid, memberdn), FOREIGN KEY(groupid) REFERENCES :entities (entityid), FOREIGN KEY(memberid) REFERENCES :entities (entityid))

CLEAN_MEMBERS=DELETE FROM :members WHERE EXISTS (SELECT NULL FROM :entities, :servers s WHERE groupid = entityid AND domainsid = sid AND s.dn = :dn)
CLEAN_FOREIGN_MEMBERS=UPDATE :members SET memberid = NULL WHERE EXISTS (SELECT NULL FROM :entities, :servers s WHERE memberid = entityid AND domainsid = sid AND s.dn = :dn)
CLEAN_ENTITIES=DELETE FROM :entities e WHERE EXISTS (SELECT NULL FROM :servers s WHERE domainsid = sid AND s.dn = :dn)

SELECT_SERVER=SELECT serverid, dn, netbiosname, dnsroot, dsservicename, invocationid, highestcommittedusn, lastsync FROM :servers WHERE dn = :dn ORDER BY lastsync DESC
UPDATE_SERVER=MERGE INTO servers USING dual ON (dn = :dn) WHEN MATCHED THEN UPDATE SET netbiosname = :netbiosname, dnsroot = :dnsroot, sid = :sid, dsservicename = :dsservicename, invocationid = :invocationid, highestcommittedusn = :highestcommittedusn, lastsync = SYSDATE WHEN NOT MATCHED THEN INSERT (serverid, dn, netbiosname, dnsroot, sid, dsservicename, invocationid, highestcommittedusn, lastsync) VALUES (servers_sequence.nextval, :dn, :netbiosname, :dnsroot, :sid, :dsservicename, :invocationid, :highestcommittedusn, SYSDATE)
MERGE_ENTITIES=MERGE INTO :entities USING dual ON (dn = :dn) WHEN MATCHED THEN UPDATE SET objectguid = :objectguid, samaccountname = :samaccountname, userprincipalname = :userprincipalname, domainsid = :domainsid, rid = :rid, primarygroupid = :primarygroupid, usnchanged = :usnchanged, wellknown  = :wellknown WHEN NOT MATCHED THEN INSERT (entityid, dn, samaccountname, userprincipalname, domainsid, rid, primarygroupid, objectguid, usnchanged, wellknown) VALUES (:entities:sequence.nextval, :dn, :samaccountname, :userprincipalname, :domainsid, :rid, :primarygroupid, :objectguid, :usnchanged, :wellknown)
DELETE_MEMBERSHIPS=DELETE FROM :members WHERE groupid IN (SELECT entityid FROM :entities WHERE dn = :dn)
ADD_MEMBERSHIPS=INSERT INTO :members (groupid, memberdn) VALUES ((SELECT entityid FROM :entities WHERE dn = :dn), :memberdn)
MATCH_ENTITIES=UPDATE :members SET memberid = (SELECT entityid FROM :entities WHERE memberdn = dn)
RESOLVE_PRIMARY_GROUPS=MERGE INTO members m USING (SELECT b.entityid AS groupid, a.dn AS memberdn, a.entityid AS memberid FROM entities a JOIN entities b ON a.domainsid = b.domainsid AND a.primarygroupid = b.rid) j ON (m.groupid = j.groupid AND m.memberdn = j.memberdn) WHEN MATCHED THEN UPDATE SET memberid = j.memberid WHEN NOT MATCHED THEN INSERT (groupid, memberdn, memberid) VALUES (j.groupid, j.memberdn, j.memberid)
RESOLVE_FOREIGN_SECURITY_PRINCIPALS=MERGE INTO :members USING :entities ON (SUBSTR(memberdn, 4, INSTR(memberdn, ',CN') - 4) = domainsid || '-' || rid AND memberdn LIKE '%CN=ForeignSecurityPrincipals%') WHEN MATCHED THEN UPDATE SET memberid = entityid

SELECT_USER_BY_SAMACCOUNTNAME=SELECT entityid, entities.dn, samaccountname, userprincipalname, domainsid, rid, primarygroupid, objectguid, usnchanged, dnsroot, netbiosname FROM :entities JOIN :servers ON domainsid = sid WHERE LOWER(samaccountname) = LOWER(:samaccountname) AND primarygroupid IS NOT NULL
SELECT_USER_BY_NETBIOS_SAMACCOUNTNAME=SELECT entityid, entities.dn, samaccountname, userprincipalname, domainsid, rid, primarygroupid, objectguid, usnchanged, dnsroot, netbiosname FROM :entities JOIN :servers ON domainsid = sid WHERE LOWER(samaccountname) = LOWER(:samaccountname) and UPPER(netbiosname) = UPPER(:netbiosname) AND primarygroupid IS NOT NULL
SELECT_WELLKNOWN_MEMBERSHIPS=SELECT entityid, netbiosname, samaccountname FROM :entities LEFT JOIN :servers ON domainsid = sid WHERE wellknown = 1
SELECT_MEMBERSHIPS_BY_ENTITYID=SELECT entityid, netbiosname, samaccountname FROM :members JOIN entities ON groupid = entityid JOIN :servers ON domainsid = sid WHERE memberid = :entityid
