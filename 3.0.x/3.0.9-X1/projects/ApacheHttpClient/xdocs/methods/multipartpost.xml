<?xml version="1.0" encoding="ISO-8859-1"?>

<document>

	<properties>
    <title>Multipart Post Method</title>
    <author email="adrian@ephox.com">Adrian Sutton</author>
    <revision>$Id: multipartpost.xml 155418 2005-02-26 13:01:52Z dirkv $</revision>
  </properties>

  <body>

    <section name="Introduction">
      <p>The multipart post method is a different request body format for a
      <a href="post.html">POST</a> method.  The media-type multipart/form-data
      follows the rules of all multipart MIME data streams as outlined in RFC
      1521.  It is intended for use in returning the data that comes about from
      filling out a form, particularly when the form requires binary data to
      be uploaded such as the contents of a file.</p>
    </section>

    <section name="Typical Usage">
      <p>Like for the standard POST method, there are two main steps to using
      the multipart post method, setting the request data and retrieving the
      response data.</p>

      <p>The request data is specified by adding parameters to the method,
      these are defined by the
      <code>org.apache.commons.httpclient.methods.multipart.Part</code> class
      and it's various subclasses.  A description of each of these is below.</p>

      <table>
        <tr>
          <th>Part</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>StringPart</td>
          <td>The string part is a simple part that takes a name for the part
          and the value of the part as a string.  This is typically used for
          standard form elements such as a text area within a multipart
          form.</td>
        </tr>
        <tr>
          <td>FilePart</td>
          <td>The file part is actually a very generic type of part that can
          contain any type of data and specify a name, content type and charset
          for the data.  In it's simplest form, it takes just a name and a File
          object and uploads the contents of the file, however it can also be
          passed a <code>PartSource</code> object to upload.  See the part
          source section below for more information.</td>
        </tr>
      </table>

      <subsection name="Part Sources">
        <p>The <code>PartSource</code> interface provides a generic container
        for providing data to the FilePart class.  There are two concrete
        implementations of PartSource provided with HttpClient (described
        below) but you can also provide your own implementation easily.  The
        input for the multipart post could come from anywhere, perhaps it's
        being received from another server or process, and all that the
        PartSource class needs to be able to do is provide the length of the
        data that will be provided, an input stream to retrieve the data from
        and a file name (or some name identifying the data).</p>

        <p>The two concrete implementations of PartSource are FilePartSource
        and ByteArrayPartSource.  FilePartSource simply takes a File to upload
        whereas ByteArrayPartSource allows for the case where the data has been
        cached in memory and takes a file name and a byte array to upload.</p>
      </subsection>
    </section>

    <section name="Common Problems">
      <p>The most common problem people run into with multipart uploads is that
      the length of the data must be known before hand.  If the length of the
      data can not be determined in advance, it needs to be cached either in
      memory or to a file and then uploaded using either ByteArrayPartSource or
      FilePartSource.  The HTTP specification does not allow for POST data to
      be of an unknown length.</p>
    </section>

    <section name="RFC Section">
      <p>The multipart form data uses the POST method from the HTTP standard
      which is defined in section 8.3 of <a
      href="http://www.ietf.org/rfc//rfc1945.txt">RFC1945</a> and similarly
      redefined for HTTP 1.1 in section 9.5 of <a
      href="http://www.ietf.org/rfc/rfc2616.txt">RFC2616</a>.</p>

      <p>The multipart/form-data MIME type used to format the body of the
      request is defined in <a
      href="http://www.ietf.org/rfc/rfc1867.txt">RFC1867</a>.</p>
    </section>

  </body>

</document>
