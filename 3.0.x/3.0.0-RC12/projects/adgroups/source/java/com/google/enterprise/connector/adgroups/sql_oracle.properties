TEST_SERVERS=SELECT 1 FROM :servers WHERE rownum < 0
CREATE_SERVERS_SEQUENCE=CREATE SEQUENCE :servers:sequence
CREATE_SERVERS=CREATE TABLE :servers (serverid NUMBER, dn VARCHAR2(1024) NOT NULL, netbiosname VARCHAR2(32) NOT NULL, dnsroot VARCHAR2(64), sid VARCHAR2(64) NOT NULL, dsservicename VARCHAR2(512) NOT NULL, invocationid VARCHAR2(128) NOT NULL, highestcommittedusn NUMBER NOT NULL, lastfullsync TIMESTAMP, PRIMARY KEY(serverid), UNIQUE(dn), UNIQUE(sid, dnsroot))
TEST_ENTITIES=SELECT 1 FROM :entities WHERE rownum < 0
CREATE_ENTITIES_SEQUENCE=CREATE SEQUENCE :entities:sequence
CREATE_ENTITIES=CREATE TABLE :entities (entityid NUMBER, dn VARCHAR2(1024), samaccountname VARCHAR2(256), userprincipalname VARCHAR2(256), domainsid VARCHAR2(64) NOT NULL, rid NUMBER(10), primarygroupid NUMBER(10), objectguid VARCHAR2(64), usnchanged NUMBER, wellknown NUMBER NOT NULL, PRIMARY KEY(entityid), UNIQUE(dn), UNIQUE(domainsid, primarygroupid, rid, entityid, dn))
TEST_MEMBERS=SELECT 1 FROM :members WHERE rownum < 0
CREATE_MEMBERS_SEQUENCE=CREATE SEQUENCE :members:sequence
CREATE_MEMBERS=CREATE TABLE :members (groupid NUMBER, memberdn VARCHAR2(1024), memberid NUMBER, PRIMARY KEY (groupid, memberdn), FOREIGN KEY(groupid) REFERENCES :entities (entityid), FOREIGN KEY(memberid) REFERENCES :entities (entityid))

SELECT_SERVER=SELECT serverid, dn, netbiosname, dnsroot, dsservicename, invocationid, highestcommittedusn, lastfullsync FROM :servers WHERE dn = :dn
UPDATE_SERVER=MERGE INTO servers USING dual ON (dn = :dn) WHEN MATCHED THEN UPDATE SET netbiosname = :netbiosname, dnsroot = :dnsroot, sid = :sid, dsservicename = :dsservicename, invocationid = :invocationid, highestcommittedusn = :highestcommittedusn, lastfullsync = :lastfullsync WHEN NOT MATCHED THEN INSERT (serverid, dn, netbiosname, dnsroot, sid, dsservicename, invocationid, highestcommittedusn, lastfullsync) VALUES (servers_sequence.nextval, :dn, :netbiosname, :dnsroot, :sid, :dsservicename, :invocationid, :highestcommittedusn, :lastfullsync)
MERGE_ENTITIES=MERGE INTO :entities USING dual ON (dn = :dn) WHEN MATCHED THEN UPDATE SET objectguid = :objectguid, samaccountname = :samaccountname, userprincipalname = :userprincipalname, domainsid = :domainsid, rid = :rid, primarygroupid = :primarygroupid, usnchanged = :usnchanged, wellknown  = :wellknown WHEN NOT MATCHED THEN INSERT (entityid, dn, samaccountname, userprincipalname, domainsid, rid, primarygroupid, objectguid, usnchanged, wellknown) VALUES (:entities:sequence.nextval, :dn, :samaccountname, :userprincipalname, :domainsid, :rid, :primarygroupid, :objectguid, :usnchanged, :wellknown)
DELETE_MEMBERSHIPS=DELETE FROM :members WHERE groupid IN (SELECT entityid FROM :entities WHERE dn = :dn OR objectguid = :objectguid) OR memberid in (SELECT entityid FROM :entities WHERE dn = :dn OR objectguid = :objectguid)
ADD_MEMBERSHIPS=INSERT INTO :members (groupid, memberdn) VALUES ((SELECT entityid FROM :entities WHERE dn = :dn), :memberdn)
MATCH_ENTITIES=UPDATE :members SET memberid = (SELECT entityid FROM :entities WHERE memberdn = dn)
RESOLVE_PRIMARY_GROUPS=MERGE INTO :members m USING (SELECT b.entityid AS groupid, a.dn AS memberdn, a.entityid AS memberid FROM :entities a JOIN :entities b ON a.domainsid = b.domainsid AND a.primarygroupid = b.rid) j ON (m.groupid = j.groupid AND m.memberdn = j.memberdn) WHEN MATCHED THEN UPDATE SET memberid = j.memberid WHEN NOT MATCHED THEN INSERT (groupid, memberdn, memberid) VALUES (j.groupid, j.memberdn, j.memberid)
RESOLVE_FOREIGN_SECURITY_PRINCIPALS=MERGE INTO :members USING :entities ON (SUBSTR(memberdn, 4, INSTR(memberdn, ',CN') - 4) = domainsid || '-' || rid AND memberdn LIKE '%CN=ForeignSecurityPrincipals%') WHEN MATCHED THEN UPDATE SET memberid = entityid

SELECT_USER_BY_SAMACCOUNTNAME=SELECT entityid, entities.dn, samaccountname, userprincipalname, domainsid, rid, primarygroupid, objectguid, usnchanged, dnsroot, netbiosname FROM :entities JOIN :servers ON domainsid = sid WHERE LOWER(samaccountname) = LOWER(:samaccountname) AND primarygroupid IS NOT NULL
SELECT_USER_BY_DOMAIN_SAMACCOUNTNAME=SELECT entityid, entities.dn, samaccountname, userprincipalname, domainsid, rid, primarygroupid, objectguid, usnchanged, dnsroot, netbiosname FROM :entities JOIN :servers ON domainsid = sid WHERE LOWER(samaccountname) = LOWER(:samaccountname) and (UPPER(netbiosname) = UPPER(:netbiosname) or LOWER(dnsroot) = LOWER(:netbiosname)) AND primarygroupid IS NOT NULL
SELECT_WELLKNOWN_MEMBERSHIPS=SELECT entityid, netbiosname, samaccountname FROM :entities LEFT JOIN :servers ON domainsid = sid WHERE wellknown = 1
SELECT_MEMBERSHIPS_BY_ENTITYID=SELECT entityid, netbiosname, samaccountname FROM :members JOIN entities ON groupid = entityid JOIN :servers ON domainsid = sid WHERE memberid = :entityid
SELECT_MEMBERSHIPS_BY_DN=SELECT e1.dn, memberdn FROM :entities e1 JOIN :members ON e1.entityid = groupid AND e1.dn = :dn LEFT JOIN :entities e2 ON memberid = e2.entityid WHERE e1.rid != e2.primarygroupid OR e2.primarygroupid IS NULL
DELETE_MEMBERSHIPS_BY_DN_AND_MEMBERDN=DELETE FROM :members WHERE groupid IN (SELECT entityid FROM :entities WHERE dn = :dn) AND memberdn = :memberdn
SELECT_ALL_ENTITIES_BY_SID=SELECT dn FROM :entities WHERE domainsid = :sid